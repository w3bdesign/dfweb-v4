This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-19T14:08:48.716Z

# File Summary

## Purpose
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
- Pay special attention to the Repository Description. These contain important context and guidelines specific to this project.

## Notes
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

- Line numbers have been added to the beginning of each line.

## Additional Info
### User Provided Header
This file is automatically generated by Repomix to provide AI tools with up-to-date repository context. Last updated by GitHub Actions.

# Directory Structure
```
.circleci/
  config.yml
.github/
  ISSUE_TEMPLATE/
    bug_report.md
  workflows/
    budget.json
    codeql.yml
    cypress.yml
    lighthouse.yml
    playwright.yml
    repomix.yml
.ladle/
  components.tsx
commit/
  commit_analyzer.py
DOCS/
  EXPLANATION.md
  README.md
public/
  favicon.svg
  logo.svg
  next.svg
  notfound.svg
  robots.txt
src/
  __mocks__/
    categories.json
    hero.json
    links.json
    pagecontent.json
    projects.json
    react-dom.ts
  __tests__/
    Animations/
      BounceInScroll.test.tsx
      Grow.test.tsx
      Matrix.renderer.test.ts
      Matrix.test.tsx
      Matrix.utils.test.ts
      MatrixCursor.test.tsx
      RotatingLoader.test.tsx
      TestAnimation.test.tsx
    CV/
      CVContent.test.tsx
    ErrorBoundary/
      ErrorBoundary.test.tsx
      ErrorFallback.test.tsx
    Index/
      Hero.test.tsx
      Icons.test.tsx
      IndexContent.test.tsx
      Section.test.tsx
    Kontakt/
      KontaktContent.test.tsx
    Layout/
      Footer.test.tsx
      Header.test.tsx
      MobileMenu.test.tsx
    Prosjekter/
      actions.test.ts
      error.test.tsx
      loading.test.tsx
      page.test.tsx
      ProsjektCard.test.tsx
    UI/
      Button.test.tsx
      InputField.test.tsx
      Pill.test.tsx
      SkipLink.test.tsx
      Tabs.test.tsx
  app/
    api/
      siteMapGenerator.ts
    cv/
      page.tsx
    kontakt/
      page.tsx
    prosjekter/
      actions.ts
      error.tsx
      loading.tsx
      page.tsx
    cursor.css
    glitch.css
    globals.css
    layout.tsx
    not-found.tsx
    page.tsx
    RootLayout.tsx
  components/
    Animations/
      types/
        Animations.types.ts
      BounceInScroll.component.tsx
      FadeDown.component.tsx
      FadeUp.component.tsx
      Grow.component.tsx
      Matrix.component.tsx
      Matrix.renderer.ts
      Matrix.utils.ts
      MatrixCursor.component.tsx
      PageTransition.component.tsx
      RotatingLoader.component.tsx
    CV/
      CVContent.component.tsx
    ErrorBoundary/
      ErrorBoundary.tsx
      ErrorFallback.component.tsx
      ErrorFallbackWrapper.component.tsx
      Fallback.component.tsx
    Index/
      Hero.component.tsx
      Icons.component.tsx
      IndexContent.component.tsx
      MobileBackground.component.tsx
      Section.component.tsx
    Kontakt/
      config/
        formConfig.ts
      KontaktContent.component.tsx
    Layout/
      DesktopNavigation.component.tsx
      Footer.component.tsx
      Hamburger.component.tsx
      Header.component.tsx
      MobileMenu.component.tsx
      NavigationLink.component.tsx
    Prosjekter/
      ProsjektCard.component.tsx
    UI/
      Button.component.tsx
      GenericForm.component.tsx
      InputField.component.tsx
      PageHeader.component.tsx
      Pill.component.tsx
      SkipLink.component.tsx
      Tabs.component.tsx
  config/
    env.ts
  e2e/
    cypress/
      component/
        Button.cy.tsx
        Hero.cy.tsx
        Icons.cy.tsx
      e2e/
        accessibility.cy.ts
        cv.cy.ts
        index.cy.ts
        kontakt.cy.ts
        prosjekter.cy.ts
      support/
        commands.ts
        component-index.html
        component.ts
        e2e.ts
        functions.ts
      tsconfig.json
    playwright/
      cv.spec.ts
      index.spec.ts
      kontakt.spec.ts
      prosjekter.spec.ts
  hooks/
    useMobile.tsx
    useNavigation.ts
  lib/
    framer/
      client.ts
    sanity/
      client.ts
      helpers.ts
      queries.ts
  stories/
    components/
      BounceInScroll.stories.tsx
      Button.stories.tsx
      ErrorBoundary.stories.tsx
      FadeDown.stories.tsx
      FadeUp.stories.tsx
      Footer.stories.tsx
      GenericForm.stories.tsx
      Grow.stories.tsx
      Hamburger.stories.tsx
      InputField.stories.tsx
      Matrix.stories.tsx
      MatrixCursor.stories.tsx
      NavigationLink.stories.tsx
      PageHeader.stories.tsx
      Pill.stories.tsx
      RotatingLoader.stories.tsx
      SkipLink.stories.tsx
      Tabs.stories.tsx
  types/
    sanity.types.ts
  utils/
    eslint/
      index.js
      package.json
    portableTextComponents.tsx
    test-utils.ts
studio/
  schemaTypes/
    documents/
      category.ts
      cv.ts
      navigation.ts
      page.ts
      project.ts
    objects/
      herocontent.ts
      link.ts
      pagecontent.ts
    index.ts
    schema.ts
  static/
    .gitkeep
  .eslintrc
  .gitignore
  package.json
  README.md
  sanity.cli.ts
  sanity.config.ts
  schema.json
  schema.ts
  tsconfig.json
.eslintrc-custom-rules.ts
.eslintrc.json
.gitattributes
.gitignore
codecov.yml
cypress.config.ts
cypress.d.ts
gitmojis.json
jest.config.ts
jest.setup.ts
LICENSE
lighthouserc.json
next.config.ts
package.json
playwright.config.ts
postcss.config.mjs
README.md
renovate.json
repomix.config.json
sanity.cli.ts
tailwind.config.ts
TODO.md
tsconfig.json
```

# Files

## File: .circleci/config.yml
```yaml
 1: version: 2.1
 2: orbs:
 3:   cypress: cypress-io/cypress@3.4.2
 4:   codecov: codecov/codecov@5.0.3
 5:   node: circleci/node@7.0.0
 6: executors:
 7:   with-chrome-and-firefox:
 8:     docker:
 9:       - image: "cypress/browsers:node16.14.2-slim-chrome100-ff99-edge"
10:     resource_class: large
11: jobs:
12:   chromatic-deployment:
13:     docker:
14:       - image: cimg/node:23.6.0
15:     working_directory: ~/chromatic
16:     steps:
17:       - checkout
18:       - restore_cache:
19:           keys:
20:             - pnpm-packages-v1-{{ checksum "pnpm-lock.yaml" }}
21:             - pnpm-packages-cache-v1
22:       - run:
23:           name: Install pnpm package manager
24:           command: |
25:             sudo corepack enable
26:             sudo corepack prepare pnpm@latest-8 --activate
27:       - run:
28:           name: Install Dependencies
29:           command: pnpm install --frozen-lockfile
30:       - run: pnpm run chromatic -- --project-token=${CHROMATIC_PROJECT_TOKEN}
31:       - save_cache:
32:           key: pnpm-packages-v1-{{ checksum "pnpm-lock.yaml" }}
33:           paths:
34:             - ~/.pnpm-store
35:   build:
36:     working_directory: /home/circleci/dfweb
37:     docker:
38:       - image: cimg/node:23.6.0-browsers
39:     steps:
40:       - checkout
41:       - restore_cache:
42:           key: pnpm-cache-v2-{{ checksum "pnpm-lock.yaml" }}
43:       - run:
44:           name: Install pnpm package manager
45:           command: |
46:             sudo corepack enable
47:             sudo corepack prepare pnpm@latest-8 --activate
48:       - run:
49:           name: Install Dependencies
50:           command: pnpm install --no-frozen-lockfile
51:       - run:
52:           name: Chrome key start setup
53:           command: sudo apt update -y
54:       - run:
55:           name: Chrome key finish setup
56:           command: wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
57:       - run:
58:           name: Chrome package download
59:           command: sudo apt install ./google-chrome-stable_current_amd64.deb
60:       - save_cache:
61:           key: pnpm-cache-v2-{{ checksum "pnpm-lock.yaml" }}
62:           paths:
63:             - ~/.pnpm-store
64:       - store_artifacts:
65:           path: /root/.npm/_logs
66:       - run:
67:           name: Run Jest Tests
68:           command: pnpm test
69:       - run: 
70:           name: Make sure ~/.gnupg directory exists
71:           command: mkdir -p ~/.gnupg
72:       - codecov/upload      
73:     parallelism: 6
74: workflows:
75:   chromatic-deploy:
76:     jobs:
77:       - build:
78:           name: Build Next.js project
```

## File: .github/ISSUE_TEMPLATE/bug_report.md
```markdown
 1: ---
 2: 
 3: name: Bug report
 4: about: Create a report to help us improve
 5: title: ''
 6: labels: ''
 7: assignees: ''
 8: 
 9: ---
10: 
11: **Describe the bug**
12: A clear and concise description of what the bug is.
13: 
14: **To Reproduce**
15: Steps to reproduce the behavior:
16: 1\. Go to '...'
17: 2\. Click on '....'
18: 3\. Scroll down to '....'
19: 4\. See error
20: 
21: **Expected behavior**
22: A clear and concise description of what you expected to happen.
23: 
24: **Screenshots**
25: If applicable, add screenshots to help explain your problem.
26: 
27: **Desktop (please complete the following information):**
28: 
29: - OS: [e.g. iOS]
30: - Browser [e.g. chrome, safari]
31: - Version [e.g. 22]
32: 
33: **Smartphone (please complete the following information):**
34: 
35: - Device: [e.g. iPhone6]
36: - OS: [e.g. iOS8.1]
37: - Browser [e.g. stock browser, safari]
38: - Version [e.g. 22]
39: 
40: **Additional context**
41: Add any other context about the problem here.
```

## File: .github/workflows/budget.json
```json
 1: [
 2:   {
 3:     "path": "/*",
 4:     "resourceSizes": [
 5:       {
 6:         "resourceType": "document",
 7:         "budget": 18
 8:       },
 9:       {
10:         "resourceType": "total",
11:         "budget": 200
12:       }
13:     ]
14:   }
15: ]
```

## File: .github/workflows/codeql.yml
```yaml
 1: name: "CodeQL"
 2: on:
 3:   push:
 4:     branches: ["master"]
 5:   pull_request:
 6:     branches: ["master"]
 7:   schedule:
 8:     - cron: "0 0 * * *"
 9: jobs:
10:   analyze:
11:     name: Analyze
12:     runs-on: ubuntu-latest
13:     permissions:
14:       actions: read
15:       contents: read
16:       security-events: write
17:     strategy:
18:       fail-fast: false
19:       matrix:
20:         language: [javascript]
21:     steps:
22:       - name: Checkout
23:         uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2
24:       - name: Initialize CodeQL
25:         uses: github/codeql-action/init@v3
26:         with:
27:           languages: ${{ matrix.language }}
28:           queries: +security-and-quality
29:       - name: Autobuild
30:         uses: github/codeql-action/autobuild@v3
31:       - name: Perform CodeQL Analysis
32:         uses: github/codeql-action/analyze@v3
33:         with:
34:           category: "/language:${{ matrix.language }}"
```

## File: .github/workflows/cypress.yml
```yaml
 1: name: Cypress Tests
 2: on: [push]
 3: jobs:
 4:   cypress-run:
 5:     runs-on: ubuntu-24.04
 6:     strategy:
 7:       fail-fast: false
 8:       matrix:
 9:         browser: [chrome, firefox, edge]
10:     container:
11:       image: cypress/browsers:node-20.17.0-chrome-128.0.6613.119-1-ff-130.0-edge-128.0.2739.63-1
12:       options: --user 1001
13:     steps:
14:       - name: Checkout
15:         uses: actions/checkout@v4
16:       - name: Install pnpm
17:         uses: pnpm/action-setup@v4
18:         with:
19:           version: 9
20:       - name: Install dependencies
21:         run: pnpm install
22:       - name: Cypress run
23:         uses: cypress-io/github-action@v6
24:         with:
25:           build: pnpm build
26:           start: pnpm dev
27:           wait-on: 'http://localhost:3000'
28:           wait-on-timeout: 120
29:           browser: ${{ matrix.browser }}
```

## File: .github/workflows/lighthouse.yml
```yaml
 1: name: Lighthouse CI
 2: on: [push, pull_request]
 3: jobs:
 4:   lighthouse:
 5:     runs-on: ubuntu-latest
 6:     steps:
 7:       - uses: actions/checkout@v4
 8:       - name: Setup Node.js
 9:         uses: actions/setup-node@v4
10:         with:
11:           node-version: '20'
12:       - name: Setup pnpm
13:         uses: pnpm/action-setup@v2
14:         with:
15:           version: 8
16:           run_install: false
17:       - name: Get pnpm store directory
18:         shell: bash
19:         run: |
20:           echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
21:       - name: Setup pnpm cache
22:         uses: actions/cache@v4
23:         with:
24:           path: ${{ env.STORE_PATH }}
25:           key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
26:           restore-keys: |
27:             ${{ runner.os }}-pnpm-store-
28:       - name: Install dependencies
29:         run: pnpm install
30:       - name: Build project
31:         run: pnpm build
32:       - name: Start server
33:         run: |
34:           pnpm start &
35:           echo "Waiting for server to be ready..."
36:           while ! nc -z localhost 3000; do
37:             sleep 5
38:           done
39:           # Additional wait to ensure full initialization
40:           sleep 20
41:       - name: Run Lighthouse CI
42:         run: |
43:           pnpm lhci:perf
44:           pnpm lhci:desktop
45:         env:
46:           LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
47:       - name: Stop server
48:         if: always()
49:         run: |
50:           pkill -f "next start" || true
```

## File: .github/workflows/playwright.yml
```yaml
 1: name: Playwright Tests
 2: on:
 3:   push:
 4:     branches: [ main, master ]
 5:   pull_request:
 6:     branches: [ main, master ]
 7: jobs:
 8:   test:
 9:     timeout-minutes: 60
10:     runs-on: ubuntu-latest
11:     steps:
12:     - uses: actions/checkout@v4
13:     - uses: pnpm/action-setup@v2
14:       with:
15:         version: 9
16:     - uses: actions/setup-node@v4
17:       with:
18:         node-version: 20
19:         cache: 'pnpm'
20:     - name: Install dependencies
21:       run: pnpm install
22:     - name: Install Playwright Browsers
23:       run: pnpm exec playwright install --with-deps chromium firefox
24:     - name: Build the project
25:       run: pnpm build
26:     - name: Start the application
27:       run: pnpm start &
28:     - name: Wait for the application to be ready
29:       run: |
30:         npx wait-on http://localhost:3000
31:     - name: Run Playwright tests
32:       run: pnpm exec playwright test
33:     - uses: actions/upload-artifact@v4
34:       if: always()
35:       with:
36:         name: playwright-report
37:         path: playwright-report/
38:         retention-days: 30
```

## File: .github/workflows/repomix.yml
```yaml
 1: name: Repository Documentation
 2: on:
 3:   push:
 4:     branches:
 5:       - main
 6:   workflow_dispatch: # allows manual triggering
 7: permissions:
 8:   contents: write
 9:   pull-requests: write
10: jobs:
11:   analyze:
12:     runs-on: ubuntu-latest
13:     steps:
14:       - name: Checkout repository
15:         uses: actions/checkout@v4
16:         with:
17:           fetch-depth: 0 # fetch all history for better context
18:       - name: Setup Node.js
19:         uses: actions/setup-node@v4
20:         with:
21:           node-version: "20"
22:       - name: Install Repomix
23:         run: npm install -g repomix
24:       - name: Generate Repository Documentation
25:         run: |
26:           echo "Creating DOCS directory..."
27:           mkdir -p DOCS
28:           echo "Running Repomix..."
29:           if ! repomix --output DOCS/repository_context.txt --style markdown --remove-empty-lines --verbose; then
30:             echo "Error: Repomix command failed"
31:             # Print directory contents for debugging
32:             echo "DOCS directory contents:"
33:             ls -la DOCS/
34:             exit 1
35:           fi
36:           echo "Verifying output file..."
37:           if [ ! -f "DOCS/repository_context.txt" ]; then
38:             echo "Error: repository_context.txt was not created"
39:             # Print directory contents for debugging
40:             echo "DOCS directory contents:"
41:             ls -la DOCS/
42:             exit 1
43:           fi
44:           if [ ! -s "DOCS/repository_context.txt" ]; then
45:             echo "Error: repository_context.txt is empty"
46:             exit 1
47:           fi
48:           echo "Repository context file generated successfully"
49:           echo "File size: $(stat --format=%s "DOCS/repository_context.txt") bytes"
50:           echo "First few lines of the file:"
51:           head -n 5 "DOCS/repository_context.txt"
52:       # Update Documentation
53:       - name: Commit and Push Changes
54:         run: |
55:           echo "Configuring git..."
56:           git config --local user.email "github-actions[bot]@users.noreply.github.com"
57:           git config --local user.name "github-actions[bot]"
58:           echo "Checking for changes..."
59:           if [[ -n "$(git status --porcelain)" ]]; then
60:             echo "Changes detected, committing..."
61:             # Stage only repository_context.txt to avoid unintended changes
62:             if ! git add DOCS/repository_context.txt; then
63:               echo "Error: Failed to stage repository_context.txt"
64:               exit 1
65:             fi
66:             if ! git commit -m "docs: update repository context via Repomix [skip ci]"; then
67:               echo "Error: Failed to create commit"
68:               exit 1
69:             fi
70:             echo "Pushing to main branch..."
71:             if ! git push; then
72:               echo "Error: Failed to push changes"
73:               exit 1
74:             fi
75:             echo "Successfully updated repository context"
76:           else
77:             echo "No changes detected in repository_context.txt"
78:           fi
```

## File: .ladle/components.tsx
```typescript
1: import "tailwindcss/tailwind.css";
```

## File: commit/commit_analyzer.py
```python
  1: import subprocess
  2: import os
  3: import sys
  4: import json
  5: import codecs
  6: import shlex
  7: from openai import OpenAI
  8: from pathlib import Path
  9: from dotenv import load_dotenv
 10: def read_config_file():
 11:     """Read configuration from local config file."""
 12:     config_path = os.path.join(str(Path.home()), ".ai_config.json")
 13:     try:
 14:         if os.path.exists(config_path):
 15:             with open(config_path, "r") as f:
 16:                 return json.load(f)
 17:     except Exception as e:
 18:         print(f"Error reading config file: {e}")
 19:     return {}
 20: def get_api_config():
 21:     """Get API configuration from environment variables or config file."""
 22:     load_dotenv()
 23:     # Try environment variables first
 24:     api_key = os.getenv("AI_API_KEY")
 25:     base_url = os.getenv("AI_BASE_URL")
 26:     # If no API key in env, try config file
 27:     if not api_key:
 28:         config = read_config_file()
 29:         api_key = config.get("api_key")
 30:         base_url = config.get("base_url", base_url)
 31:     if not api_key:
 32:         config_path = os.path.join(str(Path.home()), ".ai_config.json")
 33:         raise ValueError(
 34:             "No API key found. Please either:\n"
 35:             "1. Create a .env file in your repository with AI_API_KEY=your-api-key\n"
 36:             "2. Set AI_API_KEY environment variable, or\n"
 37:             f'3. Create {config_path} with content: {{"api_key": "your-api-key"}}'
 38:         )
 39:     return api_key, base_url
 40: def get_staged_diff():
 41:     """Get the diff of staged changes and list of changed files"""
 42:     try:
 43:         # Get list of staged files
 44:         files_output = subprocess.check_output(shlex.split("git diff --cached --name-only")).decode("utf-8")
 45:         staged_files = files_output.splitlines()
 46:         # Check if any staged files are lock files
 47:         lock_files = ['.lock', 'lock.json', 'package-lock.json', 'yarn.lock', 'pnpm-lock.yaml']
 48:         if any(any(file.endswith(lock) for lock in lock_files) for file in staged_files):
 49:             return None, True  # Indicate lock file presence
 50:         # Get the actual diff
 51:         diff = subprocess.check_output(shlex.split("git diff --cached")).decode("utf-8")
 52:         if not diff:
 53:             # If no staged changes, get diff of last commit
 54:             diff = subprocess.check_output(shlex.split("git diff HEAD~1")).decode("utf-8")
 55:             files_output = subprocess.check_output(shlex.split("git diff HEAD~1 --name-only")).decode("utf-8")
 56:             staged_files = files_output.splitlines()
 57:             lock_files = ['.lock', 'lock.json', 'package-lock.json', 'yarn.lock', 'pnpm-lock.yaml']
 58:             if any(any(file.endswith(lock) for lock in lock_files) for file in staged_files):
 59:                 return None, True
 60:         return diff, False  # No lock files found
 61:     except subprocess.CalledProcessError as e:
 62:         print(f"Error getting git diff: {e}")
 63:         return None, False
 64: def load_gitmojis():
 65:     """Load gitmojis from gitmojis.json"""
 66:     try:
 67:         with open("gitmojis.json", "r", encoding="utf-8") as f:
 68:             data = json.load(f)
 69:             return {gitmoji["name"]: gitmoji["emoji"] for gitmoji in data["gitmojis"]}
 70:     except Exception as e:
 71:         print(f"Error loading gitmojis: {e}")
 72:         return {}
 73: def get_emoji_for_type(commit_type, gitmojis):
 74:     """Map commit type to appropriate emoji"""
 75:     type_to_emoji = {
 76:         # Core conventional commit types
 77:         "feat": gitmojis.get("sparkles", "✨"),  # New feature
 78:         "fix": gitmojis.get("bug", "🐛"),  # Bug fix
 79:         "docs": gitmojis.get("memo", "📝"),  # Documentation
 80:         "style": gitmojis.get("art", "🎨"),  # Style/format
 81:         "refactor": gitmojis.get("recycle", "♻️"),  # Code refactoring
 82:         "perf": gitmojis.get("zap", "⚡️"),  # Performance
 83:         "test": gitmojis.get("white-check-mark", "✅"),  # Tests
 84:         "chore": gitmojis.get("wrench", "🔧"),  # Chores
 85:         "ci": gitmojis.get("construction-worker", "👷"),  # CI changes
 86:         # Additional commit types with specific emojis
 87:         "security": gitmojis.get("lock", "🔒"),  # Security fixes
 88:         "deps": gitmojis.get("package", "📦"),  # Dependencies
 89:         "breaking": gitmojis.get("boom", "💥"),  # Breaking changes
 90:         "ui": gitmojis.get("lipstick", "💄"),  # UI/style changes
 91:         "i18n": gitmojis.get("globe-with-meridians", "🌐"),  # Internationalization
 92:         "typo": gitmojis.get("pencil2", "✏️"),  # Fix typos
 93:         "init": gitmojis.get("tada", "🎉"),  # Initial commit
 94:         "license": gitmojis.get("page-facing-up", "📄"),  # License
 95:         "docker": gitmojis.get("whale", "🐳"),  # Docker
 96:         "config": gitmojis.get("wrench", "🔧"),  # Configuration changes
 97:         "access": gitmojis.get("wheelchair", "♿️"),  # Accessibility
 98:         "logs": gitmojis.get("loud-sound", "🔊"),  # Logging
 99:         "db": gitmojis.get("card-file-box", "🗃️"),  # Database
100:         "cleanup": gitmojis.get("fire", "🔥"),  # Remove code/files
101:         "wip": gitmojis.get("construction", "🚧"),  # Work in progress
102:         "move": gitmojis.get("truck", "🚚"),  # Move/rename files
103:         "revert": gitmojis.get("rewind", "⏪"),  # Revert changes
104:         "merge": gitmojis.get("twisted-rightwards-arrows", "🔀"),  # Merge branches
105:         "responsive": gitmojis.get("iphone", "📱"),  # Responsive design
106:         "hotfix": gitmojis.get("ambulance", "🚑"),  # Critical hotfix
107:     }
108:     return type_to_emoji.get(commit_type, "")
109: def generate_commit_message(diff):
110:     """Generate commit message using OpenAI API"""
111:     try:
112:         api_key, base_url = get_api_config()
113:         client_kwargs = {"api_key": api_key}
114:         if base_url:
115:             client_kwargs["base_url"] = base_url
116:         client = OpenAI(**client_kwargs)
117:         # Get model from environment variable or use default
118:         model = os.getenv("MODEL_NAME", "claude-3.5-sonnet@anthropic")
119:         # Load gitmojis
120:         # gitmojis = load_gitmojis()
121:         prompt = f"""You are a git commit message generator. Your task is to analyze the git diff and output ONLY the commit message itself - no explanations, no prefixes like "Based on the diff...", just the commit message exactly as it should appear in git.
122:         The commit message MUST follow this format:
123:         <emoji> <type>[optional scope]: <description>
124:         [required body] (minimum length of 50 characters and a maximum of around 80 characters)
125:         [optional footer(s)]
126:         Where:
127:         1. Type MUST be one of (with corresponding emoji):
128:            Core types:
129:            - ✨ feat: A new feature
130:            - 🐛 fix: A bug fix
131:            - 📝 docs: Documentation only changes
132:            - 🎨 style: Changes that don't affect the meaning of the code
133:            - ♻️ refactor: A code change that neither fixes a bug nor adds a feature
134:            - ⚡️ perf: A code change that improves performance
135:            - ✅ test: Adding missing tests or correcting existing tests
136:            - 🔧 chore: Changes to build process or auxiliary tools
137:            - 👷 ci: Changes to CI configuration files and scripts
138:            Additional specific types:
139:            - 🔒 security: Security fixes
140:            - 📦 deps: Dependencies
141:            - 💥 breaking: Breaking changes
142:            - 💄 ui: UI/style changes
143:            - 🌐 i18n: Internationalization
144:            - ✏️ typo: Fix typos
145:            - 🎉 init: Initial commit
146:            - 📄 license: License
147:            - 🐳 docker: Docker
148:            - ♿️ access: Accessibility
149:            - 🔊 logs: Logging
150:            - 🗃️ db: Database
151:            - 🔥 cleanup: Remove code/files
152:            - 🚧 wip: Work in progress
153:            - 🚚 move: Move/rename files
154:            - ⏪ revert: Revert changes
155:            - 🔀 merge: Merge branches
156:            - 📱 responsive: Responsive design
157:            - 🚑 hotfix: Critical hotfix
158:         2. Description MUST:
159:            - Be 50 characters or less
160:            - Start with lowercase
161:            - Use imperative mood ("add" not "adds/added")
162:            - No period at end
163:            - Be clear and descriptive
164:         3. Body (if included) MUST:
165:            - Be separated from title by blank line
166:            - Wrap at 72 characters
167:            - Explain what and why vs. how
168:            - Use proper punctuation
169:         Git diff to analyze:
170:         {diff}
171:         Output ONLY the commit message exactly as it should appear in git, with no additional text."""
172:         response = client.chat.completions.create(
173:             model=model,
174:             messages=[{"role": "user", "content": prompt}],
175:             stream=False,
176:         )
177:         # Get the message and clean any potential explanatory text
178:         message = response.choices[0].message.content.strip()
179:         if "Based on the diff" in message:
180:             message = message.split("\n")[-1].strip()
181:         return message
182:     except Exception as e:
183:         print(f"Error generating commit message: {e}")
184:         return None
185: def main():
186:     # Get the diff and check for lock files
187:     diff, has_lock_files = get_staged_diff()
188:     if has_lock_files:
189:         # Use hardcoded message for lock files
190:         commit_message = "📦 deps: update dependencies"
191:     elif not diff:
192:         print("No changes to analyze")
193:         sys.exit(1)
194:     else:
195:         # Generate commit message for non-lock files
196:         commit_message = generate_commit_message(diff)
197:     if not commit_message:
198:         print("Failed to generate commit message")
199:         sys.exit(1)
200:     # Print the commit message
201:     print("\nGenerated commit message:")
202:     print("------------------------")
203:     # Use sys.stdout.buffer.write for Unicode support in console
204:     sys.stdout.buffer.write(commit_message.encode("utf-8"))
205:     print("\n------------------------")
206:     # If running as a hook, save the message
207:     if len(sys.argv) > 1 and sys.argv[1] == "--hook":
208:         # Use UTF-8 encoding when writing the commit message
209:         with codecs.open(".git/COMMIT_EDITMSG", "w", encoding="utf-8") as f:
210:             f.write(commit_message)
211: if __name__ == "__main__":
212:     main()
```

## File: DOCS/EXPLANATION.md
```markdown
  1: # DFWeb v4 - Interview Discussion Guide
  2: 
  3: ## Project Overview
  4: 
  5: "DFWeb v4 is my portfolio website built with Next.js, React, and TypeScript. What makes it unique is its Matrix-inspired design with custom animations and strong focus on performance and accessibility."
  6: 
  7: ## Key Discussion Points
  8: 
  9: ## Technology Choices & Rationale
 10: 
 11: ### Next.js 15
 12: "I chose Next.js for several critical reasons:
 13: 1. Server Components significantly improve initial page load and SEO
 14: 2. Built-in image optimization crucial for a portfolio site with many visuals
 15: 3. App Router provides more intuitive and flexible routing
 16: 4. Excellent TypeScript integration out of the box
 17: 5. Built-in performance optimizations like automatic code splitting
 18: 6. Strong community support and extensive documentation
 19: 7. Easy deployment and scaling with Vercel
 20: 8. Great development experience with fast refresh"
 21: 
 22: ### React 19
 23: "React was chosen because:
 24: 1. Latest features like Server Components and Suspense
 25: 2. Excellent ecosystem of tools and libraries
 26: 3. Strong typing support with TypeScript
 27: 4. Great performance with concurrent rendering
 28: 5. Huge community for problem-solving
 29: 6. Stable and battle-tested in production
 30: 7. Regular updates and improvements
 31: 8. Industry standard, making code maintainable"
 32: 
 33: ### TypeScript
 34: "TypeScript was a crucial choice for several reasons:
 35: 1. Catches errors during development rather than runtime
 36: 2. Excellent IDE support with autocompletion
 37: 3. Makes refactoring much safer and easier
 38: 4. Self-documenting code through types
 39: 5. Better team collaboration through explicit contracts
 40: 6. Improved maintainability for larger codebases
 41: 7. Great integration with Next.js and React
 42: 8. Essential for complex features like the Matrix animations"
 43: 
 44: ### Sanity.io
 45: "I chose Sanity as the headless CMS because:
 46: 1. Type-safe content queries with GROQ
 47: 2. Real-time content updates
 48: 3. Excellent image transformation capabilities
 49: 4. Custom validation rules for content
 50: 5. Great developer experience with their Studio
 51: 6. Flexible content modeling
 52: 7. Good free tier for portfolios
 53: 8. Easy integration with Next.js"
 54: 
 55: ### Motion Library
 56: "Motion was selected for animations because:
 57: 1. Declarative API that's easy to understand
 58: 2. Performance optimized out of the box
 59: 3. Handles complex animation sequences well
 60: 4. Great TypeScript support
 61: 5. Small bundle size impact
 62: 6. Smooth animations with hardware acceleration
 63: 7. Handles gesture animations well
 64: 8. Good accessibility features"
 65: 
 66: ### Tailwind CSS
 67: "Tailwind CSS was chosen for styling because:
 68: 1. Highly maintainable utility-first approach
 69: 2. Excellent performance with minimal CSS output
 70: 3. Great developer experience with autocomplete
 71: 4. Built-in responsive design utilities
 72: 5. Easy dark mode implementation
 73: 6. Consistent design system
 74: 7. No need to maintain separate CSS files
 75: 8. Great documentation and community"
 76: 
 77: ### Testing Tools
 78: "The comprehensive testing stack was chosen for complete coverage:
 79: 1. Jest & React Testing Library
 80:    - Fast unit and integration tests
 81:    - Encourages testing user behavior over implementation
 82:    - Great async testing capabilities
 83:    - Snapshot testing for UI components
 84:    - 100% test coverage requirement enforced
 85: 
 86: 2. Cypress
 87:    - Reliable end-to-end testing
 88:    - Built-in accessibility testing with Cypress Axe
 89:    - Real browser testing environment
 90:    - Great debugging capabilities
 91:    - Visual testing capabilities
 92: 
 93: 3. Playwright
 94:    - Cross-browser testing coverage
 95:    - Mobile device emulation
 96:    - Network request handling
 97:    - Parallel test execution
 98:    - Visual comparison tools"
 99: 
100: ### Code Quality Tools
101: "Multiple code quality tools were chosen for comprehensive analysis:
102: 1. Codacy
103:    - Automated code reviews
104:    - Security vulnerability scanning
105:    - Code duplication detection
106:    - Style guide enforcement
107:    - Continuous code quality monitoring
108: 
109: 2. Sonarcloud
110:    - Deep code analysis
111:    - Security hotspot detection
112:    - Technical debt tracking
113:    - Code coverage visualization
114:    - Quality gate enforcement
115: 
116: 3. Codeclimate
117:    - Maintainability metrics
118:    - Complexity analysis
119:    - Duplication detection
120:    - Trend monitoring
121:    - Quality improvement suggestions"
122: 
123: ### CI/CD Infrastructure
124: "The CI/CD setup was carefully chosen:
125: 1. CircleCI
126:    - Fast build times
127:    - Parallel test execution
128:    - Custom workflow configuration
129:    - Efficient caching
130:    - Pre-deploy test validation
131: 
132: 2. GitHub Actions
133:    - Cypress workflow integration
134:    - Lighthouse CI testing
135:    - Automated accessibility checks
136:    - Performance monitoring
137:    - Cross-browser testing"
138: 
139: ### Form Handling
140: "React Hook Form with Zod was chosen for robust form management:
141: 1. Performance optimized with minimal re-renders
142: 2. Built-in validation with Zod for type safety
143: 3. Great TypeScript integration
144: 4. Easy form state management
145: 5. Excellent error handling
146: 6. Built-in accessibility
147: 7. Small bundle size
148: 8. Reusable form components"
149: 
150: ### Environment Variables
151: "Envalid was chosen for type-safe environment handling:
152: 1. Runtime validation of required variables
153: 2. TypeScript integration for type safety
154: 3. Clear error messages with examples
155: 4. Separate client/server variable handling
156: 5. Default value support
157: 6. Prevents missing variable issues
158: 7. Environment-specific validation
159: 8. Development experience improvements"
160: 
161: ### Development Tooling
162: "Carefully selected development tools for optimal DX:
163: 1. Turbopack
164:    - Significantly faster development builds
165:    - Incremental compilation
166:    - Better memory usage
167:    - Native TypeScript support
168:    - Integrated with Next.js
169: 
170: 2. Prettier & ESLint
171:    - Consistent code formatting
172:    - Custom ESLint plugins for:
173:      * Jest testing standards
174:      * React best practices
175:      * Accessibility rules
176:      * TypeScript-specific rules
177:    - Automated formatting on commit
178:    - Integration with VS Code
179: 
180: 3. Ladle
181:    - Component documentation
182:    - Interactive development
183:    - Visual testing
184:    - Accessibility checks
185:    - Isolated component testing"
186: 
187: ### Performance Monitoring
188: "Comprehensive performance tracking setup:
189: 1. Vercel Speed Insights
190:    - Real user monitoring
191:    - Performance metrics tracking
192:    - Core Web Vitals monitoring
193:    - User experience scoring
194:    - Performance regression detection
195: 
196: 2. Lighthouse CI
197:    - Automated performance testing
198:    - Custom performance budgets
199:    - Desktop and mobile testing
200:    - Performance regression prevention
201:    - Integration with GitHub Actions"
202: 
203: ### Utility Libraries
204: "Carefully chosen utility libraries:
205: 1. clsx
206:    - Type-safe className handling
207:    - Conditional class application
208:    - Better performance than alternatives
209:    - Small bundle size
210:    - Great TypeScript support
211: 
212: 2. react-use
213:    - Battle-tested React hooks
214:    - Performance optimized
215:    - Reduces boilerplate
216:    - TypeScript support
217:    - Active maintenance
218: 
219: 3. Portable Text
220:    - Rich text rendering
221:    - Custom components
222:    - Sanity.io integration
223:    - Type-safe content
224:    - SEO-friendly output
225: 
226: 4. react-error-boundary
227:    - Graceful error handling
228:    - Component-level isolation
229:    - Error recovery
230:    - Development tools
231:    - TypeScript support"
232: 
233: ### Accessibility Tools
234: "Comprehensive accessibility testing setup:
235: 1. Cypress Axe
236:    - Automated accessibility testing
237:    - WCAG compliance checking
238:    - Integration with CI/CD
239:    - Detailed violation reporting
240:    - Prevents accessibility regressions
241: 
242: 2. ESLint jsx-a11y
243:    - Static accessibility checks
244:    - Best practice enforcement
245:    - Early error detection
246:    - IDE integration
247:    - Custom rule configuration
248: 
249: 3. Additional Tools
250:    - ARIA validation
251:    - Color contrast checking
252:    - Keyboard navigation testing
253:    - Screen reader optimization
254:    - Reduced motion support"
255: 
256: ### 3. Unique Features
257: 
258: "The standout feature is the Matrix-inspired design:
259: - Custom animation system using Canvas
260: - Interactive elements that respond to user movement
261: - Smooth page transitions
262: - Responsive design that works across devices"
263: 
264: ### 4. Performance Focus
265: 
266: "Performance was a key priority throughout development, with several major improvements:
267: 
268: 1. Automated Performance Monitoring
269:    - Implemented Lighthouse CI for continuous monitoring (commit 4a79a89)
270:    - Added performance budgets and thresholds
271:    - Set up Vercel Speed Insights for real user monitoring
272:    - Integrated with GitHub Actions for automated checks
273:    - Achieved and maintained 100/100 Lighthouse scores
274: 
275: 2. Server-Side Optimization
276:    - Implemented Server Components for data-heavy pages (commit 4fa7629)
277:    - Added intelligent caching strategies
278:    - Optimized API response times
279:    - Improved GROQ query performance
280:    - Enhanced static generation with revalidation
281: 
282: 3. Frontend Optimization
283:    - Optimized Matrix animation rendering (commit bcc379b)
284:    - Implemented efficient code splitting
285:    - Added responsive image optimization
286:    - Reduced JavaScript bundle size
287:    - Optimized critical rendering path
288: 
289: 4. Mobile Performance
290:    - Added device-specific optimizations (commit 0812552)
291:    - Implemented responsive loading strategies
292:    - Optimized animations for mobile devices
293:    - Reduced battery impact
294:    - Enhanced touch response times
295: 
296: 5. Monitoring & Maintenance
297:    - Regular performance regression testing
298:    - Continuous Core Web Vitals monitoring
299:    - Automated performance budgets
300:    - Regular dependency updates
301:    - Performance-focused code reviews"
302: 
303: ### 5. Testing Strategy
304: 
305: "The testing strategy evolved throughout the project to ensure comprehensive coverage:
306: 
307: 1. Unit Testing Evolution
308:    - Implemented AAA pattern for all tests (commit c48c612)
309:    - Added comprehensive error boundary tests (commit 75bc7b7)
310:    - Created custom test utilities for Canvas (commit cc7c821)
311:    - Achieved 100% test coverage
312:    - Maintained strict testing standards
313: 
314: 2. End-to-End Testing
315:    - Implemented Cypress for critical flows
316:    - Added accessibility testing with Cypress Axe
317:    - Created comprehensive test suites
318:    - Added mobile device testing (commit 0812552)
319:    - Integrated with CI/CD pipeline
320: 
321: 3. Cross-Browser Testing
322:    - Added Playwright for browser coverage
323:    - Implemented parallel test execution
324:    - Added visual regression testing
325:    - Created device-specific tests
326:    - Automated cross-browser validation
327: 
328: 4. Performance Testing
329:    - Integrated Lighthouse CI (commit 4a79a89)
330:    - Added performance budgets
331:    - Implemented Core Web Vitals monitoring
332:    - Created performance regression tests
333:    - Set up automated benchmarking
334: 
335: 5. Accessibility Testing
336:    - Implemented WCAG compliance checks
337:    - Added keyboard navigation tests
338:    - Created screen reader validation
339:    - Added reduced motion testing
340:    - Automated accessibility monitoring"
341: 
342: ### 6. Challenges and Solutions
343: 
344: "Based on the project's evolution, we faced and solved several key challenges:
345: 
346: 1. Error Handling Architecture
347:    - Challenge: Complex error handling across different components
348:    - Solution: 
349:      * Extracted reusable error fallback components
350:      * Improved error boundary organization
351:      * Enhanced error handling typing
352:      * Added compact mode for different contexts
353:      * Better separation of error handling logic
354: 
355: 2. Component Organization
356:    - Challenge: Growing complexity in component structure
357:    - Solution:
358:      * Moved configuration to separate files
359:      * Improved component modularity
360:      * Better separation of concerns
361:      * Enhanced component reusability
362:      * Standardized component patterns
363: 
364: 3. Testing Infrastructure
365:    - Challenge: Maintaining comprehensive test coverage
366:    - Solution:
367:      * Enhanced test suite organization
368:      * Simplified testing tools
369:      * Improved test examples
370:      * Better test structure
371:      * More consistent testing patterns
372: 
373: 4. Matrix Animation System
374:    - Challenge: Complex cursor and animation management
375:    - Solution:
376:      * Refactored cursor implementation
377:      * Improved animation performance
378:      * Better state management
379:      * Enhanced mobile support
380:      * Optimized rendering logic
381: 
382: 5. Project Structure
383:    - Challenge: Maintaining clean architecture as project grew
384:    - Solution:
385:      * Standardized import paths
386:      * Improved GROQ query organization
387:      * Better feature organization
388:      * Enhanced type safety
389:      * More consistent file structure"
390: 
391: ### 7. Learning Outcomes
392: 
393: "This project taught me several valuable lessons:
394: - Importance of performance optimization
395: - Benefits of TypeScript in large projects
396: - Value of comprehensive testing
397: - Balance between aesthetics and functionality
398: - Importance of accessibility in modern web development"
399: 
400: ## Common Questions & Answers
401: 
402: ### "What's the most interesting technical challenge you faced?"
403: 
404: "The Matrix animation system was particularly challenging, as evidenced by multiple iterations and improvements throughout the project:
405: 
406: 1. Initial Implementation Challenges
407:    - Creating smooth canvas animations without impacting performance
408:    - Implementing efficient rendering techniques (commit bcc379b)
409:    - Managing memory usage for long-running animations
410:    - Ensuring consistent frame rates across devices
411: 
412: 2. Mobile Optimization
413:    - Adding device-specific optimizations (commit 0812552)
414:    - Implementing responsive canvas sizing
415:    - Optimizing for touch devices
416:    - Managing battery life impact
417: 
418: 3. Accessibility Considerations
419:    - Creating reduced motion alternatives
420:    - Ensuring keyboard navigation support
421:    - Providing screen reader descriptions
422:    - Implementing fallback content
423: 
424: 4. Performance Optimization
425:    - Refactoring for better modularity (commit ac87f0a)
426:    - Optimizing render cycles
427:    - Implementing efficient state management
428:    - Adding performance monitoring
429: 
430: 5. Testing Challenges
431:    - Creating reliable canvas tests (commit cc7c821)
432:    - Implementing visual regression testing
433:    - Testing across different devices
434:    - Validating accessibility features
435: 
436: This challenge taught me valuable lessons about balancing visual appeal with performance and accessibility, while maintaining clean, testable code."
437: 
438: ### "How did you approach performance optimization?"
439: 
440: "Performance was built into the development process:
441: - Server Components for data-heavy pages
442: - Image optimization for visual content
443: - Code splitting for faster initial loads
444: - Caching strategies for static content
445: - Regular performance monitoring"
446: 
447: ### "What would you do differently next time?"
448: 
449: "Based on the project's actual evolution, here are the key things I'd implement differently from the start:
450: 
451: 1. Testing Strategy
452:    - Implement AAA pattern testing from the beginning (added in commit c48c612)
453:    - Set up Lighthouse CI monitoring earlier (added in commit 4a79a89)
454:    - Add comprehensive error boundary testing sooner (added in commit 75bc7b7)
455:    - Include mobile device testing from start (added in commit 0812552)
456:    - Implement visual regression testing earlier
457: 
458: 2. Architecture & Organization
459:    - Start with modular Matrix component structure (refactored in commit bcc379b)
460:    - Use standardized import paths from beginning (added in commit 4ab1ee3)
461:    - Implement Server Components earlier (added in commit 4fa7629)
462:    - Better separation of animation logic (improved over multiple commits)
463:    - More consistent component organization
464: 
465: 3. Type Safety & Validation
466:    - Start with stricter TypeScript configuration (gradually improved)
467:    - Implement environment validation earlier (added in commit 91bfe1f)
468:    - Add Zod validation from beginning
469:    - Use type-safe GROQ queries from start
470:    - Better error boundary typing (improved in commit 3452cce)
471: 
472: 4. Performance & Monitoring
473:    - Set up Lighthouse CI at project start (added in commit 60ae483)
474:    - Implement performance budgets earlier
475:    - Add Vercel Speed Insights from beginning
476:    - Better initial code splitting strategy
477:    - Earlier Core Web Vitals monitoring
478: 
479: 5. Documentation & Development
480:    - Document technical decisions as they happen
481:    - Set up component stories earlier (added later in multiple commits)
482:    - Add JSDoc comments from start (added in commit db21a6a)
483:    - Better tracking of architectural changes
484:    - Earlier implementation of development tools"
485: 
486: ### "How do you handle state management?"
487: 
488: "I kept state management simple and effective:
489: - Server Components for most data fetching
490: - React hooks for local state
491: - Form state with React Hook Form
492: - No complex state management needed"
493: 
494: ### "How do you ensure code quality?"
495: 
496: "Quality is maintained through several practices:
497: - TypeScript for type safety
498: - ESLint and Prettier for code style
499: - Comprehensive testing strategy
500: - Code review process
501: - Regular performance monitoring"
502: 
503: ## Project Structure
504: 
505: "The project follows a clear organization:
506: - Components grouped by feature
507: - Shared utilities and hooks
508: - Type definitions
509: - Testing alongside components
510: - Configuration in dedicated files"
511: 
512: ## Development Process
513: 
514: "The development process focused on:
515: - Feature-based development
516: - Regular performance checks
517: - Comprehensive testing
518: - Accessibility considerations
519: - Continuous deployment"
520: 
521: ## Future Plans
522: 
523: "I have several improvements planned:
524: - Enhanced caching strategies
525: - More interactive features
526: - Improved mobile experience
527: - Additional animation effects
528: - Better documentation"
529: 
530: ## Key Takeaways
531: 
532: "The main lessons from this project:
533: 1. Performance is crucial for user experience
534: 2. TypeScript improves code reliability
535: 3. Testing saves time in the long run
536: 4. Accessibility should be built-in
537: 5. Good documentation is essential"
538: 
539: This project demonstrates:
540: - Modern web development practices
541: - Focus on performance and user experience
542: - Strong technical decision-making
543: - Attention to code quality
544: - Continuous learning and improvement
```

## File: DOCS/README.md
```markdown
  1: # DFWeb v4 - Technical Documentation
  2: 
  3: ## Project Overview
  4: 
  5: DFWeb v4 is a modern portfolio website that demonstrates advanced web development practices and architectural patterns. Built with Next.js 15, React 19, TypeScript, and Sanity.io, it showcases several key technical achievements:
  6: 
  7: ### Technical Highlights
  8: 
  9: 1. **Advanced React Patterns**
 10:    - Server Components for optimal performance and SEO
 11:    - Custom hooks for shared logic (e.g., useMobile, useNavigation)
 12:    - Error Boundaries with fallback UI strategies
 13:    - Polymorphic components for flexible implementations
 14: 
 15: 2. **Performance Optimizations**
 16:    - 100/100 Lighthouse scores across all metrics
 17:    - Efficient code splitting and lazy loading
 18:    - Image optimization with next/image
 19:    - Strategic use of static and dynamic rendering
 20: 
 21: 3. **Type Safety**
 22:    - Comprehensive TypeScript implementation
 23:    - Custom type utilities and guards
 24:    - Zod schema validation for runtime safety
 25:    - Type-safe API integrations
 26: 
 27: 4. **Testing Excellence**
 28:    - 100% test coverage with Jest and RTL
 29:    - E2E testing with Cypress and Playwright
 30:    - Custom ESLint rules enforcing AAA pattern
 31:    - Automated accessibility testing
 32: 
 33: 5. **Modern UI/UX**
 34:    - Matrix-inspired design with custom animations
 35:    - Responsive layouts with Tailwind CSS
 36:    - Custom cursor effects with trail animations
 37:    - Smooth page transitions and scroll effects
 38: 
 39: ## Core Technologies
 40: 
 41: ### Technical Stack Deep Dive
 42: 
 43: #### Frontend Core
 44: - **Next.js 15**
 45:   - App Router for enhanced routing control
 46:   - Server Components for improved performance
 47:   - Streaming and Suspense for progressive loading
 48:   - Middleware for request/response manipulation
 49: 
 50: - **React 19**
 51:   - Server Components integration
 52:   - Use of latest hooks (useFormStatus, useOptimistic)
 53:   - Custom hooks for business logic
 54:   - Error Boundary implementation
 55: 
 56: - **TypeScript**
 57:   - Strict type checking enabled
 58:   - Custom type utilities and guards
 59:   - Generic components implementation
 60:   - Type-safe API integrations
 61: 
 62: - **Motion**
 63:   - Custom animation hooks
 64:   - Performance-optimized animations
 65:   - Gesture handling
 66:   - Scroll-based animations
 67: 
 68: - **Tailwind CSS**
 69:   - Custom configuration and theming
 70:   - Responsive design implementation
 71:   - Dark mode support
 72:   - Performance optimization
 73: 
 74: - **Sanity.io**
 75:   - Custom schema definitions
 76:   - Type-safe GROQ queries
 77:   - Real-time content updates
 78:   - Image optimization pipeline
 79: 
 80: #### Development & Testing Infrastructure
 81: - **Jest & React Testing Library**
 82:   - Custom test utilities and helpers
 83:   - Mock implementations for external services
 84:   - Snapshot testing strategies
 85:   - Integration with TypeScript
 86: 
 87: - **Cypress**
 88:   - Custom commands for common operations
 89:   - Accessibility testing integration
 90:   - Visual regression testing
 91:   - Network request stubbing
 92: 
 93: - **Playwright**
 94:   - Cross-browser testing setup
 95:   - Mobile device emulation
 96:   - Performance testing
 97:   - Screenshot and video capture
 98: 
 99: - **ESLint & Prettier**
100:   - Custom rule configurations
101:   - Git hooks integration
102:   - TypeScript-aware linting
103:   - Automated code formatting
104: 
105: - **Ladle**
106:   - Interactive component documentation
107:   - Visual regression testing
108:   - Accessibility testing
109:   - Performance profiling
110: 
111: ## Project Architecture
112: 
113: ### Directory Structure
114: ```
115: src/
116: ├── app/                 # Next.js App Router pages
117: ├── components/          # React components
118: │   ├── Animations/     # Animation components
119: │   ├── CV/            # CV-related components
120: │   ├── ErrorBoundary/ # Error handling
121: │   ├── Index/         # Homepage components
122: │   ├── Kontakt/       # Contact form
123: │   ├── Layout/        # Layout components
124: │   ├── Prosjekter/    # Projects section
125: │   └── UI/            # Reusable UI components
126: ├── config/             # Configuration files
127: ├── e2e/               # End-to-end tests
128: ├── hooks/             # Custom React hooks
129: ├── lib/               # Core libraries
130: ├── stories/           # Component documentation
131: ├── types/             # TypeScript definitions
132: └── utils/             # Utility functions
133: ```
134: 
135: ### Key Features
136: 
137: #### 1. Server Components & Data Fetching
138: - Server-side rendering for optimal performance
139: - Streaming with Suspense boundaries
140: - Automatic static optimization with revalidation
141: - Type-safe environment variables using envalid
142: 
143: #### 2. Animation System
144: - Matrix-inspired animations and effects
145: - Custom cursor with matrix trail effect
146: - Page transitions and scroll animations
147: - Motion library integration
148: 
149: #### 3. Form Handling
150: - React Hook Form with TypeScript
151: - Zod schema validation
152: - Reusable GenericForm component
153: - Email.js integration for contact form
154: 
155: #### 4. Testing Infrastructure
156: - Jest and React Testing Library for unit tests
157: - Cypress for E2E testing with accessibility checks
158: - Playwright for cross-browser testing
159: - Custom ESLint rules enforcing AAA pattern
160: 
161: #### 5. Error Handling
162: - Custom ErrorBoundary components
163: - Fallback UI for different error scenarios
164: - Development mode error triggers
165: - Comprehensive error logging
166: 
167: ## Development Practices
168: 
169: ### Testing Standards
170: All tests must follow the AAA (Arrange-Act-Assert) pattern:
171: ```typescript
172: describe('Component', () => {
173:   it('should do something', () => {
174:     // Arrange - Set up test data and conditions
175:     const props = {...}
176: 
177:     // Act - Perform the action being tested
178:     render(<Component {...props} />)
179: 
180:     // Assert - Verify the results
181:     expect(...).toBe(...)
182:   })
183: })
184: ```
185: 
186: ### Code Quality
187: - ESLint configuration with strict rules
188: - Custom ESLint plugin for test patterns
189: - Prettier for consistent formatting
190: - TypeScript strict mode enabled
191: 
192: ### Accessibility
193: - WCAG compliance testing
194: - Cypress Axe integration
195: - Skip links and ARIA labels
196: - Keyboard navigation support
197: 
198: ### Performance Monitoring
199: - Lighthouse CI integration
200: - Performance budgets
201: - Automated performance testing
202: - Bundle size monitoring
203: 
204: ## Content Management
205: 
206: ### Sanity.io Integration
207: - Headless CMS for content
208: - Type-safe queries using GROQ
209: - Image optimization
210: - Real-time content updates
211: 
212: ### Schema Types
213: - Projects
214: - Categories
215: - Pages
216: - Navigation
217: - CV content
218: 
219: ## Deployment & CI/CD
220: 
221: ### GitHub Actions Workflows
222: - Cypress tests
223: - Lighthouse CI
224: - CodeQL analysis
225: - Cross-browser testing
226: 
227: ### Environment Variables
228: Required variables:
229: ```env
230: # Email Configuration (client-side)
231: NEXT_PUBLIC_EMAIL_API_KEY=user_xxx
232: NEXT_PUBLIC_EMAIL_TEMPLATE_KEY=template_xxx
233: NEXT_PUBLIC_EMAIL_SERVICE_KEY=service_xxx
234: 
235: # AI Configuration (server-side)
236: AI_API_KEY=xxx
237: AI_BASE_URL=xxx
238: MODEL_NAME=claude-3.5-sonnet@anthropic
239: ```
240: 
241: ## Getting Started
242: 
243: ### Prerequisites
244: - Node.js >= 20.16.0
245: - pnpm (recommended package manager)
246: 
247: ### Development Commands
248: ```bash
249: # Install dependencies
250: pnpm install
251: 
252: # Development server
253: pnpm dev
254: 
255: # Build
256: pnpm build
257: 
258: # Testing
259: pnpm test              # Run unit tests
260: pnpm cypress:open      # Open Cypress
261: pnpm e2e              # Run E2E tests
262: pnpm test:watch       # Watch mode
263: 
264: # Code Quality
265: pnpm lint             # Run ESLint
266: pnpm format           # Format code
267: 
268: # Performance Testing
269: pnpm lhci             # Run Lighthouse CI
270: pnpm lhci:perf        # Performance testing
271: pnpm lhci:desktop     # Desktop testing
272: 
273: # Component Documentation
274: pnpm ladle            # Start Ladle server
275: ```
276: 
277: ## Best Practices
278: 
279: ### Component Development
280: 1. Use TypeScript for all new components
281: 2. Include comprehensive tests
282: 3. Document with Ladle stories
283: 4. Ensure accessibility compliance
284: 5. Optimize for performance
285: 
286: ### State Management
287: 1. Use React hooks for local state
288: 2. Implement context where needed
289: 3. Keep state close to where it's used
290: 4. Avoid prop drilling
291: 
292: ### Error Handling
293: 1. Use ErrorBoundary components
294: 2. Provide meaningful error messages
295: 3. Include fallback UI
296: 4. Log errors appropriately
297: 
298: ### Performance
299: 1. Use server components where possible
300: 2. Implement proper caching strategies
301: 3. Optimize images and assets
302: 4. Monitor bundle sizes
303: 
304: ## Future Improvements
305: 
306: See TODO.md for detailed plans including:
307: 1. Project structure reorganization
308: 2. Enhanced caching strategy
309: 3. Feature-based organization
310: 4. Turbopack integration
311: 5. Additional performance optimizations
312: 
313: ## Contributing
314: 
315: 1. Follow the AAA pattern for tests
316: 2. Ensure accessibility compliance
317: 3. Maintain type safety
318: 4. Update documentation
319: 5. Follow commit message conventions
320: 
321: ## Additional Resources
322: 
323: - [Next.js Documentation](https://nextjs.org/docs)
324: - [Sanity.io Documentation](https://www.sanity.io/docs)
325: - [Motion Documentation](https://motion.dev/docs)
326: - [Testing Library Documentation](https://testing-library.com/docs/)
```

## File: public/favicon.svg
```
1: <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" version="1.1" viewBox="0 0 160 145" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421"><path d="M11.142,45.302l45.301,-45.302c14.82,14.819 14.82,38.846 0,53.665l-45.301,45.303c-14.82,-14.82 -14.82,-38.847 0,-53.666l0,0Z" style="fill:#095684;fill-rule:nonzero"/><path d="M56.411,90.635l-14.562,-14.562l-30.74,-30.739c-10.09,10.091 -13.303,24.446 -9.654,37.261c1.712,6.006 4.923,11.676 9.654,16.405l45.302,45.301c14.819,-14.818 14.819,-38.846 0,-53.666l0,0Z" style="fill:#23b99a;fill-rule:nonzero"/><path d="M147.903,45.302l-45.301,-45.302c-14.819,14.819 -14.819,38.846 0,53.665l45.301,45.303c14.82,-14.82 14.82,-38.847 0,-53.666l0,0Z" style="fill:#23b99a;fill-rule:nonzero"/><path d="M102.635,90.635l14.562,-14.562l30.74,-30.739c10.089,10.091 13.302,24.446 9.653,37.261c-1.711,6.006 -4.924,11.676 -9.653,16.405l-45.302,45.301c-14.82,-14.818 -14.82,-38.846 0,-53.666l0,0Z" style="fill:#095684;fill-rule:nonzero"/><path d="M11.141,45.302l45.302,-45.302c14.82,14.819 14.82,38.846 0,53.665l-45.302,45.303c-14.819,-14.82 -14.819,-38.847 0,-53.666l0,0Z" style="fill:#095684;fill-rule:nonzero"/><path d="M56.411,90.635l-14.563,-14.562l-30.739,-30.739c-10.09,10.091 -13.303,24.446 -9.654,37.261c1.712,6.006 4.923,11.676 9.654,16.405l45.302,45.301c14.819,-14.818 14.819,-38.846 -0.001,-53.666l0,0Z" style="fill:#23b99a;fill-rule:nonzero"/><path d="M147.903,45.302l-45.301,-45.302c-14.82,14.819 -14.82,38.846 0,53.665l45.301,45.303c14.82,-14.82 14.82,-38.847 0,-53.666l0,0Z" style="fill:#23b99a;fill-rule:nonzero"/><path d="M102.635,90.635l14.561,-14.562l30.741,-30.739c10.089,10.091 13.302,24.446 9.652,37.261c-1.71,6.006 -4.923,11.676 -9.652,16.405l-45.303,45.301c-14.82,-14.818 -14.82,-38.846 0,-53.666l0,0Z" style="fill:#095684;fill-rule:nonzero"/></svg>
```

## File: public/logo.svg
```
1: <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" aria-label="DFweb logo" data-name="Layer 1" viewBox="0 0 238.48 83.86"><title>Dfweb Logo</title><g id="Layer_1-2" data-name="Layer 1-2"><path fill="#145684" d="M20.5,29.31,46.82,3a22.05,22.05,0,0,1,0,31.19h0L20.5,60.5a22.06,22.06,0,0,1,0-31.19Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/><path fill="#2fb99a" d="M46.81,55.63l-8.49-8.44L20.48,29.33a22,22,0,0,0,0,31.18h0L46.81,86.84a22,22,0,0,0,0-31.18h0Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/><path fill="#2fb99a" d="M100,29.31,73.65,3a22.06,22.06,0,0,0,0,31.19h0L100,60.5a22.05,22.05,0,0,0,0-31.19Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/><path fill="#145684" d="M73.67,55.63l8.46-8.46L100,29.33a22,22,0,0,1,0,31.18h0L73.65,86.84a22,22,0,0,1,0-31.18h0Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/><path fill="#fff" d="M171.11,41.56a10.62,10.62,0,0,1-7,9.85,10.26,10.26,0,0,1-3.3.57h-8V31.16h8a9.78,9.78,0,0,1,5.43,1.63A10.5,10.5,0,0,1,170.05,37,10.18,10.18,0,0,1,171.11,41.56Zm-5.61,0a6.07,6.07,0,0,0-1.2-3.76,5.59,5.59,0,0,0-4.79-2.12h-1.23V47.46h1.23a5.62,5.62,0,0,0,4.79-2.12A6.11,6.11,0,0,0,165.5,41.56Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/><path fill="#fff" d="M186.49,35.68H180v3.55h5.94v4.5H180V52h-5.4V31.16H186.5Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/><path fill="#fff" d="M219.19,31.16,212.55,52H207l-3.79-12.06-4,12.06h-5.5l-6.21-20.82h5.66l3.6,13.45,4.42-13.45h4.31l4.1,13.45,3.93-13.45Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/><path fill="#fff" d="M233.22,52H221.38V31.16h11.84v4.5h-6.43v3.55h6.08v4.5h-6.08v3.72h6.43Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/><path fill="#fff" d="M252.5,46.06a5.47,5.47,0,0,1-1.35,3.8Q249.22,52,245.3,52h-8.65V31.16h8q5.85,0,5.85,5.43a5.22,5.22,0,0,1-.64,2.73,4.39,4.39,0,0,1-1.64,1.59,4.93,4.93,0,0,1,3.4,2A6.05,6.05,0,0,1,252.5,46.06Zm-7-8.75a1.81,1.81,0,0,0-1.27-1.88,4.21,4.21,0,0,0-1.22-.15h-1v4h1a2.54,2.54,0,0,0,2-.69A1.91,1.91,0,0,0,245.54,37.31Zm1.54,8.38a2,2,0,0,0-1.87-2.13,13.73,13.73,0,0,0-2-.09h-1.11v4.39h1.2a6.06,6.06,0,0,0,2.89-.49A1.8,1.8,0,0,0,247.08,45.69Z" aria-label="Logo for DFweb" transform="translate(-14.02 -2.98)"/></g></svg>
```

## File: public/next.svg
```
1: <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
```

## File: public/notfound.svg
```
1: <svg data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="860.13137" height="571.14799" viewBox="0 0 860.13137 571.14799" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M605.66974,324.95306c-7.66934-12.68446-16.7572-26.22768-30.98954-30.36953-16.482-4.7965-33.4132,4.73193-47.77473,14.13453a1392.15692,1392.15692,0,0,0-123.89338,91.28311l.04331.49238q46.22556-3.1878,92.451-6.37554c22.26532-1.53546,45.29557-3.2827,64.97195-13.8156,7.46652-3.99683,14.74475-9.33579,23.20555-9.70782,10.51175-.46217,19.67733,6.87923,26.8802,14.54931,42.60731,45.371,54.937,114.75409,102.73817,154.61591A1516.99453,1516.99453,0,0,0,605.66974,324.95306Z" transform="translate(-169.93432 -164.42601)" fill="#f2f2f2"/><path d="M867.57068,709.78146c-4.71167-5.94958-6.6369-7.343-11.28457-13.34761q-56.7644-73.41638-106.70791-151.79237-33.92354-53.23-64.48275-108.50439-14.54864-26.2781-28.29961-52.96872-10.67044-20.6952-20.8646-41.63793c-1.94358-3.98782-3.8321-7.99393-5.71122-12.00922-4.42788-9.44232-8.77341-18.93047-13.43943-28.24449-5.31686-10.61572-11.789-21.74485-21.55259-28.877a29.40493,29.40493,0,0,0-15.31855-5.89458c-7.948-.51336-15.28184,2.76855-22.17568,6.35295-50.43859,26.301-97.65922,59.27589-140.3696,96.79771A730.77816,730.77816,0,0,0,303.32241,496.24719c-1.008,1.43927-3.39164.06417-2.37419-1.38422q6.00933-8.49818,12.25681-16.81288A734.817,734.817,0,0,1,500.80465,303.06436q18.24824-11.82581,37.18269-22.54245c6.36206-3.60275,12.75188-7.15967,19.25136-10.49653,6.37146-3.27274,13.13683-6.21547,20.41563-6.32547,24.7701-.385,37.59539,27.66695,46.40506,46.54248q4.15283,8.9106,8.40636,17.76626,16.0748,33.62106,33.38729,66.628,10.68453,20.379,21.83683,40.51955,34.7071,62.71816,73.77854,122.897c34.5059,53.1429,68.73651,100.08874,108.04585,149.78472C870.59617,709.21309,868.662,711.17491,867.57068,709.78146Z" transform="translate(-169.93432 -164.42601)" fill="#e4e4e4"/><path d="M414.91613,355.804c-1.43911-1.60428-2.86927-3.20856-4.31777-4.81284-11.42244-12.63259-23.6788-25.11847-39.3644-32.36067a57.11025,57.11025,0,0,0-23.92679-5.54622c-8.56213.02753-16.93178,2.27348-24.84306,5.41792-3.74034,1.49427-7.39831,3.1902-11.00078,4.99614-4.11634,2.07182-8.15927,4.28118-12.1834,6.50883q-11.33112,6.27044-22.36816,13.09089-21.9606,13.57221-42.54566,29.21623-10.67111,8.11311-20.90174,16.75788-9.51557,8.03054-18.64618,16.492c-1.30169,1.20091-3.24527-.74255-1.94358-1.94347,1.60428-1.49428,3.22691-2.97938,4.84955-4.44613q6.87547-6.21546,13.9712-12.19257,12.93921-10.91827,26.54851-20.99312,21.16293-15.67614,43.78288-29.22541,11.30361-6.76545,22.91829-12.96259c2.33794-1.24675,4.70318-2.466,7.09572-3.6211a113.11578,113.11578,0,0,1,16.86777-6.86632,60.0063,60.0063,0,0,1,25.476-2.50265,66.32706,66.32706,0,0,1,23.50512,8.1314c15.40091,8.60812,27.34573,21.919,38.97,34.90915C418.03337,355.17141,416.09875,357.12405,414.91613,355.804Z" transform="translate(-169.93432 -164.42601)" fill="#e4e4e4"/><path d="M730.47659,486.71092l36.90462-13.498,18.32327-6.70183c5.96758-2.18267,11.92082-4.66747,18.08988-6.23036a28.53871,28.53871,0,0,1,16.37356.20862,37.73753,37.73753,0,0,1,12.771,7.91666,103.63965,103.63965,0,0,1,10.47487,11.18643c3.98932,4.79426,7.91971,9.63877,11.86772,14.46706q24.44136,29.89094,48.56307,60.04134,24.12117,30.14991,47.91981,60.556,23.85681,30.48041,47.38548,61.21573,2.88229,3.76518,5.75966,7.53415c1.0598,1.38809,3.44949.01962,2.37472-1.38808Q983.582,650.9742,959.54931,620.184q-24.09177-30.86383-48.51647-61.46586-24.42421-30.60141-49.17853-60.93743-6.16706-7.55761-12.35445-15.09858c-3.47953-4.24073-6.91983-8.52718-10.73628-12.47427-7.00539-7.24516-15.75772-13.64794-26.23437-13.82166-6.15972-.10214-12.121,1.85248-17.844,3.92287-6.16968,2.232-12.32455,4.50571-18.48633,6.75941l-37.16269,13.59243-9.29067,3.3981c-1.64875.603-.93651,3.2619.73111,2.652Z" transform="translate(-169.93432 -164.42601)" fill="#e4e4e4"/><path d="M366.37741,334.52609c-18.75411-9.63866-42.77137-7.75087-60.00508,4.29119a855.84708,855.84708,0,0,1,97.37056,22.72581C390.4603,353.75916,380.07013,341.5635,366.37741,334.52609Z" transform="translate(-169.93432 -164.42601)" fill="#f2f2f2"/><path d="M306.18775,338.7841l-3.61042,2.93462c1.22123-1.02713,2.4908-1.99013,3.795-2.90144C306.31073,338.80665,306.24935,338.79473,306.18775,338.7841Z" transform="translate(-169.93432 -164.42601)" fill="#f2f2f2"/><path d="M831.54929,486.84576c-3.6328-4.42207-7.56046-9.05222-12.99421-10.84836l-5.07308.20008A575.436,575.436,0,0,0,966.74929,651.418Q899.14929,569.13192,831.54929,486.84576Z" transform="translate(-169.93432 -164.42601)" fill="#f2f2f2"/><path d="M516.08388,450.36652A37.4811,37.4811,0,0,0,531.015,471.32518c2.82017,1.92011,6.15681,3.76209,7.12158,7.03463a8.37858,8.37858,0,0,1-.87362,6.1499,24.88351,24.88351,0,0,1-3.86126,5.04137l-.13667.512c-6.99843-4.14731-13.65641-9.3934-17.52227-16.55115s-4.40553-16.53895.34116-23.14544" transform="translate(-169.93432 -164.42601)" fill="#f2f2f2"/><path d="M749.08388,653.36652A37.4811,37.4811,0,0,0,764.015,674.32518c2.82017,1.92011,6.15681,3.76209,7.12158,7.03463a8.37858,8.37858,0,0,1-.87362,6.1499,24.88351,24.88351,0,0,1-3.86126,5.04137l-.13667.512c-6.99843-4.14731-13.65641-9.3934-17.52227-16.55115s-4.40553-16.53895.34116-23.14544" transform="translate(-169.93432 -164.42601)" fill="#f2f2f2"/><path d="M284.08388,639.36652A37.4811,37.4811,0,0,0,299.015,660.32518c2.82017,1.92011,6.15681,3.76209,7.12158,7.03463a8.37858,8.37858,0,0,1-.87362,6.1499,24.88351,24.88351,0,0,1-3.86126,5.04137l-.13667.512c-6.99843-4.14731-13.65641-9.3934-17.52227-16.55115s-4.40553-16.53895.34116-23.14544" transform="translate(-169.93432 -164.42601)" fill="#f2f2f2"/><circle cx="649.24878" cy="51" r="51" fill="#1f2937"/><path d="M911.21851,176.29639c-24.7168-3.34094-52.93512,10.01868-59.34131,34.12353a21.59653,21.59653,0,0,0-41.09351,2.10871l2.82972,2.02667a372.27461,372.27461,0,0,0,160.65881-.72638C957.07935,195.76,935.93537,179.63727,911.21851,176.29639Z" transform="translate(-169.93432 -164.42601)" fill="#f0f0f0"/><path d="M805.21851,244.29639c-24.7168-3.34094-52.93512,10.01868-59.34131,34.12353a21.59653,21.59653,0,0,0-41.09351,2.10871l2.82972,2.02667a372.27461,372.27461,0,0,0,160.65881-.72638C851.07935,263.76,829.93537,247.63727,805.21851,244.29639Z" transform="translate(-169.93432 -164.42601)" fill="#f0f0f0"/><path d="M1020.94552,257.15423a.98189.98189,0,0,1-.30176-.04688C756.237,173.48919,523.19942,184.42376,374.26388,208.32122c-20.26856,3.251-40.59131,7.00586-60.40381,11.16113-5.05811,1.05957-10.30567,2.19532-15.59668,3.37793-6.31885,1.40723-12.55371,2.85645-18.53223,4.30567q-3.873.917-7.59472,1.84863c-3.75831.92773-7.57178,1.89453-11.65967,2.957-4.56787,1.17774-9.209,2.41309-13.79737,3.67188a.44239.44239,0,0,1-.05127.01465l.00049.001c-5.18261,1.415-10.33789,2.8711-15.32324,4.3252-2.69824.77929-5.30371,1.54785-7.79932,2.30664-.2788.07715-.52587.15136-.77636.22754l-.53614.16308c-.31054.09473-.61718.1875-.92382.27539l-.01953.00586.00048.001-.81152.252c-.96777.293-1.91211.5791-2.84082.86426-24.54492,7.56641-38.03809,12.94922-38.17139,13.00195a1,1,0,1,1-.74414-1.85644c.13428-.05274,13.69336-5.46289,38.32764-13.05762.93213-.28613,1.87891-.57226,2.84961-.86621l.7539-.23438c.02588-.00976.05176-.01757.07813-.02539.30518-.08691.60986-.17968.91943-.27343l.53711-.16309c.26758-.08105.53125-.16113.80127-.23535,2.47852-.75391,5.09278-1.52441,7.79785-2.30664,4.98731-1.45508,10.14746-2.91113,15.334-4.32813.01611-.00586.03271-.00976.04883-.01464v-.001c4.60449-1.2627,9.26269-2.50293,13.84521-3.68457,4.09424-1.06348,7.915-2.03223,11.67969-2.96192q3.73755-.93017,7.60937-1.85253c5.98536-1.45118,12.23291-2.90235,18.563-4.3125,5.29932-1.1836,10.55567-2.32227,15.62207-3.38282,19.84326-4.16211,40.19776-7.92285,60.49707-11.17871C523.09591,182.415,756.46749,171.46282,1021.2463,255.2011a.99974.99974,0,0,1-.30078,1.95313Z" transform="translate(-169.93432 -164.42601)" fill="#ccc"/><path d="M432.92309,584.266a6.72948,6.72948,0,0,0-1.7-2.67,6.42983,6.42983,0,0,0-.92-.71c-2.61-1.74-6.51-2.13-8.99,0a5.81012,5.81012,0,0,0-.69.71q-1.11,1.365-2.28,2.67c-1.28,1.46-2.59,2.87-3.96,4.24-.39.38-.78.77-1.18,1.15-.23.23-.46.45-.69.67-.88.84-1.78,1.65-2.69,2.45-.48.43-.96.85-1.45,1.26-.73.61-1.46,1.22-2.2,1.81-.07.05-.14.1-.21.16-.02.01-.03.03-.05.04-.01,0-.02,0-.03.02a.17861.17861,0,0,0-.07.05c-.22.15-.37.25-.48.34.04-.01995.08-.05.12-.07-.18.14-.37.28-.55.42-1.75,1.29-3.54,2.53-5.37,3.69a99.21022,99.21022,0,0,1-14.22,7.55c-.33.13-.67.27-1.01.4a85.96993,85.96993,0,0,1-40.85,6.02q-2.13008-.165-4.26-.45c-1.64-.24-3.27-.53-4.89-.86a97.93186,97.93186,0,0,1-18.02-5.44,118.65185,118.65185,0,0,1-20.66-12.12c-1-.71-2.01-1.42-3.02-2.11,1.15-2.82,2.28-5.64,3.38-8.48.55-1.37,1.08-2.74,1.6-4.12,4.09-10.63,7.93-21.36,11.61-32.13q5.58-16.365,10.53-32.92.51-1.68.99-3.36,2.595-8.745,4.98-17.53c.15-.56994.31-1.12994.45-1.7q.68994-2.52,1.35-5.04c1-3.79-1.26-8.32-5.24-9.23a7.63441,7.63441,0,0,0-9.22,5.24c-.43,1.62-.86,3.23-1.3,4.85q-3.165,11.74494-6.66,23.41-.51,1.68-1.02,3.36-7.71,25.41-16.93,50.31-1.11,3.015-2.25,6.01c-.37.98-.74,1.96-1.12,2.94-.73,1.93-1.48,3.86-2.23,5.79-.43006,1.13-.87006,2.26-1.31,3.38-.29.71-.57,1.42-.85,2.12a41.80941,41.80941,0,0,0-8.81-2.12l-.48-.06a27.397,27.397,0,0,0-7.01.06,23.91419,23.91419,0,0,0-17.24,10.66c-4.77,7.51-4.71,18.25,1.98,24.63,6.89,6.57,17.32,6.52,25.43,2.41a28.35124,28.35124,0,0,0,10.52-9.86,50.56939,50.56939,0,0,0,2.74-4.65c.21.14.42.28.63.43.8.56,1.6,1.13,2.39,1.69a111.73777,111.73777,0,0,0,14.51,8.91,108.35887,108.35887,0,0,0,34.62,10.47c.27.03.53.07.8.1,1.33.17,2.67.3,4.01.41a103.78229,103.78229,0,0,0,55.58-11.36q2.175-1.125,4.31-2.36,3.315-1.92,6.48-4.08c1.15-.78,2.27-1.57,3.38-2.4a101.04244,101.04244,0,0,0,13.51-11.95q2.35491-2.475,4.51-5.11005a8.0612,8.0612,0,0,0,2.2-5.3A7.5644,7.5644,0,0,0,432.92309,584.266Zm-165.59,23.82c.21-.15.42-.31.62-.47C267.89312,607.766,267.60308,607.936,267.33312,608.086Zm3.21-3.23c-.23.26-.44.52-.67.78a23.36609,23.36609,0,0,1-2.25,2.2c-.11.1-.23.2-.35.29a.00976.00976,0,0,0-.01.01,3.80417,3.80417,0,0,0-.42005.22q-.645.39-1.31994.72a17.00459,17.00459,0,0,1-2.71.75,16.79925,16.79925,0,0,1-2.13.02h-.02a14.82252,14.82252,0,0,1-1.45-.4c-.24-.12-.47-.25994-.7-.4-.09-.08-.17005-.16-.22-.21a2.44015,2.44015,0,0,1-.26995-.29.0098.0098,0,0,0-.01-.01c-.11005-.2-.23005-.4-.34-.6a.031.031,0,0,1-.01-.02c-.08-.25-.15-.51-.21-.77a12.51066,12.51066,0,0,1,.01-1.37,13.4675,13.4675,0,0,1,.54-1.88,11.06776,11.06776,0,0,1,.69-1.26c.02-.04.12-.2.23-.38.01-.01.01-.01.01-.02.15-.17.3-.35.46-.51.27-.3.56-.56.85-.83a18.02212,18.02212,0,0,1,1.75-1.01,19.48061,19.48061,0,0,1,2.93-.79,24.98945,24.98945,0,0,1,4.41.04,30.30134,30.30134,0,0,1,4.1,1.01,36.94452,36.94452,0,0,1-2.77,4.54C270.6231,604.746,270.58312,604.806,270.54308,604.856Zm-11.12-3.29a2.18029,2.18029,0,0,1-.31.38995A1.40868,1.40868,0,0,1,259.42309,601.566Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><path d="M402.86309,482.136q-.13494,4.71-.27,9.42-.285,10.455-.59,20.92-.315,11.775-.66,23.54-.165,6.07507-.34,12.15-.465,16.365-.92,32.72c-.03,1.13-.07,2.25-.1,3.38q-.225,8.11506-.45,16.23-.255,8.805-.5,17.61-.18,6.59994-.37,13.21-1.34994,47.895-2.7,95.79a7.64844,7.64844,0,0,1-7.5,7.5,7.56114,7.56114,0,0,1-7.5-7.5q.75-26.94,1.52-53.88.675-24.36,1.37-48.72.225-8.025.45-16.06.345-12.09.68-24.18c.03-1.13.07-2.25.1-3.38.02-.99.05-1.97.08-2.96q.66-23.475,1.32-46.96.27-9.24.52-18.49.3-10.545.6-21.08c.09-3.09.17005-6.17.26-9.26a7.64844,7.64844,0,0,1,7.5-7.5A7.56116,7.56116,0,0,1,402.86309,482.136Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><path d="M814.29118,484.2172a893.23753,893.23753,0,0,1-28.16112,87.94127c-3.007,7.94641-6.08319,15.877-9.3715,23.71185l.75606-1.7916a54.58274,54.58274,0,0,1-5.58953,10.61184q-.22935.32119-.46685.63642,1.16559-1.49043.4428-.589c-.25405.30065-.5049.60219-.7676.89546a23.66436,23.66436,0,0,1-2.2489,2.20318q-.30139.25767-.61188.5043l.93783-.729c-.10884.25668-.87275.59747-1.11067.74287a18.25362,18.25362,0,0,1-2.40479,1.21853l1.7916-.75606a19.0859,19.0859,0,0,1-4.23122,1.16069l1.9938-.26791a17.02055,17.02055,0,0,1-4.29785.046l1.99379.2679a14.0022,14.0022,0,0,1-3.40493-.917l1.79159.75606a12.01175,12.01175,0,0,1-1.67882-.89614c-.27135-.17688-1.10526-.80852-.01487.02461,1.13336.86595.14562.07434-.08763-.15584-.19427-.19171-.36962-.4-.55974-.595-.88208-.90454.99637,1.55662.39689.49858a18.18179,18.18179,0,0,1-.87827-1.63672l.75606,1.7916a11.92493,11.92493,0,0,1-.728-2.65143l.26791,1.9938a13.65147,13.65147,0,0,1-.00316-3.40491l-.2679,1.9938a15.96371,15.96371,0,0,1,.99486-3.68011l-.75606,1.7916a16.72914,16.72914,0,0,1,1.17794-2.29848,6.72934,6.72934,0,0,1,.72851-1.0714c.04915.01594-1.26865,1.51278-.56937.757.1829-.19767.354-.40592.539-.602.29617-.31382.61354-.60082.92561-.89791,1.04458-.99442-1.46188.966-.25652.17907a19.0489,19.0489,0,0,1,2.74925-1.49923l-1.79159.75606a20.31136,20.31136,0,0,1,4.99523-1.33984l-1.9938.2679a25.62828,25.62828,0,0,1,6.46062.07647l-1.9938-.2679a33.21056,33.21056,0,0,1,7.89178,2.2199l-1.7916-.75606c5.38965,2.31383,10.16308,5.74926,14.928,9.118a111.94962,111.94962,0,0,0,14.50615,8.9065,108.38849,108.38849,0,0,0,34.62226,10.47371,103.93268,103.93268,0,0,0,92.58557-36.75192,8.07773,8.07773,0,0,0,2.1967-5.3033,7.63232,7.63232,0,0,0-2.1967-5.3033c-2.75154-2.52586-7.94926-3.239-10.6066,0a95.63575,95.63575,0,0,1-8.10664,8.72692q-2.01736,1.914-4.14232,3.70983-1.21364,1.02588-2.46086,2.01121c-.3934.31081-1.61863,1.13807.26309-.19744-.43135.30614-.845.64036-1.27058.95478a99.26881,99.26881,0,0,1-20.33215,11.56478l1.79159-.75606a96.8364,96.8364,0,0,1-24.17119,6.62249l1.99379-.2679a97.64308,97.64308,0,0,1-25.75362-.03807l1.99379.2679a99.79982,99.79982,0,0,1-24.857-6.77027l1.7916.75607a116.02515,116.02515,0,0,1-21.7364-12.59112,86.87725,86.87725,0,0,0-11.113-6.99417,42.8238,42.8238,0,0,0-14.43784-4.38851c-9.43884-1.11076-19.0571,2.56562-24.24624,10.72035-4.77557,7.50482-4.71394,18.24362,1.97369,24.62519,6.8877,6.5725,17.31846,6.51693,25.43556,2.40567,7.81741-3.95946,12.51288-12.18539,15.815-19.94186,7.43109-17.45514,14.01023-35.31364,20.1399-53.263q9.09651-26.63712,16.49855-53.81332.91661-3.36581,1.80683-6.73869c1.001-3.78869-1.26094-8.32-5.23829-9.22589a7.63317,7.63317,0,0,0-9.22589,5.23829Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><path d="M889.12382,482.13557l-2.69954,95.79311-2.68548,95.29418-1.5185,53.88362a7.56465,7.56465,0,0,0,7.5,7.5,7.64923,7.64923,0,0,0,7.5-7.5l2.69955-95.79311,2.68548-95.29418,1.51849-53.88362a7.56465,7.56465,0,0,0-7.5-7.5,7.64923,7.64923,0,0,0-7.5,7.5Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><path d="M629.52566,700.36106h2.32885V594.31942h54.32863v-2.32291H631.85451V547.25214H673.8102q-.92256-1.17339-1.89893-2.31694H631.85451V515.38231c-.7703-.32846-1.54659-.64493-2.32885-.9435V544.9352h-45.652V507.07c-.78227.03583-1.55258.08959-2.3289.15527v37.71h-36.4201V516.68409c-.78227.34636-1.55258.71061-2.31694,1.0928V544.9352h-30.6158v2.31694h30.6158v44.74437h-30.6158v2.32291h30.6158V700.36106h2.31694V594.31942a36.41283,36.41283,0,0,1,36.4201,36.42007v69.62157h2.3289V594.31942h45.652Zm-84.401-108.36455V547.25214h36.4201v44.74437Zm38.749,0V547.25214h.91362a44.74135,44.74135,0,0,1,44.73842,44.74437Z" transform="translate(-169.93432 -164.42601)" opacity="0.2"/><path d="M615.30309,668.566a63.05854,63.05854,0,0,1-20.05,33.7c-.74.64-1.48,1.26-2.25,1.87q-2.805.25506-5.57.52c-1.53.14-3.04.29-4.54.43l-.27.03-.19-1.64-.76-6.64a37.623,37.623,0,0,1-3.3-32.44c2.64-7.12,7.42-13.41,12.12-19.65,6.49-8.62,12.8-17.14,13.03-27.65a60.54415,60.54415,0,0,1,7.9,13.33,16.432,16.432,0,0,0-5.12,3.76995c-.41.45-.82,1.08-.54,1.62006.24.46.84.57,1.36.62994,1.25.13,2.51.26,3.76.39,1,.11,2,.21,3,.32a63.99025,63.99025,0,0,1,2.45,12.18A61.18851,61.18851,0,0,1,615.30309,668.566Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><path d="M648.50311,642.356c-5.9,4.29-9.35,10.46-12.03,17.26a16.62776,16.62776,0,0,0-7.17,4.58c-.41.45-.82,1.08-.54,1.62006.24.46.84.57,1.36.62994,1.25.13,2.51.26,3.76.39-2.68,8.04-5.14,16.36-9.88,23.15a36.98942,36.98942,0,0,1-12.03,10.91,38.49166,38.49166,0,0,1-4.02,1.99q-7.62.585-14.95,1.25-2.805.25506-5.57.52c-1.53.14-3.04.29-4.54.43q-.015-.825,0-1.65a63.30382,63.30382,0,0,1,15.25-39.86c.45-.52.91-1.03,1.38-1.54a61.7925,61.7925,0,0,1,16.81-12.7A62.65425,62.65425,0,0,1,648.50311,642.356Z" transform="translate(-169.93432 -164.42601)" fill="#1f2937"/><path d="M589.16308,699.526l-1.15,3.4-.58,1.73c-1.53.14-3.04.29-4.54.43l-.27.03c-1.66.17-3.31.34-4.96.51-.43-.5-.86-1.01-1.28-1.53a62.03045,62.03045,0,0,1,8.07-87.11c-1.32,6.91.22,13.53,2.75,20.1-.27.11-.53.22-.78.34a16.432,16.432,0,0,0-5.12,3.76995c-.41.45-.82,1.08-.54,1.62006.24.46.84.57,1.36.62994,1.25.13,2.51.26,3.76.39,1,.11,2,.21,3,.32q.705.075,1.41.15c.07.15.13.29.2.44,2.85,6.18,5.92,12.39,7.65,18.83a43.66591,43.66591,0,0,1,1.02,4.91A37.604,37.604,0,0,1,589.16308,699.526Z" transform="translate(-169.93432 -164.42601)" fill="#1f2937"/><path d="M689.82123,554.48655c-8.60876-16.79219-21.94605-30.92088-37.63219-41.30357a114.2374,114.2374,0,0,0-52.5626-18.37992q-3.69043-.33535-7.399-.39281c-2.92141-.04371-46.866,12.63176-61.58712,22.98214a114.29462,114.29462,0,0,0-35.333,39.527,102.49972,102.49972,0,0,0-12.12557,51.6334,113.56387,113.56387,0,0,0,14.70268,51.47577,110.47507,110.47507,0,0,0,36.44425,38.74592C549.66655,708.561,565.07375,734.51,583.1831,735.426c18.24576.923,39.05418-23.55495,55.6951-30.98707a104.42533,104.42533,0,0,0,41.72554-34.005,110.24964,110.24964,0,0,0,19.599-48.94777c2.57368-18.08313,1.37415-36.73271-4.80123-54.01627a111.85969,111.85969,0,0,0-5.58024-12.9833c-1.77961-3.50519-6.996-4.7959-10.26142-2.69063a7.67979,7.67979,0,0,0-2.69064,10.26142q1.56766,3.08773,2.91536,6.27758l-.75606-1.7916a101.15088,101.15088,0,0,1,6.87641,25.53816l-.26791-1.99379a109.2286,109.2286,0,0,1-.06613,28.68252l.26791-1.9938a109.73379,109.73379,0,0,1-7.55462,27.67419l.75606-1.79159a104.212,104.212,0,0,1-6.67151,13.09835q-1.92308,3.18563-4.08062,6.22159c-.63172.8881-1.28287,1.761-1.939,2.63114-.85625,1.13555,1.16691-1.48321.28228-.36941-.15068.18972-.30049.3801-.45182.5693q-.68121.85165-1.3818,1.68765a93.61337,93.61337,0,0,1-10.17647,10.38359q-1.36615,1.19232-2.77786,2.33115c-.46871.37832-.932.77269-1.42079,1.12472.01861-.0134,1.57956-1.19945.65556-.511-.2905.21644-.57851.43619-.86961.65184q-2.90994,2.1558-5.97433,4.092a103.48509,103.48509,0,0,1-14.75565,7.7131l1.7916-.75606a109.21493,109.21493,0,0,1-27.59663,7.55154l1.9938-.26791a108.15361,108.15361,0,0,1-28.58907.0506l1.99379.2679a99.835,99.835,0,0,1-25.09531-6.78448l1.79159.75607a93.64314,93.64314,0,0,1-13.41605-6.99094q-3.17437-2-6.18358-4.24743c-.2862-.21359-.56992-.43038-.855-.64549-.9155-.69088.65765.50965.67021.51787a19.16864,19.16864,0,0,1-1.535-1.22469q-1.45353-1.18358-2.86136-2.4218a101.98931,101.98931,0,0,1-10.49319-10.70945q-1.21308-1.43379-2.37407-2.91054c-.33524-.4263-.9465-1.29026.40424.5289-.17775-.23939-.36206-.47414-.54159-.71223q-.64657-.85751-1.27568-1.72793-2.203-3.048-4.18787-6.24586a109.29037,109.29037,0,0,1-7.8054-15.10831l.75606,1.7916a106.58753,106.58753,0,0,1-7.34039-26.837l.26791,1.9938a97.86589,97.86589,0,0,1-.04843-25.63587l-.2679,1.9938A94.673,94.673,0,0,1,505.27587,570.55l-.75606,1.7916a101.55725,101.55725,0,0,1,7.19519-13.85624q2.0655-3.32328,4.37767-6.4847.52528-.71832,1.06244-1.42786c.324-.4279,1.215-1.49333-.30537.38842.14906-.18449.29252-.37428.43942-.56041q1.26882-1.60756,2.59959-3.1649A107.40164,107.40164,0,0,1,530.772,536.21508q1.47408-1.29171,2.99464-2.52906.6909-.56218,1.39108-1.11284c.18664-.14673.37574-.29073.56152-.43858-1.99743,1.58953-.555.43261-.10157.09288q3.13393-2.34833,6.43534-4.46134a103.64393,103.64393,0,0,1,15.38655-8.10791l-1.7916.75606c7.76008-3.25839,42.14086-10.9492,48.394-10.10973l-1.99379-.26791A106.22471,106.22471,0,0,1,628.768,517.419l-1.7916-.75606a110.31334,110.31334,0,0,1,12.6002,6.32922q3.04344,1.78405,5.96742,3.76252,1.38351.93658,2.73809,1.915.677.48917,1.34626.98885c.24789.185.49386.37253.74135.558,1.03924.779-1.43148-1.1281-.34209-.26655a110.84261,110.84261,0,0,1,10.36783,9.2532q2.401,2.445,4.63686,5.04515,1.14659,1.33419,2.24643,2.70757c.36436.45495,1.60506,2.101.08448.08457.37165.49285.74744.98239,1.11436,1.47884a97.97718,97.97718,0,0,1,8.39161,13.53807c1.79317,3.49775,6.98675,4.80186,10.26142,2.69064A7.67666,7.67666,0,0,0,689.82123,554.48655Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><path d="M602.43116,676.88167a3.77983,3.77983,0,0,1-2.73939-6.55137c.09531-.37882.16368-.65085.259-1.02968q-.05115-.12366-.1029-.24717c-3.47987-8.29769-25.685,14.83336-26.645,22.63179a30.029,30.029,0,0,0,.52714,10.32752A120.39223,120.39223,0,0,1,562.77838,652.01a116.20247,116.20247,0,0,1,.72078-12.96332q.59712-5.293,1.65679-10.51055a121.78667,121.78667,0,0,1,24.1515-51.61646c6.87378.38364,12.898-.66348,13.47967-13.98532.10346-2.36972,1.86113-4.42156,2.24841-6.756-.65621.08607-1.32321.13985-1.97941.18285-.20444.0107-.41958.02149-.624.03228l-.07709.00346a3.745,3.745,0,0,1-3.07566-6.10115q.425-.52305.85054-1.04557c.43036-.53793.87143-1.06507,1.30171-1.60292a1.865,1.865,0,0,0,.13986-.16144c.49494-.61322.98971-1.21564,1.48465-1.82885a10.82911,10.82911,0,0,0-3.55014-3.43169c-4.95941-2.90463-11.80146-.89293-15.38389,3.59313-3.59313,4.486-4.27083,10.77947-3.023,16.3843a43.39764,43.39764,0,0,0,6.003,13.3828c-.269.34429-.54872.67779-.81765,1.02209a122.57366,122.57366,0,0,0-12.79359,20.2681c1.0163-7.93863-11.41159-36.60795-16.21776-42.68052-5.773-7.29409-17.61108-4.11077-18.62815,5.13562q-.01476.13428-.02884.26849,1.07082.60411,2.0964,1.28237a5.12707,5.12707,0,0,1-2.06713,9.33031l-.10452.01613c-9.55573,13.64367,21.07745,49.1547,28.74518,41.18139a125.11045,125.11045,0,0,0-6.73449,31.69282,118.66429,118.66429,0,0,0,.08607,19.15986l-.03231-.22593C558.90163,648.154,529.674,627.51374,521.139,629.233c-4.91675.99041-9.75952.76525-9.01293,5.72484q.01788.11874.03635.2375a34.4418,34.4418,0,0,1,3.862,1.86105q1.07082.60423,2.09639,1.28237a5.12712,5.12712,0,0,1-2.06712,9.33039l-.10464.01606c-.07528.01079-.13987.02157-.21507.03237-4.34967,14.96631,27.90735,39.12,47.5177,31.43461h.01081a125.07484,125.07484,0,0,0,8.402,24.52806H601.679c.10765-.3335.20443-.67779.3013-1.01129a34.102,34.102,0,0,1-8.30521-.49477c2.22693-2.73257,4.45377-5.48664,6.6807-8.21913a1.86122,1.86122,0,0,0,.13986-.16135c1.12956-1.39849,2.26992-2.78627,3.39948-4.18476l.00061-.00173a49.95232,49.95232,0,0,0-1.46367-12.72495Zm-34.37066-67.613.0158-.02133-.0158.04282Zm-6.64832,59.93237-.25822-.58084c.01079-.41957.01079-.83914,0-1.26942,0-.11845-.0215-.23672-.0215-.35508.09678.74228.18285,1.48464.29042,2.22692Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><circle cx="95.24878" cy="439" r="11" fill="#3f3d56"/><circle cx="227.24878" cy="559" r="11" fill="#3f3d56"/><circle cx="728.24878" cy="559" r="11" fill="#3f3d56"/><circle cx="755.24878" cy="419" r="11" fill="#3f3d56"/><circle cx="723.24878" cy="317" r="11" fill="#3f3d56"/><path d="M434.1831,583.426a10.949,10.949,0,1,1-.21-2.16A10.9921,10.9921,0,0,1,434.1831,583.426Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><circle cx="484.24878" cy="349" r="11" fill="#3f3d56"/><path d="M545.1831,513.426a10.949,10.949,0,1,1-.21-2.16A10.9921,10.9921,0,0,1,545.1831,513.426Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><path d="M403.1831,481.426a10.949,10.949,0,1,1-.21-2.16A10.9921,10.9921,0,0,1,403.1831,481.426Z" transform="translate(-169.93432 -164.42601)" fill="#3f3d56"/><circle cx="599.24878" cy="443" r="11" fill="#3f3d56"/><circle cx="426.24878" cy="338" r="16" fill="#3f3d56"/><path d="M1028.875,735.26666l-857.75.30733a1.19068,1.19068,0,1,1,0-2.38136l857.75-.30734a1.19069,1.19069,0,0,1,0,2.38137Z" transform="translate(-169.93432 -164.42601)" fill="#cacaca"/></svg>
```

## File: public/robots.txt
```
1: User-agent: *
2: 
3: Allow: /
4: 
5: Disallow: 
6: 
7: Sitemap: https://www.dfweb.no/api/siteMapGenerator
```

## File: src/__mocks__/categories.json
```json
1: [
2:   { "id": 1, "name": "React" },
3:   { "id": 2, "name": "Typescript" },
4:   { "id": 3, "name": "Vue" },
5:   { "id": 4, "name": "PHP" }
6: ]
```

## File: src/__mocks__/hero.json
```json
 1: {
 2:   "content": [
 3:     { " _key": "123", "_type": "herocontent", "text": "Hei!" },
 4:     {
 5:       "_key": "456",
 6:       "_type": "herocontent",
 7:       "text": "Jeg heter Daniel Fjeldstad og er en webutvikler."
 8:     },
 9:     {
10:       "_key": "678",
11:       "_type": "herocontent",
12:       "text": "Jeg kan PHP, Wordpress, Javascript, Typescript, React, Vue, Docker, Photoshop og mye mer."
13:     }
14:   ]
15: }
```

## File: src/__mocks__/links.json
```json
 1: [
 2:   {
 3:     "title": "Home",
 4:     "name": "Hjem",
 5:     "hash": "#hjem",
 6:     "href": "/",
 7:     "externalLink": false
 8:   },
 9:   {
10:     "title": "Prosjekter",
11:     "name": "Prosjekter",
12:     "hash": "#prosjekter",
13:     "href": "/prosjekter",
14:     "externalLink": false
15:   },
16:   {
17:     "title": "CV",
18:     "name": "CV",
19:     "hash": "#cv",
20:     "href": "/cv",
21:     "externalLink": false
22:   },
23:   {
24:     "title": "Github",
25:     "name": "Github",
26:     "hash": "#github",
27:     "href": "https://github.com/w3bdesign",
28:     "externalLink": true
29:   },
30:   {
31:     "title": "Kontakt",
32:     "name": "Kontakt",
33:     "hash": "#kontakt",
34:     "href": "/kontakt",
35:     "externalLink": false
36:   }
37: ]
```

## File: src/__mocks__/pagecontent.json
```json
  1: [
  2:   {
  3:     "content": [
  4:       {
  5:         "_key": "1234567",
  6:         "_type": "pagecontent",
  7:         "id": 1,
  8:         "text": [
  9:           {
 10:             "_key": "12",
 11:             "_type": "block",
 12:             "children": [
 13:               {
 14:                 "_key": "78654656",
 15:                 "_type": "span",
 16:                 "marks": ["code"],
 17:                 "text": "Siden 2000 har jeg arbeidet med webdesign og utvikling, og jeg har i nyere tid spesialisert meg på frontendutvikling."
 18:               }
 19:             ],
 20:             "markDefs": [],
 21:             "style": "normal"
 22:           },
 23:           {
 24:             "_key": "34",
 25:             "_type": "block",
 26:             "children": [
 27:               {
 28:                 "_key": "567",
 29:                 "_type": "span",
 30:                 "marks": ["code"],
 31:                 "text": "Jeg har erfaring med WordPress og WooCommerce siden 2011 hvor jeg har arbeidet frilans via Fiverr og kan skilte med 100% positiv tilbakemelding på samtlige oppdrag."
 32:               }
 33:             ],
 34:             "markDefs": [],
 35:             "style": "normal"
 36:           },
 37:           {
 38:             "_key": "123434344",
 39:             "_type": "block",
 40:             "children": [
 41:               {
 42:                 "_key": "8744567556",
 43:                 "_type": "span",
 44:                 "marks": ["code"],
 45:                 "text": "Jeg har også erfaring med andre teknologier som moderne Javascript (ES6+), Typescript, React, Vue.js, PHP, mySQL,  Gatsby, Next.js, Docker, GraphQL, Adobe Photoshop, Storybook, Bootstrap med mer."
 46:               }
 47:             ],
 48:             "markDefs": [],
 49:             "style": "normal"
 50:           }
 51:         ],
 52:         "title": "Om Meg"
 53:       },
 54:       {
 55:         "_key": "554433",
 56:         "_type": "pagecontent",
 57:         "id": 2,
 58:         "text": [
 59:           {
 60:             "_key": "34654",
 61:             "_type": "block",
 62:             "children": [
 63:               {
 64:                 "_key": "347875465",
 65:                 "_type": "span",
 66:                 "marks": ["code"],
 67:                 "text": "Jeg arbeider jevnlig med hobbyprosjekter, primært med fokus på Javascript og Typescript."
 68:               }
 69:             ],
 70:             "markDefs": [],
 71:             "style": "normal"
 72:           },
 73:           {
 74:             "_key": "23544",
 75:             "_type": "block",
 76:             "children": [
 77:               {
 78:                 "_key": "34432",
 79:                 "_type": "span",
 80:                 "marks": ["code"],
 81:                 "text": "Kildekoden publiserer jeg på "
 82:               },
 83:               {
 84:                 "_key": "3343246",
 85:                 "_type": "span",
 86:                 "marks": ["code", "cdacd3f8961a"],
 87:                 "text": "GITHUB"
 88:               },
 89:               {
 90:                 "_key": "8654",
 91:                 "_type": "span",
 92:                 "marks": ["code"],
 93:                 "text": "."
 94:               }
 95:             ],
 96:             "markDefs": [
 97:               {
 98:                 "_key": "24341111",
 99:                 "_type": "link",
100:                 "href": "https://www.github.com/w3bdesign"
101:               }
102:             ],
103:             "style": "normal"
104:           },
105:           {
106:             "_key": "235788",
107:             "_type": "block",
108:             "children": [
109:               {
110:                 "_key": "85323",
111:                 "_type": "span",
112:                 "marks": ["code"],
113:                 "text": "På "
114:               },
115:               {
116:                 "_key": "46755",
117:                 "_type": "span",
118:                 "marks": ["code", "bba1096d8305"],
119:                 "text": "PROSJEKTER"
120:               },
121:               {
122:                 "_key": "77433",
123:                 "_type": "span",
124:                 "marks": ["code"],
125:                 "text": " kan du se eksempler på arbeid jeg har gjort i nyere tid."
126:               }
127:             ],
128:             "markDefs": [
129:               {
130:                 "_key": "2223345",
131:                 "_type": "link",
132:                 "href": "/prosjekter"
133:               }
134:             ],
135:             "style": "normal"
136:           },
137:           {
138:             "_key": "98656",
139:             "_type": "block",
140:             "children": [
141:               {
142:                 "_key": "45322",
143:                 "_type": "span",
144:                 "marks": ["code"],
145:                 "text": "Har også bidratt med utvikling av flere open-source prosjekter på "
146:               },
147:               {
148:                 "_key": "33467776",
149:                 "_type": "span",
150:                 "marks": ["code", "b4f758908e2e"],
151:                 "text": "GITHUB."
152:               }
153:             ],
154:             "markDefs": [
155:               {
156:                 "_key": "3443477",
157:                 "_type": "link",
158:                 "href": "https://www.github.com/w3bdesign"
159:               }
160:             ],
161:             "style": "normal"
162:           },
163:           {
164:             "_key": "422356654",
165:             "_type": "block",
166:             "children": [
167:               {
168:                 "_key": "34576455",
169:                 "_type": "span",
170:                 "marks": [],
171:                 "text": ""
172:               }
173:             ],
174:             "markDefs": [],
175:             "style": "normal"
176:           }
177:         ],
178:         "title": "Prosjekter"
179:       }
180:     ],
181:     "hero": [
182:       {
183:         "_key": "867819",
184:         "_type": "herocontent",
185:         "text": "Hei!"
186:       },
187:       {
188:         "_key": "86345653",
189:         "_type": "herocontent",
190:         "text": "Jeg heter Daniel Fjeldstad og er en webutvikler."
191:       },
192:       {
193:         "_key": "34775653",
194:         "_type": "herocontent",
195:         "text": "Jeg kan PHP, Wordpress, Javascript, Typescript, React, Vue, Docker, Photoshop og mye mer."
196:       }
197:     ],
198:     "id": "15fc8058-09f7-4613-9a4e-bd1295d9085a",
199:     "title": "Hjem"
200:   }
201: ]
```

## File: src/__mocks__/projects.json
```json
 1: [
 2:   {
 3:     "_createdAt": "2022-01-08T21:13:12Z",
 4:     "_id": "01979e3e-997e-49ba-bc1c-19895bb821f1",
 5:     "_rev": "N67YfvFXT61u7WTlVd9kW9",
 6:     "_type": "project",
 7:     "_updatedAt": "2022-01-26T00:21:34Z",
 8:     "category": "Typescript",
 9:     "description": "Henter informasjon fra Statens Vegvesen sitt REST API med en serverless backend som benyttes som proxy. Bruker Parcel bundler og er kodet i Typescript med HTML5 og Materialize for design.",
10:     "id": 7,
11:     "name": "Statens Vegvesen",
12:     "subdescription": "HTML5, Typescript, OOP, Materialize, Parcel, Serverless",
13:     "projectimage": {
14:       "_type": "image",
15:       "asset": {
16:         "_ref": "image-07084afbda1945f7c51ecc173b05f7ae857c14d0-1129x699-png",
17:         "_type": "reference"
18:       }
19:     }
20:   }
21: ]
```

## File: src/__mocks__/react-dom.ts
```typescript
1: const reactDom = jest.requireActual("react-dom");
2: module.exports = {
3:   ...reactDom, // use actual for all non-hook parts
4:   preload: () => {}, // This is a mock function used in testing, so it's intentionally empty.
5:   preconnect: () => {}, // This is a mock function used in testing, so it's intentionally empty.
6:   prefetchDNS: () => {}, // This is a mock function used in testing, so it's intentionally empty.
7: };
```

## File: src/__tests__/Animations/BounceInScroll.test.tsx
```typescript
  1: import { render, screen } from "@testing-library/react";
  2: import "@testing-library/jest-dom";
  3: import BounceInScroll from "@/components/Animations/BounceInScroll.component";
  4: // Mock framer-motion
  5: jest.mock("motion/react", () => ({
  6:   motion: {
  7:     div: ({ children, className, "data-testid": testId }: any) => (
  8:       <div className={className} data-testid={testId}>
  9:         {children}
 10:       </div>
 11:     ),
 12:   },
 13:   Variants: {},
 14: }));
 15: describe("BounceInScroll", () => {
 16:   it("renders children content", () => {
 17:     // Arrange
 18:     const testContent = "Test content";
 19:     // Act
 20:     render(
 21:       <BounceInScroll>
 22:         <div>{testContent}</div>
 23:       </BounceInScroll>,
 24:     );
 25:     // Assert
 26:     expect(screen.getByText(testContent)).toBeInTheDocument();
 27:   });
 28:   it("applies custom CSS class", () => {
 29:     // Arrange
 30:     const testClass = "test-class";
 31:     // Act
 32:     render(
 33:       <BounceInScroll cssClass={testClass}>
 34:         <div>Test content</div>
 35:       </BounceInScroll>,
 36:     );
 37:     // Assert
 38:     expect(screen.getByTestId("bounceinscroll")).toHaveClass(testClass);
 39:   });
 40:   it("configures viewport with default amount when viewAmount not provided", () => {
 41:     // Arrange
 42:     const testContent = "Test content";
 43:     // Act
 44:     render(
 45:       <BounceInScroll>
 46:         <div>{testContent}</div>
 47:       </BounceInScroll>,
 48:     );
 49:     // Assert
 50:     const element = screen.getByTestId("bounceinscroll");
 51:     expect(element).toBeInTheDocument();
 52:     expect(screen.getByText(testContent)).toBeInTheDocument();
 53:   });
 54:   it("configures viewport with custom amount when viewAmount provided", () => {
 55:     // Arrange
 56:     const testContent = "Test content";
 57:     const viewAmount = 0.5;
 58:     // Act
 59:     render(
 60:       <BounceInScroll viewAmount={viewAmount}>
 61:         <div>{testContent}</div>
 62:       </BounceInScroll>,
 63:     );
 64:     // Assert
 65:     const element = screen.getByTestId("bounceinscroll");
 66:     expect(element).toBeInTheDocument();
 67:     expect(screen.getByText(testContent)).toBeInTheDocument();
 68:   });
 69:   it("configures for instant animation when instant prop is true", () => {
 70:     // Arrange
 71:     const testContent = "Test content";
 72:     // Act
 73:     render(
 74:       <BounceInScroll instant={true}>
 75:         <div>{testContent}</div>
 76:       </BounceInScroll>,
 77:     );
 78:     // Assert
 79:     const element = screen.getByTestId("bounceinscroll");
 80:     expect(element).toBeInTheDocument();
 81:     expect(screen.getByText(testContent)).toBeInTheDocument();
 82:   });
 83:   it("handles all viewport amount types", () => {
 84:     // Arrange
 85:     const amounts: Array<"some" | "all" | number> = ["some", "all", 0.7];
 86:     const testContent = "Test content";
 87:     amounts.forEach((amount) => {
 88:       // Act
 89:       const { unmount } = render(
 90:         <BounceInScroll viewAmount={amount}>
 91:           <div>{testContent}</div>
 92:         </BounceInScroll>,
 93:       );
 94:       // Assert
 95:       const element = screen.getByTestId("bounceinscroll");
 96:       expect(element).toBeInTheDocument();
 97:       expect(screen.getByText(testContent)).toBeInTheDocument();
 98:       // Cleanup
 99:       unmount();
100:     });
101:   });
102: });
```

## File: src/__tests__/Animations/Grow.test.tsx
```typescript
 1: /**
 2:  * @jest-environment jsdom
 3:  */
 4: import { render, screen } from "@testing-library/react";
 5: import "@testing-library/jest-dom";
 6: import Grow from "@/components/Animations/Grow.component";
 7: describe("Grow", () => {
 8:   describe("with provided props", () => {
 9:     beforeEach(() => {
10:       render(
11:         <Grow duration={0.3} delay={0.2} easing={[0.42, 0, 0.58, 1]}>
12:           Hello World
13:         </Grow>,
14:       );
15:     });
16:     it("renders component with custom animation props", () => {
17:       // Arrange
18:       const expectedTestId = "grow";
19:       // Act
20:       const element = screen.getByTestId(expectedTestId);
21:       // Assert
22:       expect(element).toBeInTheDocument();
23:     });
24:     it("applies initial scale transform animation", () => {
25:       // Arrange
26:       const expectedStyle = "transform: scale(0);";
27:       // Act
28:       const element = screen.getByTestId("grow");
29:       // Assert
30:       expect(element).toHaveStyle(expectedStyle);
31:     });
32:     it("renders children content", () => {
33:       // Arrange
34:       const expectedContent = "Hello World";
35:       // Act
36:       const content = screen.getByText(expectedContent);
37:       // Assert
38:       expect(content).toBeInTheDocument();
39:     });
40:   });
41:   describe("with default props", () => {
42:     it("renders component with default animation values", () => {
43:       // Arrange
44:       const expectedContent = "Default Props Test";
45:       // Act
46:       render(<Grow>{expectedContent}</Grow>);
47:       const element = screen.getByTestId("grow");
48:       const content = screen.getByText(expectedContent);
49:       // Assert
50:       expect(element).toBeInTheDocument();
51:       expect(content).toBeInTheDocument();
52:     });
53:   });
54: });
```

## File: src/__tests__/Animations/Matrix.renderer.test.ts
```typescript
 1: import { MatrixRenderer } from "@/components/Animations/Matrix.renderer";
 2: import { RGB, Column } from "@/components/Animations/Matrix.utils";
 3: describe("MatrixRenderer", () => {
 4:   let mockCtx: CanvasRenderingContext2D;
 5:   let mockCanvas: HTMLCanvasElement;
 6:   let columns: Column[];
 7:   let renderer: MatrixRenderer;
 8:   const rgbBackground: RGB = { r: 0, g: 0, b: 0 };
 9:   const rgbFont: RGB = { r: 0, g: 255, b: 0 };
10:   beforeEach(() => {
11:     mockCtx = {
12:       fillStyle: "",
13:       fillRect: jest.fn(),
14:       fillText: jest.fn(),
15:       font: "",
16:       save: jest.fn(),
17:       restore: jest.fn(),
18:       shadowColor: "",
19:       shadowBlur: 0,
20:     } as unknown as CanvasRenderingContext2D;
21:     mockCanvas = {
22:       width: 100,
23:       height: 100,
24:     } as unknown as HTMLCanvasElement;
25:     columns = [
26:       {
27:         x: 0,
28:         stackHeight: 10,
29:         stackCounter: 5,
30:       },
31:     ];
32:     renderer = new MatrixRenderer({
33:       ctx: mockCtx,
34:       canvas: mockCanvas,
35:       columns,
36:       maxStackHeight: 20,
37:       tileSize: 10,
38:       fadeFactor: 0.5,
39:       rgbBackground,
40:       rgbFont,
41:       glowColor: "#00ff00",
42:       tileSet: ["A", "B", "C"],
43:       getRandomInt: (max: number) => 123456789 % max,
44:     });
45:   });
46:   it("draws background", () => {
47:     // Arrange
48:     const expectedFont = "8px monospace";
49:     // Act
50:     renderer.draw();
51:     // Assert
52:     expect(mockCtx.fillRect).toHaveBeenCalledWith(0, 0, 100, 100);
53:     expect(mockCtx.font).toBe(expectedFont);
54:   });
55:   it("draws columns with characters", () => {
56:     // Arrange
57:     const mockStackCounter = columns[0].stackCounter;
58:     const mockStackHeight = columns[0].stackHeight;
59:     // Act
60:     renderer.draw();
61:     // Assert
62:     expect(mockCtx.fillText).toHaveBeenCalled();
63:     if (mockStackCounter === Math.floor(mockStackHeight) - 1) {
64:       expect(mockCtx.save).toHaveBeenCalled();
65:       expect(mockCtx.restore).toHaveBeenCalled();
66:     }
67:   });
68:   it("updates column counters", () => {
69:     // Arrange
70:     const originalStackCounter = columns[0].stackCounter;
71:     // Act
72:     renderer.draw();
73:     // Assert
74:     expect(columns[0].stackCounter).toBe(originalStackCounter + 1);
75:   });
76:   it("resets column when reaching stack height", () => {
77:     // Arrange
78:     columns[0].stackCounter = columns[0].stackHeight - 1;
79:     const expectedNewStackHeight = 19; // 10 + (123456789 % 20)
80:     // Act
81:     renderer.draw();
82:     // Assert
83:     expect(columns[0].stackCounter).toBe(0);
84:     expect(columns[0].stackHeight).toBe(expectedNewStackHeight);
85:   });
86: });
```

## File: src/__tests__/Animations/Matrix.test.tsx
```typescript
 1: import React from "react";
 2: import { render, screen } from "@testing-library/react";
 3: import "@testing-library/jest-dom";
 4: import ReactMatrixAnimation from "@/components/Animations/Matrix.component";
 5: const mockFillRect = jest.fn();
 6: const mockFillText = jest.fn();
 7: HTMLCanvasElement.prototype.getContext = () => ({
 8:   fillRect: mockFillRect,
 9:   fillText: mockFillText,
10: });
11: const mockContext = {
12:   fillRect: jest.fn(),
13:   fillText: jest.fn(),
14: };
15: HTMLCanvasElement.prototype.getContext = jest.fn(() => mockContext);
16: global.requestAnimationFrame = jest.fn((cb) => setTimeout(cb, 0));
17: describe("ReactMatrixAnimation", () => {
18:   beforeEach(() => {
19:     jest.useFakeTimers();
20:     jest
21:       .spyOn(window, "requestAnimationFrame")
22:       .mockImplementation((cb) => setTimeout(cb, 0));
23:   });
24:   afterEach(() => {
25:     jest.useRealTimers();
26:     jest.restoreAllMocks();
27:   });
28:   describe("rendering", () => {
29:     it("renders canvas element with default props", () => {
30:       // Arrange
31:       const expectedTestId = "matrix-canvas";
32:       // Act
33:       render(<ReactMatrixAnimation />);
34:       const canvas = screen.getByTestId(expectedTestId);
35:       // Assert
36:       expect(canvas).toBeInTheDocument();
37:       expect(canvas).toHaveStyle({
38:         width: "100%",
39:         height: "100%",
40:       });
41:     });
42:     it("renders canvas element with custom props", () => {
43:       // Arrange
44:       const customProps = {
45:         tileSize: 30,
46:         fadeFactor: 0.7,
47:         backgroundColor: "#000000",
48:         fontColor: "#ffffff",
49:         tileSet: ["A", "B", "C"],
50:       };
51:       const expectedTestId = "matrix-canvas";
52:       // Act
53:       render(<ReactMatrixAnimation {...customProps} />);
54:       const canvas = screen.getByTestId(expectedTestId);
55:       // Assert
56:       expect(canvas).toBeInTheDocument();
57:     });
58:   });
59:   describe("validation", () => {
60:     beforeEach(() => {
61:       // Arrange - Suppress console.error for validation tests
62:       console.error = jest.fn();
63:     });
64:     it("throws error for invalid background color", () => {
65:       // Arrange
66:       const invalidProps = { backgroundColor: "invalid" };
67:       const expectedError =
68:         "Invalid background color. Use a hex value e.g. #030303";
69:       // Act & Assert
70:       expect(() => {
71:         render(<ReactMatrixAnimation {...invalidProps} />);
72:       }).toThrow(expectedError);
73:     });
74:     it("throws error for invalid font color", () => {
75:       // Arrange
76:       const invalidProps = { fontColor: "invalid" };
77:       const expectedError = "Invalid font color. Use a hex value e.g. #030303";
78:       // Act & Assert
79:       expect(() => {
80:         render(<ReactMatrixAnimation {...invalidProps} />);
81:       }).toThrow(expectedError);
82:     });
83:   });
84: });
```

## File: src/__tests__/Animations/Matrix.utils.test.ts
```typescript
  1: import {
  2:   hexToRgb,
  3:   getRandomInt,
  4:   getRandomCharacter,
  5:   debounce,
  6: } from "@/components/Animations/Matrix.utils";
  7: describe("Matrix Utils", () => {
  8:   describe("hexToRgb", () => {
  9:     it("converts valid hex color to RGB", () => {
 10:       // Arrange
 11:       const hexColors = ["#ff0000", "#00ff00", "#0000ff", "#ffffff"];
 12:       const expectedResults = [
 13:         { r: 255, g: 0, b: 0 },
 14:         { r: 0, g: 255, b: 0 },
 15:         { r: 0, g: 0, b: 255 },
 16:         { r: 255, g: 255, b: 255 },
 17:       ];
 18:       // Act & Assert
 19:       hexColors.forEach((hex, index) => {
 20:         expect(hexToRgb(hex)).toEqual(expectedResults[index]);
 21:       });
 22:     });
 23:     it("returns null for invalid hex colors", () => {
 24:       // Arrange
 25:       const invalidHexColors = ["invalid", "#12", "#1234", "#12345"];
 26:       // Act & Assert
 27:       invalidHexColors.forEach((hex) => {
 28:         expect(hexToRgb(hex)).toBeNull();
 29:       });
 30:     });
 31:   });
 32:   describe("getRandomInt", () => {
 33:     it("returns a random integer within the range", () => {
 34:       // Arrange
 35:       const max = 10;
 36:       const mockGetRandomValues = jest
 37:         .spyOn(window.crypto, "getRandomValues")
 38:         .mockImplementation((array: Uint32Array) => {
 39:           array[0] = 123456789;
 40:           return array;
 41:         });
 42:       // Act
 43:       const result = getRandomInt(max);
 44:       // Assert
 45:       expect(result).toBe(9); // 123456789 % 10 = 9
 46:       expect(mockGetRandomValues).toHaveBeenCalledWith(expect.any(Uint32Array));
 47:       // Cleanup
 48:       mockGetRandomValues.mockRestore();
 49:     });
 50:   });
 51:   describe("getRandomCharacter", () => {
 52:     it("returns a character from the provided tileSet", () => {
 53:       // Arrange
 54:       const tileSet = ["A", "B", "C"];
 55:       const mockGetRandomInt = jest.spyOn(Math, "random").mockReturnValue(0.5);
 56:       // Act
 57:       const result = getRandomCharacter(tileSet);
 58:       // Assert
 59:       expect(tileSet).toContain(result);
 60:       mockGetRandomInt.mockRestore();
 61:     });
 62:     it("returns a random ASCII character when tileSet is null", () => {
 63:       // Arrange
 64:       const mockGetRandomInt = jest.spyOn(Math, "random").mockReturnValue(0.5);
 65:       // Act
 66:       const result = getRandomCharacter(null);
 67:       // Assert
 68:       expect(result).toMatch(/^[\x21-\x7E]$/); // ASCII printable characters
 69:       mockGetRandomInt.mockRestore();
 70:     });
 71:     it("returns a random ASCII character when tileSet is empty", () => {
 72:       // Arrange
 73:       const mockGetRandomInt = jest.spyOn(Math, "random").mockReturnValue(0.5);
 74:       // Act
 75:       const result = getRandomCharacter([]);
 76:       // Assert
 77:       expect(result).toMatch(/^[\x21-\x7E]$/); // ASCII printable characters
 78:       mockGetRandomInt.mockRestore();
 79:     });
 80:   });
 81:   describe("debounce", () => {
 82:     beforeEach(() => {
 83:       jest.useFakeTimers();
 84:     });
 85:     afterEach(() => {
 86:       jest.useRealTimers();
 87:     });
 88:     it("debounces function calls", () => {
 89:       // Arrange
 90:       const func = jest.fn();
 91:       const debouncedFunc = debounce(func, 100);
 92:       // Act
 93:       debouncedFunc();
 94:       debouncedFunc();
 95:       debouncedFunc();
 96:       expect(func).not.toHaveBeenCalled();
 97:       jest.runAllTimers();
 98:       // Assert
 99:       expect(func).toHaveBeenCalledTimes(1);
100:     });
101:     it("calls function with correct arguments", () => {
102:       // Arrange
103:       const func = jest.fn();
104:       const debouncedFunc = debounce(func, 100);
105:       const args = ["test", 123];
106:       // Act
107:       debouncedFunc(...args);
108:       jest.runAllTimers();
109:       // Assert
110:       expect(func).toHaveBeenCalledWith(...args);
111:     });
112:   });
113: });
```

## File: src/__tests__/Animations/MatrixCursor.test.tsx
```typescript
  1: import React, { useRef } from "react";
  2: import { render, fireEvent, cleanup } from "@testing-library/react";
  3: import "@testing-library/jest-dom";
  4: import MatrixCursor from "@/components/Animations/MatrixCursor.component";
  5: import { useMobile } from "@/hooks/useMobile";
  6: // Mock useMobile hook
  7: jest.mock("@/hooks/useMobile");
  8: const mockUseMobile = useMobile as jest.MockedFunction<typeof useMobile>;
  9: // Wrapper component to provide ref
 10: const TestWrapper = () => {
 11:   const heroRef = useRef<HTMLDivElement>(null);
 12:   return (
 13:     <>
 14:       <div ref={heroRef} data-testid="hero-section" />
 15:       <MatrixCursor heroRef={heroRef} />
 16:     </>
 17:   );
 18: };
 19: describe("MatrixCursor", () => {
 20:   beforeEach(() => {
 21:     // Default to desktop view
 22:     mockUseMobile.mockReturnValue(false);
 23:   });
 24:   afterEach(() => {
 25:     cleanup();
 26:     jest.clearAllMocks();
 27:   });
 28:   test("should not render when heroRef is null", () => {
 29:     // Arrange
 30:     const NullRefWrapper = () => {
 31:       const heroRef = useRef<HTMLDivElement>(null);
 32:       // Don't render the div, so heroRef.current will be null
 33:       return <MatrixCursor heroRef={heroRef} />;
 34:     };
 35:     // Act
 36:     const { queryByTestId } = render(<NullRefWrapper />);
 37:     // Assert
 38:     expect(queryByTestId("matrix-cursor")).not.toBeInTheDocument();
 39:   });
 40:   test("should not render on mobile devices", () => {
 41:     // Arrange
 42:     mockUseMobile.mockReturnValue(true);
 43:     // Act
 44:     const { queryByTestId } = render(<TestWrapper />);
 45:     // Assert
 46:     expect(queryByTestId("matrix-cursor")).not.toBeInTheDocument();
 47:   });
 48:   test("should update cursor position and styles on mousemove", () => {
 49:     // Arrange
 50:     const { getByTestId } = render(<TestWrapper />);
 51:     const heroSection = getByTestId("hero-section");
 52:     const expectedPosition = { x: 100, y: 200 };
 53:     // Act
 54:     fireEvent.mouseEnter(heroSection);
 55:     fireEvent.mouseMove(heroSection, {
 56:       clientX: expectedPosition.x,
 57:       clientY: expectedPosition.y,
 58:     });
 59:     const cursor = getByTestId("matrix-cursor");
 60:     // Assert
 61:     expect(cursor.style.getPropertyValue("--cursor-x")).toBe(
 62:       `${expectedPosition.x}px`,
 63:     );
 64:     expect(cursor.style.getPropertyValue("--cursor-y")).toBe(
 65:       `${expectedPosition.y}px`,
 66:     );
 67:   });
 68:   test("should add matrix-cursor class on mouseenter", () => {
 69:     // Arrange
 70:     const { getByTestId } = render(<TestWrapper />);
 71:     const heroSection = getByTestId("hero-section");
 72:     // Act
 73:     fireEvent.mouseEnter(heroSection);
 74:     const cursor = getByTestId("matrix-cursor");
 75:     // Assert
 76:     expect(cursor).toHaveClass("matrix-cursor");
 77:     expect(heroSection.style.cursor).toBe("none");
 78:   });
 79:   test("should remove matrix-cursor class on mouseleave", () => {
 80:     // Arrange
 81:     const { getByTestId } = render(<TestWrapper />);
 82:     const heroSection = getByTestId("hero-section");
 83:     // Act - First add the class
 84:     fireEvent.mouseEnter(heroSection);
 85:     const cursor = getByTestId("matrix-cursor");
 86:     // Assert initial state
 87:     expect(cursor).toHaveClass("matrix-cursor");
 88:     // Act - Then remove it
 89:     fireEvent.mouseLeave(heroSection);
 90:     // Assert final state
 91:     expect(cursor).not.toHaveClass("matrix-cursor");
 92:     expect(heroSection.style.cursor).toBe("");
 93:   });
 94:   test("should cleanup event listeners and cursor styles on unmount", () => {
 95:     // Arrange
 96:     const { getByTestId, unmount } = render(<TestWrapper />);
 97:     const heroSection = getByTestId("hero-section");
 98:     // Act - Set initial state
 99:     fireEvent.mouseEnter(heroSection);
100:     // Assert initial state
101:     expect(heroSection.style.cursor).toBe("none");
102:     // Act - Unmount component
103:     unmount();
104:     // Assert cleanup
105:     expect(heroSection.style.cursor).toBe("");
106:   });
107:   test("should create trail elements on mousemove when hovered", () => {
108:     // Arrange
109:     const { getByTestId, container } = render(<TestWrapper />);
110:     const heroSection = getByTestId("hero-section");
111:     const movePositions = [
112:       { x: 100, y: 100 },
113:       { x: 110, y: 110 },
114:       { x: 120, y: 120 },
115:     ];
116:     // Act - Enable trail creation
117:     fireEvent.mouseEnter(heroSection);
118:     // Act & Assert - Create and verify trails
119:     movePositions.forEach((pos, index) => {
120:       fireEvent.mouseMove(heroSection, { clientX: pos.x, clientY: pos.y });
121:       expect(container.getElementsByClassName("matrix-trail").length).toBe(
122:         index + 1,
123:       );
124:     });
125:   });
126:   test("should limit the number of trail elements", () => {
127:     // Arrange
128:     const { getByTestId, container } = render(<TestWrapper />);
129:     const heroSection = getByTestId("hero-section");
130:     const maxTrails = 20;
131:     const totalMoves = 25;
132:     // Act
133:     fireEvent.mouseEnter(heroSection);
134:     for (let i = 0; i < totalMoves; i++) {
135:       fireEvent.mouseMove(heroSection, { clientX: i * 10, clientY: i * 10 });
136:     }
137:     // Assert
138:     expect(
139:       container.getElementsByClassName("matrix-trail").length,
140:     ).toBeLessThanOrEqual(maxTrails);
141:   });
142:   test("should cleanup trail elements on mouseleave", () => {
143:     // Arrange
144:     const { getByTestId, container } = render(<TestWrapper />);
145:     const heroSection = getByTestId("hero-section");
146:     const trailCount = 5;
147:     // Act - Create trails
148:     fireEvent.mouseEnter(heroSection);
149:     for (let i = 0; i < trailCount; i++) {
150:       fireEvent.mouseMove(heroSection, { clientX: i * 10, clientY: i * 10 });
151:     }
152:     // Assert trails were created
153:     expect(
154:       container.getElementsByClassName("matrix-trail").length,
155:     ).toBeGreaterThan(0);
156:     // Act - Leave hero section
157:     fireEvent.mouseLeave(heroSection);
158:     // Assert trails were cleaned up
159:     expect(container.getElementsByClassName("matrix-trail").length).toBe(0);
160:   });
161:   test("should remove trail element when animation ends", () => {
162:     // Arrange
163:     const { getByTestId, container } = render(<TestWrapper />);
164:     const heroSection = getByTestId("hero-section");
165:     // Act - Create trail
166:     fireEvent.mouseEnter(heroSection);
167:     fireEvent.mouseMove(heroSection, { clientX: 100, clientY: 100 });
168:     // Assert trail was created
169:     const trailElements = container.getElementsByClassName("matrix-trail");
170:     expect(trailElements.length).toBe(1);
171:     // Act - Trigger animation end
172:     fireEvent.animationEnd(trailElements[0]);
173:     // Assert trail was removed
174:     expect(container.getElementsByClassName("matrix-trail").length).toBe(0);
175:   });
176: });
```

## File: src/__tests__/Animations/RotatingLoader.test.tsx
```typescript
 1: import React from "react";
 2: import { render } from "@testing-library/react";
 3: import "@testing-library/jest-dom";
 4: import RotatingLoader from "@/components/Animations/RotatingLoader.component";
 5: describe("RotatingLoader", () => {
 6:   describe("rendering", () => {
 7:     it("renders component structure with correct classes", () => {
 8:       // Arrange
 9:       const expectedClasses = {
10:         wrapper: "grid min-h-[140px] w-full place-items-center",
11:         svg: "animate-spin",
12:         paths: ["stroke-matrix-dark", "stroke-matrix-light"],
13:       };
14:       // Act
15:       const { container } = render(<RotatingLoader />);
16:       const wrapperDiv = container.firstChild;
17:       const svg = container.querySelector("svg");
18:       const paths = container.querySelectorAll("path");
19:       // Assert
20:       expect(wrapperDiv).toHaveClass(expectedClasses.wrapper);
21:       expect(svg).toBeInTheDocument();
22:       expect(svg).toHaveClass(expectedClasses.svg);
23:       expect(paths.length).toBe(2);
24:       expect(paths[0]).toHaveClass(expectedClasses.paths[0]);
25:       expect(paths[1]).toHaveClass(expectedClasses.paths[1]);
26:     });
27:   });
28:   describe("animations", () => {
29:     it("applies correct animation classes", () => {
30:       // Arrange
31:       const expectedAnimations = {
32:         glow: "animate-matrix-glow",
33:         spin: "animate-spin",
34:       };
35:       // Act
36:       const { container } = render(<RotatingLoader />);
37:       const glowContainer = container.querySelector(
38:         `.${expectedAnimations.glow}`,
39:       );
40:       const svg = container.querySelector("svg");
41:       // Assert
42:       expect(glowContainer).toBeInTheDocument();
43:       expect(svg).toHaveClass(expectedAnimations.spin);
44:     });
45:   });
46: });
```

## File: src/__tests__/Animations/TestAnimation.test.tsx
```typescript
 1: /**
 2:  * @jest-environment jsdom
 3:  */
 4: import React from "react";
 5: import { render, screen } from "@testing-library/react";
 6: import { mockIntersectionObserver } from "jsdom-testing-mocks";
 7: import PageTransition from "@/components/Animations/PageTransition.component";
 8: import FadeDown from "@/components/Animations/FadeDown.component";
 9: import FadeUp from "@/components/Animations/FadeUp.component";
10: import BounceInScroll from "@/components/Animations/BounceInScroll.component";
11: mockIntersectionObserver();
12: type AnimationComponent =
13:   | typeof PageTransition
14:   | typeof FadeDown
15:   | typeof FadeUp
16:   | typeof BounceInScroll;
17: /**
18:  * Reusable tests for animation components.
19:  *
20:  * @param {AnimationComponent} Component - The animation component to test.
21:  * @param {string} testId - The test ID for the component.
22:  * @param {string} expectedAttribute - The expected attribute value for the component.
23:  * @return {void} This function does not return anything.
24:  */
25: function testAnimationComponent(
26:   Component: AnimationComponent,
27:   testId: string,
28:   expectedAttribute: string,
29: ) {
30:   describe(Component.name, () => {
31:     // Arrange - Set up test data and conditions
32:     const testContent = Component.name;
33:     beforeEach(() => {
34:       // Act - Perform the action being tested
35:       let renderedComponent: ReturnType<typeof render>;
36:       renderedComponent = render(
37:         <Component delay={1}>{testContent}</Component>,
38:       );
39:     });
40:     it(`${Component.name} loads and can be displayed`, () => {
41:       // Arrange - Set up test data and conditions
42:       const expectedTestId = testId;
43:       // Act - Perform the action being tested
44:       const element = screen.getByTestId(expectedTestId);
45:       // Assert - Verify the results
46:       expect(element).toBeInTheDocument();
47:     });
48:     it(`Framer motion sets ${expectedAttribute}`, () => {
49:       // Arrange - Set up test data and conditions
50:       const expectedTestId = testId;
51:       // Act - Perform the action being tested
52:       const element = screen.getByTestId(expectedTestId);
53:       // Assert - Verify the results
54:       expect(element).toContainHTML(expectedAttribute);
55:     });
56:   });
57: }
58: testAnimationComponent(PageTransition, "pagetransition", "opacity: 0");
59: testAnimationComponent(FadeDown, "fadedown", "translateY");
60: testAnimationComponent(FadeUp, "fadeup", "translateY");
61: testAnimationComponent(BounceInScroll, "bounceinscroll", "translateY");
```

## File: src/__tests__/CV/CVContent.test.tsx
```typescript
 1: /**
 2:  * @jest-environment jsdom
 3:  */
 4: import React from "react";
 5: import { render, screen } from "@testing-library/react";
 6: import userEvent from "@testing-library/user-event";
 7: import CVContent from "@/components/CV/CVContent.component";
 8: const mockCVData = {
 9:   keyQualifications: ["Qualification 1", "Qualification 2"],
10:   experience: [
11:     {
12:       period: "2020-2022",
13:       company: "Example Company",
14:       role: "Software Developer",
15:       description: "Worked on various projects",
16:     },
17:   ],
18:   education: [
19:     {
20:       period: "2016-2020",
21:       institution: "University of Example",
22:       degree: "Bachelor in Computer Science",
23:       description: "Studied various aspects of computer science",
24:     },
25:   ],
26:   volunteerWork: [
27:     {
28:       period: "2023-2024",
29:       organization: "AI Community",
30:       role: "Technical Lead",
31:       description: "Managing AI Discord community and developing bots",
32:     },
33:   ],
34: };
35: describe("CVContent", () => {
36:   it("renders CV header and PDF download button", () => {
37:     // Arrange
38:     const expectedElements = {
39:       header: /cv/i,
40:       pdfButton: /last ned pdf/i,
41:     };
42:     // Act
43:     render(<CVContent cvData={mockCVData} />);
44:     // Assert
45:     expect(
46:       screen.getByRole("heading", { name: expectedElements.header }),
47:     ).toBeInTheDocument();
48:     expect(
49:       screen.getByRole("link", { name: expectedElements.pdfButton }),
50:     ).toBeInTheDocument();
51:   });
52:   it("renders all navigation tabs", () => {
53:     // Arrange
54:     const expectedTabs = [
55:       /nøkkelkvalifikasjoner/i,
56:       /erfaring/i,
57:       /utdanning/i,
58:       /frivillig arbeid/i,
59:     ];
60:     // Act
61:     render(<CVContent cvData={mockCVData} />);
62:     // Assert
63:     expectedTabs.forEach((tabName) => {
64:       expect(screen.getByRole("tab", { name: tabName })).toBeInTheDocument();
65:     });
66:   });
67:   it("displays qualifications in initial tab", () => {
68:     // Arrange
69:     const expectedQualification = /qualification 1/i;
70:     // Act
71:     render(<CVContent cvData={mockCVData} />);
72:     // Assert
73:     expect(screen.getByText(expectedQualification)).toBeInTheDocument();
74:   });
75:   it("displays volunteer work content when switching tabs", async () => {
76:     // Arrange
77:     const user = userEvent.setup();
78:     render(<CVContent cvData={mockCVData} />);
79:     const volunteerWorkTab = screen.getByRole("tab", {
80:       name: /frivillig arbeid/i,
81:     });
82:     const expectedContent = {
83:       role: /technical lead/i,
84:       organization: /ai community/i,
85:     };
86:     // Act
87:     await user.click(volunteerWorkTab);
88:     // Assert
89:     expect(await screen.findByText(expectedContent.role)).toBeInTheDocument();
90:     expect(
91:       await screen.findByText(expectedContent.organization),
92:     ).toBeInTheDocument();
93:   });
94: });
```

## File: src/__tests__/ErrorBoundary/ErrorBoundary.test.tsx
```typescript
 1: import React from "react";
 2: import { render } from "@testing-library/react";
 3: import "@testing-library/jest-dom";
 4: import ErrorBoundary from "@/components/ErrorBoundary/ErrorBoundary";
 5: describe("ErrorBoundary", () => {
 6:   let consoleErrorSpy;
 7:   const errorMock = new Error("Dette er en testfeil");
 8:   beforeAll(() => {
 9:     consoleErrorSpy = jest.spyOn(console, "error").mockImplementation(() => {});
10:   });
11:   afterAll(() => {
12:     consoleErrorSpy.mockRestore();
13:   });
14:   it("should render children when there is no error", () => {
15:     // Arrange
16:     const testContent = "Test Innhold";
17:     // Act
18:     const { getByText } = render(
19:       <ErrorBoundary>
20:         <div>{testContent}</div>
21:       </ErrorBoundary>,
22:     );
23:     // Assert
24:     expect(getByText(testContent)).toBeInTheDocument();
25:   });
26:   it("should render error fallback when there is an error", () => {
27:     // Arrange
28:     const ErrorComponent = () => {
29:       throw errorMock;
30:     };
31:     const expectedTexts = {
32:       heading: "Har du funnet en feil i Matrix?",
33:       error: "Dette er en testfeil",
34:       button: "Returner til Matrix",
35:     };
36:     // Act
37:     const { getByText } = render(
38:       <ErrorBoundary>
39:         <ErrorComponent />
40:       </ErrorBoundary>,
41:     );
42:     // Assert
43:     expect(getByText(expectedTexts.heading)).toBeInTheDocument();
44:     expect(getByText(expectedTexts.error)).toBeInTheDocument();
45:     expect(getByText(expectedTexts.button)).toBeInTheDocument();
46:   });
47:   it("should call console.error when an error occurs", () => {
48:     // Arrange
49:     const ErrorComponent = () => {
50:       throw errorMock;
51:     };
52:     const expectedErrorArgs = [
53:       "Uventet feil i Matrix:",
54:       errorMock,
55:       expect.any(Object),
56:     ];
57:     // Act
58:     render(
59:       <ErrorBoundary>
60:         <ErrorComponent />
61:       </ErrorBoundary>,
62:     );
63:     // Assert
64:     expect(consoleErrorSpy).toHaveBeenCalledWith(...expectedErrorArgs);
65:   });
66: });
```

## File: src/__tests__/ErrorBoundary/ErrorFallback.test.tsx
```typescript
  1: import React from "react";
  2: import { render, screen, fireEvent } from "@testing-library/react";
  3: import "@testing-library/jest-dom";
  4: import ErrorFallback from "@/components/ErrorBoundary/ErrorFallback.component";
  5: // Mock the Matrix component to avoid rendering issues in tests
  6: jest.mock("@/components/Animations/Matrix.component", () => {
  7:   return function DummyMatrix() {
  8:     return <div data-testid="matrix-animation" />;
  9:   };
 10: });
 11: describe("ErrorFallback", () => {
 12:   const mockError = new Error("Test error message");
 13:   beforeEach(() => {
 14:     // Mock window.location.reload
 15:     Object.defineProperty(window, "location", {
 16:       configurable: true,
 17:       value: { reload: jest.fn() },
 18:     });
 19:   });
 20:   it("renders error message and reload button", () => {
 21:     // Arrange
 22:     const expectedTexts = {
 23:       heading: "Har du funnet en feil i Matrix?",
 24:       error: "Test error message",
 25:       button: "Returner til Matrix",
 26:     };
 27:     // Act
 28:     render(<ErrorFallback error={mockError} />);
 29:     // Assert
 30:     expect(screen.getByText(expectedTexts.heading)).toBeInTheDocument();
 31:     expect(screen.getByText(expectedTexts.error)).toBeInTheDocument();
 32:     expect(screen.getByText(expectedTexts.button)).toBeInTheDocument();
 33:   });
 34:   it("displays default error message when error.message is undefined in full version", () => {
 35:     // Arrange
 36:     const errorWithoutMessage = new Error();
 37:     const expectedMessage = "En uventet feil har oppstått.";
 38:     // Act
 39:     render(<ErrorFallback error={errorWithoutMessage} />);
 40:     // Assert
 41:     expect(screen.getByText(expectedMessage)).toBeInTheDocument();
 42:   });
 43:   it("displays default error message when error.message is undefined in compact version", () => {
 44:     // Arrange
 45:     const errorWithoutMessage = new Error();
 46:     const expectedMessage = "En uventet feil har oppstått.";
 47:     // Act
 48:     render(<ErrorFallback error={errorWithoutMessage} compact={true} />);
 49:     // Assert
 50:     expect(screen.getByText(expectedMessage)).toBeInTheDocument();
 51:   });
 52:   it("renders compact version with correct styling", () => {
 53:     // Arrange
 54:     const expectedTexts = {
 55:       heading: "Har du funnet en feil i Matrix?",
 56:       error: "Test error message",
 57:       button: "Returner til Matrix",
 58:     };
 59:     // Act
 60:     render(<ErrorFallback error={mockError} compact={true} />);
 61:     // Assert
 62:     const container = screen
 63:       .getByTestId("matrix-animation")
 64:       .closest(".bg-gray-900");
 65:     expect(container).toHaveClass("bg-gray-900");
 66:     expect(container).toHaveClass("p-4");
 67:     expect(container).toHaveClass("rounded-lg");
 68:     expect(container).toHaveClass("overflow-hidden");
 69:     expect(screen.getByText(expectedTexts.heading)).toHaveClass("text-lg");
 70:     expect(screen.getByText(expectedTexts.error)).toHaveClass("text-sm");
 71:     const button = screen.getByRole("button");
 72:     expect(button).toHaveClass("bg-matrix-light");
 73:     expect(button).toHaveClass("text-black");
 74:     expect(button).toHaveClass("rounded");
 75:     expect(button).toHaveClass("text-sm");
 76:   });
 77:   it("renders full version with correct styling", () => {
 78:     // Arrange
 79:     const expectedTexts = {
 80:       heading: "Har du funnet en feil i Matrix?",
 81:       error: "Test error message",
 82:       button: "Returner til Matrix",
 83:     };
 84:     // Act
 85:     render(<ErrorFallback error={mockError} compact={false} />);
 86:     // Assert
 87:     const container = screen.getByTestId("matrix-animation").parentElement;
 88:     expect(container).toHaveClass("absolute", "w-full", "h-full");
 89:     expect(screen.getByText(expectedTexts.heading)).toHaveClass("text-5xl");
 90:     expect(screen.getByText(expectedTexts.error)).toHaveClass("text-xl");
 91:   });
 92:   it("reloads the page when reload button is clicked in compact mode", () => {
 93:     // Arrange
 94:     render(<ErrorFallback error={mockError} compact={true} />);
 95:     const reloadButton = screen.getByRole("button", {
 96:       name: "Returner til Matrix",
 97:     });
 98:     // Act
 99:     fireEvent.click(reloadButton);
100:     // Assert
101:     expect(window.location.reload).toHaveBeenCalledTimes(1);
102:   });
103:   it("reloads the page when reload button is clicked in full mode", () => {
104:     // Arrange
105:     render(<ErrorFallback error={mockError} compact={false} />);
106:     const reloadButton = screen.getByRole("button", {
107:       name: "Returner til Matrix",
108:     });
109:     // Act
110:     fireEvent.click(reloadButton);
111:     // Assert
112:     expect(window.location.reload).toHaveBeenCalledTimes(1);
113:   });
114: });
```

## File: src/__tests__/Index/Hero.test.tsx
```typescript
 1: /**
 2:  * @jest-environment jsdom
 3:  */
 4: import { render, screen } from "@testing-library/react";
 5: import "@testing-library/jest-dom";
 6: import Hero from "@/components/Index/Hero.component";
 7: import heromock from "../../__mocks__/hero.json";
 8: import { PortableTextBlock } from "@portabletext/types";
 9: describe("Hero", () => {
10:   it("Hero loads and displays content from mock", () => {
11:     // Arrange
12:     const mockContent = heromock.content;
13:     // Act
14:     render(<Hero content={mockContent} />);
15:     const hero = screen.getByText(/hei!/i);
16:     // Assert
17:     expect(hero).toBeInTheDocument();
18:   });
19:   it("renders default text when content array is empty", () => {
20:     // Arrange
21:     const emptyContent: PortableTextBlock[] = [];
22:     const expectedText = "Hei!";
23:     // Act
24:     render(<Hero content={emptyContent} />);
25:     const hero = screen.getByText(expectedText);
26:     // Assert
27:     expect(hero).toBeInTheDocument();
28:   });
29: });
```

## File: src/__tests__/Index/Icons.test.tsx
```typescript
 1: /**
 2:  * @jest-environment jsdom
 3:  */
 4: import { render, screen } from "@testing-library/react";
 5: import Icons from "@/components/Index/Icons.component";
 6: describe("Icons", () => {
 7:   it.each([
 8:     { name: "React", selector: () => screen.getByLabelText(/react ikon/i) },
 9:     { name: "Vue", selector: () => screen.getByLabelText(/vuejs/i) },
10:     {
11:       name: "TypeScript",
12:       selector: () => screen.getByRole("img", { name: /typescript ikon/i }),
13:     },
14:     {
15:       name: "WordPress",
16:       selector: () => screen.getByRole("img", { name: /wordpress ikon/i }),
17:     },
18:     { name: "PHP", selector: () => screen.getByLabelText(/php ikon/i) },
19:   ])("renders $name icon correctly", ({ selector }) => {
20:     // Arrange
21:     const expectedIcon = selector;
22:     // Act
23:     render(<Icons />);
24:     const icon = expectedIcon();
25:     // Assert
26:     expect(icon).toBeInTheDocument();
27:   });
28: });
```

## File: src/__tests__/Index/IndexContent.test.tsx
```typescript
 1: import React from "react";
 2: import { render, screen } from "@testing-library/react";
 3: import "@testing-library/jest-dom";
 4: import IndexContent from "@/components/Index/IndexContent.component";
 5: // Mock the Section component
 6: jest.mock("@/components/Index/Section.component", () => {
 7:   return function MockSection({ title, text }) {
 8:     return (
 9:       <div data-testid="mock-section">
10:         <h2 data-testid="sanity-title">{title}</h2>
11:         <div data-testid="portable-text">
12:           {text.map((block) => (
13:             <div key={block._key}>
14:               {block.children.map((child) => (
15:                 <span key={child._key}>{child.text}</span>
16:               ))}
17:             </div>
18:           ))}
19:         </div>
20:       </div>
21:     );
22:   };
23: });
24: const mockContent = [
25:   {
26:     id: "1",
27:     title: "Test Title 1",
28:     text: [
29:       {
30:         _key: "a",
31:         _type: "block",
32:         children: [
33:           { _key: "a1", _type: "span", marks: ["bold"], text: "Bold Text" },
34:           { _key: "a2", _type: "span", marks: [], text: " Normal Text" },
35:         ],
36:         markDefs: [],
37:         style: "normal",
38:       },
39:     ],
40:   },
41:   {
42:     id: "2",
43:     title: "Test Title 2",
44:     text: [
45:       {
46:         _key: "b",
47:         _type: "block",
48:         children: [
49:           { _key: "b1", _type: "span", marks: ["italic"], text: "Italic Text" },
50:         ],
51:         markDefs: [],
52:         style: "normal",
53:       },
54:     ],
55:   },
56: ];
57: describe("IndexContent Component", () => {
58:   it("renders IndexContent with given content", () => {
59:     // Arrange
60:     const expected = {
61:       sectionCount: 2,
62:       titles: ["Test Title 1", "Test Title 2"],
63:       content: ["Bold Text Normal Text", "Italic Text"],
64:     };
65:     // Act
66:     render(<IndexContent pageContent={mockContent} />);
67:     const sections = screen.getAllByTestId("mock-section");
68:     const titles = screen.getAllByTestId("sanity-title");
69:     const portableTexts = screen.getAllByTestId("portable-text");
70:     // Assert
71:     expect(sections).toHaveLength(expected.sectionCount);
72:     expect(titles[0]).toHaveTextContent(expected.titles[0]);
73:     expect(titles[1]).toHaveTextContent(expected.titles[1]);
74:     expect(portableTexts[0]).toHaveTextContent(expected.content[0]);
75:     expect(portableTexts[1]).toHaveTextContent(expected.content[1]);
76:   });
77:   it("throws error when no content is provided", () => {
78:     // Arrange
79:     const emptyContent = [];
80:     const expectedError = "Ingen innhold tilgjengelig";
81:     // Act & Assert
82:     expect(() => {
83:       render(<IndexContent pageContent={emptyContent} />);
84:     }).toThrow(expectedError);
85:   });
86: });
```

## File: src/__tests__/Index/Section.test.tsx
```typescript
 1: /// <reference types="@testing-library/jest-dom" />
 2: import React from "react";
 3: import { render, screen, fireEvent } from "@testing-library/react";
 4: import "@testing-library/jest-dom";
 5: import Section from "@/components/Index/Section.component";
 6: import { PortableText } from "@portabletext/react";
 7: import { myPortableTextComponents } from "@/utils/portableTextComponents";
 8: // Mock the BounceInScroll component
 9: jest.mock("@/components/Animations/BounceInScroll.component", () => {
10:   return ({ children }: { children: React.ReactNode }) => <div>{children}</div>;
11: });
12: // Mock the PortableText component
13: jest.mock("@portabletext/react", () => ({
14:   PortableText: jest.fn(() => null),
15: }));
16: describe("Section Component", () => {
17:   const mockProps = {
18:     title: "Test Title",
19:     text: [
20:       {
21:         _key: "1",
22:         _type: "block",
23:         children: [
24:           { _key: "2", _type: "span", text: "Test content", marks: [] },
25:         ],
26:         markDefs: [],
27:         style: "normal",
28:       },
29:     ],
30:   };
31:   const originalEnv = process.env;
32:   beforeEach(() => {
33:     jest.clearAllMocks();
34:     process.env = { ...originalEnv };
35:   });
36:   afterEach(() => {
37:     process.env = originalEnv;
38:   });
39:   it("renders with valid props", () => {
40:     // Arrange - Set up test data and conditions
41:     const props = mockProps;
42:     // Act - Perform the action being tested
43:     render(<Section {...props} />);
44:     // Assert - Verify the results
45:     expect(screen.getByText("Test Title")).toBeInTheDocument();
46:     const mockCall = (PortableText as jest.Mock).mock.calls[0][0];
47:     expect(mockCall).toEqual({
48:       value: mockProps.text,
49:       components: myPortableTextComponents,
50:     });
51:   });
52:   it("returns null with invalid props", () => {
53:     // Arrange - Set up test data and conditions
54:     const consoleErrorSpy = jest
55:       .spyOn(console, "error")
56:       .mockImplementation(() => {});
57:     // Act - Perform the action being tested
58:     const { container } = render(<Section title="" text={[]} />);
59:     // Assert - Verify the results
60:     expect(container.firstChild).toBeNull();
61:     expect(consoleErrorSpy).toHaveBeenCalled();
62:     consoleErrorSpy.mockRestore();
63:   });
64:   it("triggers error in development mode", () => {
65:     // Arrange - Set up test data and conditions
66:     process.env = { ...originalEnv, NODE_ENV: "development" };
67:     // Act - Perform the action being tested
68:     render(<Section {...mockProps} />);
69:     const errorButton = screen.getByText("Utløs Testfeil");
70:     // Assert - Verify the results
71:     expect(errorButton).toBeInTheDocument();
72:     expect(() => fireEvent.click(errorButton)).toThrow(
73:       "En uventet feil har oppstått",
74:     );
75:   });
76:   it("does not show error button in production mode", () => {
77:     // Arrange - Set up test data and conditions
78:     process.env = { ...originalEnv, NODE_ENV: "production" };
79:     // Act - Perform the action being tested
80:     render(<Section {...mockProps} />);
81:     // Assert - Verify the results
82:     expect(screen.queryByText("Utløs Testfeil")).not.toBeInTheDocument();
83:   });
84: });
```

## File: src/__tests__/Kontakt/KontaktContent.test.tsx
```typescript
  1: /**
  2:  * @jest-environment jsdom
  3:  */
  4: import { fireEvent, render, screen, waitFor } from "@testing-library/react";
  5: import KontaktContent from "@/components/Kontakt/KontaktContent.component";
  6: import emailjs from "@emailjs/browser";
  7: jest.mock("@emailjs/browser", () => ({
  8:   send: jest.fn(() => Promise.resolve()),
  9:   init: jest.fn(),
 10: }));
 11: describe("KontaktContent", () => {
 12:   const fulltNavn = "Fullt navn";
 13:   const telefonNummer = "Telefonnummer";
 14:   const hvaOnskerDu = "Hva ønsker du å si?";
 15:   const sendSkjemaText = "Send skjema";
 16:   beforeEach(() => {
 17:     jest.clearAllMocks();
 18:   });
 19:   const fillFormWithValidData = () => {
 20:     fireEvent.change(screen.getByLabelText(fulltNavn), {
 21:       target: { value: "Bruker Test" },
 22:     });
 23:     fireEvent.change(screen.getByLabelText(telefonNummer), {
 24:       target: { value: "12345678" },
 25:     });
 26:     fireEvent.change(screen.getByLabelText(hvaOnskerDu), {
 27:       target: { value: "Test melding" },
 28:     });
 29:   };
 30:   it("renders the component", () => {
 31:     // Arrange
 32:     const expectedTestId = "kontaktcontent";
 33:     // Act
 34:     render(<KontaktContent />);
 35:     // Assert
 36:     expect(screen.getByTestId(expectedTestId)).toBeInTheDocument();
 37:   });
 38:   it("submits the form successfully and disables submit button while submitting", async () => {
 39:     // Arrange
 40:     render(<KontaktContent />);
 41:     const submitButton = screen.getByText(sendSkjemaText);
 42:     // Act
 43:     fillFormWithValidData();
 44:     fireEvent.click(submitButton);
 45:     // Assert - Initial state
 46:     expect(submitButton).toBeDisabled();
 47:     // Assert - Final state
 48:     await waitFor(() => {
 49:       expect(screen.getByText("Takk for din beskjed")).toBeInTheDocument();
 50:       expect(emailjs.send).toHaveBeenCalledTimes(1);
 51:     });
 52:   });
 53:   it("displays error message on form submission failure", async () => {
 54:     // Arrange
 55:     emailjs.send.mockRejectedValueOnce(new Error("Test error"));
 56:     render(<KontaktContent />);
 57:     // Act
 58:     fillFormWithValidData();
 59:     fireEvent.click(screen.getByText(sendSkjemaText));
 60:     // Assert
 61:     await waitFor(() => {
 62:       expect(
 63:         screen.getByText("Feil under sending av skjema"),
 64:       ).toBeInTheDocument();
 65:       expect(emailjs.send).toHaveBeenCalledTimes(1);
 66:     });
 67:   });
 68:   it("displays validation errors for empty fields", async () => {
 69:     // Arrange
 70:     render(<KontaktContent />);
 71:     const expectedErrors = {
 72:       name: "Fullt navn er påkrevd",
 73:       phone: "Telefonnummer er påkrevd",
 74:       message: "Beskjed er påkrevd",
 75:     };
 76:     // Act
 77:     fireEvent.click(screen.getByText(sendSkjemaText));
 78:     // Assert
 79:     await waitFor(() => {
 80:       expect(screen.getByText(expectedErrors.name)).toBeInTheDocument();
 81:       expect(screen.getByText(expectedErrors.phone)).toBeInTheDocument();
 82:       expect(screen.getByText(expectedErrors.message)).toBeInTheDocument();
 83:       expect(emailjs.send).not.toHaveBeenCalled();
 84:     });
 85:   });
 86:   it("displays validation errors for invalid inputs", async () => {
 87:     // Arrange
 88:     render(<KontaktContent />);
 89:     const invalidInputs = {
 90:       name: "User123", // Invalid name format
 91:       phone: "123", // Invalid phone number
 92:       message: "Test melding",
 93:     };
 94:     const expectedErrors = {
 95:       name: "Vennligst bruk norske bokstaver",
 96:       phone: "Vennligst oppgi et gyldig telefonnummer",
 97:     };
 98:     // Act
 99:     fireEvent.change(screen.getByLabelText(fulltNavn), {
100:       target: { value: invalidInputs.name },
101:     });
102:     fireEvent.change(screen.getByLabelText(telefonNummer), {
103:       target: { value: invalidInputs.phone },
104:     });
105:     fireEvent.change(screen.getByLabelText(hvaOnskerDu), {
106:       target: { value: invalidInputs.message },
107:     });
108:     fireEvent.click(screen.getByText(sendSkjemaText));
109:     // Assert
110:     await waitFor(() => {
111:       expect(screen.getByText(expectedErrors.name)).toBeInTheDocument();
112:       expect(screen.getByText(expectedErrors.phone)).toBeInTheDocument();
113:       expect(emailjs.send).not.toHaveBeenCalled();
114:     });
115:   });
116: });
```

## File: src/__tests__/Layout/Footer.test.tsx
```typescript
 1: /**
 2:  * @jest-environment jsdom
 3:  */
 4: import { render, screen } from "@testing-library/react";
 5: import Footer from "@/components/Layout/Footer.component";
 6: describe("Footer", () => {
 7:   it("renders footer with copyright text", () => {
 8:     // Arrange
 9:     const expectedText = /copyright daniel/i;
10:     // Act
11:     render(<Footer />);
12:     const footer = screen.getByText(expectedText);
13:     // Assert
14:     expect(footer).toBeInTheDocument();
15:   });
16: });
```

## File: src/__tests__/Layout/Header.test.tsx
```typescript
 1: /**
 2:  * @jest-environment jsdom
 3:  */
 4: import { render, screen } from "@testing-library/react";
 5: import Header from "@/components/Layout/Header.component";
 6: // Mock the usePathname hook
 7: jest.mock("next/navigation", () => ({
 8:   usePathname: () => "/",
 9: }));
10: // Mock the MobileMenu component
11: jest.mock("@/components/Layout/MobileMenu.component", () => {
12:   return function MockMobileMenu({ links }: { links: any[] }) {
13:     return <div data-testid="mobile-menu">Mobile Menu</div>;
14:   };
15: });
16: describe("Header", () => {
17:   const mockNavigationLinks = [
18:     { name: "Hjem", href: "/", title: "Hjem", hash: "", externalLink: false },
19:     {
20:       name: "Prosjekter",
21:       href: "/prosjekter",
22:       title: "Prosjekter",
23:       hash: "",
24:       externalLink: false,
25:     },
26:     { name: "CV", href: "/cv", title: "CV", hash: "", externalLink: false },
27:     {
28:       name: "Kontakt",
29:       href: "/kontakt",
30:       title: "Kontakt",
31:       hash: "",
32:       externalLink: false,
33:     },
34:   ];
35:   describe("rendering", () => {
36:     it("renders header container", () => {
37:       // Arrange
38:       const expectedRole = "banner";
39:       // Act
40:       render(<Header navigationLinks={mockNavigationLinks} />);
41:       const header = screen.getByRole(expectedRole);
42:       // Assert
43:       expect(header).toBeInTheDocument();
44:     });
45:     it("renders all navigation links with correct attributes", () => {
46:       // Arrange
47:       render(<Header navigationLinks={mockNavigationLinks} />);
48:       // Act & Assert
49:       mockNavigationLinks.forEach((link) => {
50:         const linkElement = screen.getByText(link.name);
51:         expect(linkElement).toBeInTheDocument();
52:         expect(linkElement.closest("a")).toHaveAttribute("href", link.href);
53:       });
54:     });
55:     it("renders mobile menu component", () => {
56:       // Arrange
57:       const expectedTestId = "mobile-menu";
58:       // Act
59:       render(<Header navigationLinks={mockNavigationLinks} />);
60:       const mobileMenu = screen.getByTestId(expectedTestId);
61:       // Assert
62:       expect(mobileMenu).toBeInTheDocument();
63:     });
64:   });
65: });
```

## File: src/__tests__/Layout/MobileMenu.test.tsx
```typescript
  1: /**
  2:  * @jest-environment jsdom
  3:  */
  4: import { fireEvent, render, screen, cleanup } from "@testing-library/react";
  5: import userEvent from "@testing-library/user-event";
  6: import { usePathname } from "next/navigation";
  7: import MobileMenu from "@/components/Layout/MobileMenu.component";
  8: import linksmock from "../../__mocks__/links.json";
  9: // Mock next/navigation
 10: jest.mock("next/navigation", () => ({
 11:   usePathname: jest.fn(),
 12: }));
 13: const mockUsePathname = usePathname as jest.MockedFunction<typeof usePathname>;
 14: describe("MobileMenu - elementer eksisterer", () => {
 15:   const testidMenu = "mobile-menu";
 16:   beforeEach(() => {
 17:     // Default to home page
 18:     mockUsePathname.mockReturnValue("/");
 19:     render(<MobileMenu links={linksmock} />);
 20:   });
 21:   afterEach(() => {
 22:     jest.clearAllMocks();
 23:   });
 24:   it("renders mobile menu when hamburger is clicked", () => {
 25:     // Arrange
 26:     const hamburger = screen.getByTestId("hamburger");
 27:     // Act
 28:     fireEvent.click(hamburger);
 29:     const mobilemenu = screen.getByTestId(testidMenu);
 30:     // Assert
 31:     expect(mobilemenu).toBeInTheDocument();
 32:   });
 33:   it("toggles hamburger menu expansion state", () => {
 34:     // Arrange
 35:     const hamburger = screen.getByTestId("hamburger");
 36:     // Assert - Initial state
 37:     expect(
 38:       screen.getByRole("button", { name: /hamburger/i, expanded: false }),
 39:     ).toBeInTheDocument();
 40:     // Act - Open menu
 41:     fireEvent.click(hamburger);
 42:     // Assert - Open state
 43:     expect(
 44:       screen.getByRole("button", { name: /hamburger/i, expanded: true }),
 45:     ).toBeInTheDocument();
 46:     // Act - Close menu
 47:     fireEvent.click(hamburger);
 48:     // Assert - Closed state
 49:     expect(
 50:       screen.getByRole("button", { name: /hamburger/i, expanded: false }),
 51:     ).toBeInTheDocument();
 52:   });
 53:   it("displays correct number of navigation links", () => {
 54:     // Arrange
 55:     const hamburger = screen.getByTestId("hamburger");
 56:     // Act
 57:     fireEvent.click(hamburger);
 58:     const menuItems = screen.getAllByRole("link");
 59:     // Assert
 60:     expect(menuItems.length).toBe(linksmock.length);
 61:   });
 62:   it("renders internal links with correct active state", () => {
 63:     // Arrange
 64:     cleanup(); // Clean up previous renders
 65:     const currentPath = "/prosjekter";
 66:     mockUsePathname.mockReturnValue(currentPath);
 67:     const { getByTestId } = render(<MobileMenu links={linksmock} />);
 68:     const hamburger = getByTestId("hamburger");
 69:     // Act
 70:     fireEvent.click(hamburger);
 71:     // Assert
 72:     linksmock.forEach((link) => {
 73:       if (!link.externalLink) {
 74:         const linkElement = screen.getByTestId(`mobil-${link.name}`);
 75:         if (link.href === currentPath) {
 76:           expect(linkElement).toHaveClass("text-green-400");
 77:           const underline = linkElement.querySelector("span");
 78:           expect(underline).toHaveClass("bg-green-400");
 79:         } else {
 80:           expect(linkElement).not.toHaveClass("text-green-400");
 81:           const underline = linkElement.querySelector("span");
 82:           expect(underline).toHaveClass("bg-white");
 83:         }
 84:       }
 85:     });
 86:   });
 87:   it("renders internal links with glitch effect", () => {
 88:     // Arrange
 89:     const hamburger = screen.getByTestId("hamburger");
 90:     // Act
 91:     fireEvent.click(hamburger);
 92:     // Assert
 93:     linksmock.forEach((link) => {
 94:       if (!link.externalLink) {
 95:         const linkElement = screen.getByTestId(`mobil-${link.name}`);
 96:         const glitchElement = linkElement.querySelector(".glitch");
 97:         expect(glitchElement).toBeInTheDocument();
 98:         expect(glitchElement).toHaveAttribute("data-text", link.name);
 99:       }
100:     });
101:   });
102:   it("opens external links in new tab with correct attributes", () => {
103:     // Arrange
104:     const hamburger = screen.getByTestId("hamburger");
105:     // Act
106:     fireEvent.click(hamburger);
107:     const externalLink = screen.getByRole("link", { name: /github/i });
108:     // Assert
109:     expect(externalLink).toHaveAttribute("target", "_blank");
110:     expect(externalLink).toHaveAttribute("rel", "noreferrer");
111:   });
112:   it("closes menu when clicking outside", async () => {
113:     // Arrange
114:     const user = userEvent.setup();
115:     const hamburger = screen.getByTestId("hamburger");
116:     // Act - Open menu
117:     await user.click(hamburger);
118:     // Assert - Menu is open
119:     expect(screen.getByTestId(testidMenu)).toBeInTheDocument();
120:     // Act - Close menu
121:     await user.click(document.body);
122:     // Assert - Menu is closed
123:     expect(screen.getByTestId("hamburger")).toHaveAttribute(
124:       "aria-expanded",
125:       "false",
126:     );
127:   });
128: });
```

## File: src/__tests__/Prosjekter/actions.test.ts
```typescript
 1: import { getProjects } from "@/app/prosjekter/actions";
 2: import { client } from "@/lib/sanity/client";
 3: import { projectsQuery } from "@/lib/sanity/queries";
 4: // Mock the Sanity client
 5: jest.mock("@/lib/sanity/client", () => ({
 6:   client: {
 7:     fetch: jest.fn(),
 8:   },
 9: }));
10: describe("getProjects", () => {
11:   beforeEach(() => {
12:     jest.clearAllMocks();
13:   });
14:   it("fetches projects successfully", async () => {
15:     // Arrange
16:     const mockProjects = [
17:       {
18:         id: "1",
19:         name: "Test Project",
20:         description: "Test Description",
21:         subdescription: "Test Subdescription",
22:         projectimage: { asset: { _ref: "test" } },
23:         urlwww: [],
24:         urlgithub: [],
25:       },
26:     ];
27:     const expectedFetchOptions = {
28:       next: { revalidate: 3600 },
29:     };
30:     (client.fetch as jest.Mock).mockResolvedValueOnce(mockProjects);
31:     // Act
32:     const result = await getProjects();
33:     // Assert
34:     expect(result).toEqual(mockProjects);
35:     expect(client.fetch).toHaveBeenCalledWith(
36:       projectsQuery,
37:       {},
38:       expectedFetchOptions,
39:     );
40:   });
41:   it("handles fetch error correctly", async () => {
42:     // Arrange
43:     const expectedError = new Error("Fetch failed");
44:     (client.fetch as jest.Mock).mockRejectedValueOnce(expectedError);
45:     // Act & Assert
46:     await expect(getProjects()).rejects.toThrow("Failed to fetch projects");
47:   });
48: });
```

## File: src/__tests__/Prosjekter/error.test.tsx
```typescript
 1: import React from "react";
 2: import { render, screen, fireEvent } from "@testing-library/react";
 3: import "@testing-library/jest-dom";
 4: import ErrorBoundary from "@/app/prosjekter/error";
 5: // Mock React's useEffect
 6: const mockUseEffect = jest.fn();
 7: jest.mock("react", () => ({
 8:   ...jest.requireActual("react"),
 9:   useEffect: (cb: () => void) => mockUseEffect(cb),
10: }));
11: describe("ErrorBoundary", () => {
12:   const mockReset = jest.fn();
13:   const mockError = new Error("Test error") as Error & { digest?: string };
14:   const mockProps = { error: mockError, reset: mockReset };
15:   beforeEach(() => {
16:     jest.clearAllMocks();
17:   });
18:   it("renders error message and retry button", () => {
19:     // Arrange
20:     const expectedTexts = {
21:       errorMessage: "Noe gikk galt ved lasting av prosjekter",
22:       buttonText: "Prøv igjen",
23:     };
24:     // Act
25:     render(<ErrorBoundary {...mockProps} />);
26:     // Assert
27:     expect(screen.getByText(expectedTexts.errorMessage)).toBeInTheDocument();
28:     expect(
29:       screen.getByRole("button", { name: expectedTexts.buttonText }),
30:     ).toBeInTheDocument();
31:   });
32:   it("calls reset when retry button is clicked", () => {
33:     // Arrange
34:     render(<ErrorBoundary {...mockProps} />);
35:     const retryButton = screen.getByRole("button", { name: "Prøv igjen" });
36:     // Act
37:     fireEvent.click(retryButton);
38:     // Assert
39:     expect(mockReset).toHaveBeenCalledTimes(1);
40:   });
41:   it("calls useEffect with error logging", () => {
42:     // Arrange
43:     render(<ErrorBoundary {...mockProps} />);
44:     const [effectCallback] = mockUseEffect.mock.calls[0];
45:     // Act
46:     effectCallback();
47:     // Assert
48:     expect(mockUseEffect).toHaveBeenCalled();
49:   });
50: });
```

## File: src/__tests__/Prosjekter/loading.test.tsx
```typescript
 1: import React from "react";
 2: import { render, screen } from "@testing-library/react";
 3: import "@testing-library/jest-dom";
 4: import Loading from "@/app/prosjekter/loading";
 5: // Mock the components used in Loading
 6: jest.mock("@/components/UI/PageHeader.component", () => {
 7:   return function MockPageHeader({ children }: { children: React.ReactNode }) {
 8:     return <h1>{children}</h1>;
 9:   };
10: });
11: jest.mock("@/components/Animations/RotatingLoader.component", () => {
12:   return function MockRotatingLoader() {
13:     return <div data-testid="rotating-loader">Loading...</div>;
14:   };
15: });
16: jest.mock("@/app/RootLayout", () => {
17:   return function MockRootLayout({ children }: { children: React.ReactNode }) {
18:     return <div>{children}</div>;
19:   };
20: });
21: describe("Loading", () => {
22:   describe("rendering", () => {
23:     it("renders loading state with correct content and attributes", () => {
24:       // Arrange
25:       const expected = {
26:         header: "Prosjekter",
27:         testId: "rotating-loader",
28:         mainAttributes: {
29:           ariaLabel: "Laster portefølje",
30:           classes: ["mt-32", "bg-graybg"],
31:         },
32:       };
33:       // Act
34:       render(<Loading />);
35:       const main = screen.getByRole("main");
36:       // Assert
37:       expect(screen.getByText(expected.header)).toBeInTheDocument();
38:       expect(screen.getByTestId(expected.testId)).toBeInTheDocument();
39:       expect(main).toHaveAttribute(
40:         "aria-label",
41:         expected.mainAttributes.ariaLabel,
42:       );
43:       expected.mainAttributes.classes.forEach((className) => {
44:         expect(main).toHaveClass(className);
45:       });
46:     });
47:   });
48: });
```

## File: src/__tests__/Prosjekter/page.test.tsx
```typescript
 1: import React from "react";
 2: import { render, screen } from "@testing-library/react";
 3: import "@testing-library/jest-dom";
 4: import ProsjekterPage from "@/app/prosjekter/page";
 5: import { getProjects } from "@/app/prosjekter/actions";
 6: // Mock the components and functions
 7: jest.mock("@/app/prosjekter/actions");
 8: jest.mock("@/components/UI/PageHeader.component", () => {
 9:   return function MockPageHeader({ children }: { children: React.ReactNode }) {
10:     return <h1>{children}</h1>;
11:   };
12: });
13: jest.mock("@/components/Prosjekter/ProsjektCard.component", () => {
14:   return function MockProsjektCard(props: { name: string }) {
15:     return <div data-testid="project-card">{props.name}</div>;
16:   };
17: });
18: jest.mock("@/components/Animations/RotatingLoader.component", () => {
19:   return function MockRotatingLoader() {
20:     return <div data-testid="rotating-loader">Loading...</div>;
21:   };
22: });
23: jest.mock("@/app/RootLayout", () => {
24:   return function MockRootLayout({ children }: { children: React.ReactNode }) {
25:     return <div>{children}</div>;
26:   };
27: });
28: describe("ProsjekterPage", () => {
29:   beforeEach(() => {
30:     jest.clearAllMocks();
31:   });
32:   it("renders projects from server component", async () => {
33:     // Arrange - Set up test data and conditions
34:     const mockProjects = [
35:       {
36:         id: "1",
37:         name: "Test Project 1",
38:         description: "Test Description 1",
39:         subdescription: "Test Subdescription 1",
40:         projectimage: { asset: { _ref: "test1" } },
41:         urlwww: [],
42:         urlgithub: [],
43:       },
44:       {
45:         id: "2",
46:         name: "Test Project 2",
47:         description: "Test Description 2",
48:         subdescription: "Test Subdescription 2",
49:         projectimage: { asset: { _ref: "test2" } },
50:         urlwww: [],
51:         urlgithub: [],
52:       },
53:     ];
54:     (getProjects as jest.Mock).mockResolvedValue(mockProjects);
55:     // Act - Perform the action being tested
56:     const { container } = render(await ProsjekterPage());
57:     // Assert - Verify the results
58:     expect(screen.getByText("Prosjekter")).toBeInTheDocument();
59:     const projectCards = screen.getAllByTestId("project-card");
60:     expect(projectCards).toHaveLength(2);
61:     expect(projectCards[0]).toHaveTextContent("Test Project 1");
62:     expect(projectCards[1]).toHaveTextContent("Test Project 2");
63:     const grid = container.querySelector(".grid");
64:     expect(grid).toHaveClass("grid-cols-1", "xl:grid-cols-2", "gap-8");
65:   });
66:   it("uses Suspense boundary for loading state", async () => {
67:     // Arrange - Set up test data and conditions
68:     (getProjects as jest.Mock).mockResolvedValue([]);
69:     // Act - Perform the action being tested
70:     render(await ProsjekterPage());
71:     // Assert - Verify the results
72:     const main = screen.getByRole("main");
73:     expect(main).toHaveAttribute("aria-label", "Innhold portefølje");
74:     expect(main).toContainElement(screen.getByText("Prosjekter"));
75:   });
76: });
```

## File: src/__tests__/Prosjekter/ProsjektCard.test.tsx
```typescript
  1: import React from "react";
  2: import { render, screen } from "@testing-library/react";
  3: import { mockIntersectionObserver } from "jsdom-testing-mocks";
  4: import ProsjektCard from "@/components/Prosjekter/ProsjektCard.component";
  5: mockIntersectionObserver();
  6: // Mock the Button component
  7: jest.mock("@/components/UI/Button.component", () => ({ href, children }) => (
  8:   <a href={href}>{children}</a>
  9: ));
 10: // Mock the urlFor function
 11: jest.mock("@/lib/sanity/helpers", () => ({
 12:   urlFor: jest.fn().mockReturnValue({
 13:     url: jest.fn().mockReturnValue("test-image.jpg"),
 14:   }),
 15: }));
 16: const mockProjectProps = {
 17:   id: "1",
 18:   name: "Test Project",
 19:   description: "This is a test project",
 20:   subdescription: "This is a subdescription",
 21:   projectimage: {
 22:     asset: {
 23:       _ref: "image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg",
 24:     },
 25:   },
 26:   urlwww: [{ url: "https://example.com", _key: "1" }],
 27:   urlgithub: [{ url: "https://github.com/example", _key: "1" }],
 28: };
 29: describe("ProsjektCard", () => {
 30:   describe("rendering project content", () => {
 31:     it("renders basic project information", () => {
 32:       // Arrange
 33:       const expectedContent = {
 34:         name: "Test Project",
 35:         description: "This is a test project",
 36:         subdescription: "This is a subdescription",
 37:       };
 38:       // Act
 39:       render(<ProsjektCard {...mockProjectProps} />);
 40:       // Assert
 41:       expect(screen.getByText(expectedContent.name)).toBeInTheDocument();
 42:       expect(screen.getByText(expectedContent.description)).toBeInTheDocument();
 43:       expect(
 44:         screen.getByText(expectedContent.subdescription),
 45:       ).toBeInTheDocument();
 46:     });
 47:     it("renders project image with correct attributes", () => {
 48:       // Arrange
 49:       const expectedImage = {
 50:         alt: "Test Project",
 51:         src: "test-image.jpg",
 52:       };
 53:       // Act
 54:       render(<ProsjektCard {...mockProjectProps} />);
 55:       const img = screen.getByAltText(expectedImage.alt);
 56:       // Assert
 57:       expect(img).toBeInTheDocument();
 58:       expect(img).toHaveAttribute("src", expectedImage.src);
 59:     });
 60:     it("renders navigation buttons with correct hrefs", () => {
 61:       // Arrange
 62:       const expectedLinks = {
 63:         visit: {
 64:           text: "Besøk",
 65:           href: "https://example.com",
 66:         },
 67:         github: {
 68:           text: "GitHub",
 69:           href: "https://github.com/example",
 70:         },
 71:       };
 72:       // Act
 73:       render(<ProsjektCard {...mockProjectProps} />);
 74:       const visitButton = screen.getByText(expectedLinks.visit.text);
 75:       const githubButton = screen.getByText(expectedLinks.github.text);
 76:       // Assert
 77:       expect(visitButton).toBeInTheDocument();
 78:       expect(visitButton.closest("a")).toHaveAttribute(
 79:         "href",
 80:         expectedLinks.visit.href,
 81:       );
 82:       expect(githubButton).toBeInTheDocument();
 83:       expect(githubButton.closest("a")).toHaveAttribute(
 84:         "href",
 85:         expectedLinks.github.href,
 86:       );
 87:     });
 88:   });
 89:   describe("conditional rendering", () => {
 90:     it("does not render navigation buttons when urls are not provided", () => {
 91:       // Arrange
 92:       const propsWithoutUrls = {
 93:         ...mockProjectProps,
 94:         urlwww: [],
 95:         urlgithub: [],
 96:       };
 97:       const buttonTexts = ["Besøk", "GitHub"];
 98:       // Act
 99:       render(<ProsjektCard {...propsWithoutUrls} />);
100:       // Assert
101:       buttonTexts.forEach((text) => {
102:         expect(screen.queryByText(text)).not.toBeInTheDocument();
103:       });
104:     });
105:   });
106: });
```

## File: src/__tests__/UI/Button.test.tsx
```typescript
 1: /**
 2:  * @jest-environment jsdom
 3:  */
 4: import { render, screen } from "@testing-library/react";
 5: import userEvent from "@testing-library/user-event";
 6: import Button from "@/components/UI/Button.component";
 7: describe("Button", () => {
 8:   describe("Button Component", () => {
 9:     it("renders button and handles click events", async () => {
10:       // Arrange
11:       const handleClick = jest.fn();
12:       const buttonText = "Click Me";
13:       // Act
14:       render(<Button onClick={handleClick}>{buttonText}</Button>);
15:       const button = screen.getByRole("button", { name: buttonText });
16:       await userEvent.click(button);
17:       // Assert
18:       expect(button).toBeInTheDocument();
19:       expect(handleClick).toHaveBeenCalledTimes(1);
20:       expect(button).toHaveTextContent(buttonText);
21:     });
22:     it.each`
23:       children    | ariaLabel
24:       ${"Save"}   | ${"Save changes"}
25:       ${"Delete"} | ${"Delete item"}
26:       ${"Edit"}   | ${"Edit profile"}
27:     `(
28:       "renders button with '$children' text and '$ariaLabel' aria-label",
29:       ({ children, ariaLabel }: { children: string; ariaLabel: string }) => {
30:         // Arrange
31:         const props = {
32:           onClick: jest.fn(),
33:           "aria-label": ariaLabel,
34:         };
35:         // Act
36:         render(<Button {...props}>{children}</Button>);
37:         const button = screen.getByRole("button", { name: ariaLabel });
38:         // Assert
39:         expect(button).toBeInTheDocument();
40:         expect(button).toHaveAttribute("aria-label", ariaLabel);
41:         expect(button).toHaveTextContent(children);
42:       },
43:     );
44:     it("is disabled when disabled prop is true", () => {
45:       // Arrange
46:       const handleClick = jest.fn();
47:       // Act
48:       render(
49:         <Button onClick={handleClick} disabled>
50:           Disabled Button
51:         </Button>,
52:       );
53:       const button = screen.getByRole("button");
54:       // Assert
55:       expect(button).toBeDisabled();
56:       expect(button).not.toBeEnabled();
57:     });
58:   });
59: });
```

## File: src/__tests__/UI/InputField.test.tsx
```typescript
 1: import React from "react";
 2: import { render, screen } from "@testing-library/react";
 3: import { useForm } from "react-hook-form";
 4: import InputField, {
 5:   createRegisterOptions,
 6: } from "@/components/UI/InputField.component";
 7: interface TestFormData {
 8:   testField: string;
 9: }
10: const TestComponent = ({
11:   type = "input",
12:   isRequired = false,
13:   inputPattern,
14: }: {
15:   type?: "input" | "textarea";
16:   isRequired?: boolean;
17:   inputPattern?: RegExp;
18: }) => {
19:   const { register } = useForm<TestFormData>();
20:   return (
21:     <InputField<TestFormData>
22:       name="testField"
23:       label="Test Field"
24:       htmlFor="testField"
25:       type={type}
26:       isRequired={isRequired}
27:       inputPattern={inputPattern}
28:       register={register}
29:     />
30:   );
31: };
32: describe("InputField", () => {
33:   describe("rendering", () => {
34:     it("renders input field with label", () => {
35:       // Arrange
36:       const expectedLabel = "Test Field";
37:       // Act
38:       render(<TestComponent />);
39:       const input = screen.getByLabelText(expectedLabel);
40:       // Assert
41:       expect(input).toBeInTheDocument();
42:     });
43:     it("renders textarea when specified", () => {
44:       // Arrange
45:       const expectedLabel = "Test Field";
46:       const expectedTag = "TEXTAREA";
47:       // Act
48:       render(<TestComponent type="textarea" />);
49:       const textarea = screen.getByLabelText(expectedLabel);
50:       // Assert
51:       expect(textarea).toBeInTheDocument();
52:       expect(textarea.tagName).toBe(expectedTag);
53:     });
54:     it("displays provided error message", () => {
55:       // Arrange
56:       const errorMessage = "This is an error message";
57:       const props = {
58:         name: "testField",
59:         label: "Test Field",
60:         htmlFor: "testField",
61:         register: jest.fn(),
62:         error: errorMessage,
63:       };
64:       // Act
65:       render(<InputField<TestFormData> {...props} />);
66:       // Assert
67:       expect(screen.getByText(errorMessage)).toBeInTheDocument();
68:     });
69:   });
70:   describe("form registration", () => {
71:     it("creates required validation option when isRequired is true", () => {
72:       // Arrange
73:       const isRequired = true;
74:       const expectedMessage = "Dette feltet er påkrevd";
75:       // Act
76:       const options = createRegisterOptions(isRequired);
77:       // Assert
78:       expect(options.required).toBe(expectedMessage);
79:     });
80:     it("creates pattern validation option when pattern is provided", () => {
81:       // Arrange
82:       const pattern = /[A-Za-z]+/;
83:       const isRequired = false;
84:       // Act
85:       const options = createRegisterOptions(isRequired, pattern);
86:       // Assert
87:       expect(options.pattern).toBeDefined();
88:       expect((options.pattern as { value: RegExp }).value).toEqual(pattern);
89:     });
90:   });
91: });
```

## File: src/__tests__/UI/Pill.test.tsx
```typescript
  1: import React from "react";
  2: import { render, screen, fireEvent } from "@testing-library/react";
  3: import Pill from "@/components/UI/Pill.component";
  4: // Mock Next.js Link component
  5: jest.mock("next/link", () => {
  6:   return ({ children, href }) => {
  7:     return <a href={href}>{children}</a>;
  8:   };
  9: });
 10: describe("Pill Component", () => {
 11:   describe("rendering", () => {
 12:     it("renders as button with default props", () => {
 13:       // Arrange
 14:       const text = "Test Pill";
 15:       // Act
 16:       render(<Pill text={text} />);
 17:       const pill = screen.getByText(text);
 18:       // Assert
 19:       expect(pill).toBeInTheDocument();
 20:       expect(pill.tagName).toBe("BUTTON");
 21:       expect(pill).toHaveAttribute("data-text", text);
 22:     });
 23:     it("renders as link when href is provided", () => {
 24:       // Arrange
 25:       const props = {
 26:         text: "Link Pill",
 27:         href: "/test",
 28:       };
 29:       // Act
 30:       render(<Pill {...props} />);
 31:       const pill = screen.getByText(props.text);
 32:       // Assert
 33:       expect(pill).toBeInTheDocument();
 34:       expect(pill.tagName).toBe("A");
 35:       expect(pill).toHaveAttribute("href", props.href);
 36:       expect(pill).toHaveAttribute("data-text", props.text);
 37:     });
 38:     it("applies custom className alongside base classes", () => {
 39:       // Arrange
 40:       const props = {
 41:         text: "Custom Class",
 42:         className: "custom-class",
 43:       };
 44:       const baseClasses = [
 45:         "glitch",
 46:         "text-white",
 47:         "m-4",
 48:         "text-xl",
 49:         "p-6",
 50:         "mt-4",
 51:         "rounded-full",
 52:         "transition",
 53:         "duration-300",
 54:         "ease-in-out",
 55:         "transform",
 56:         "bg-blue-600",
 57:         "bg-opacity-20",
 58:         "border-2",
 59:         "border-blue-800",
 60:         "border-opacity-30",
 61:         "hover:bg-blue-400",
 62:         "hover:bg-opacity-30",
 63:         "backdrop-blur-sm",
 64:       ];
 65:       // Act
 66:       render(<Pill {...props} />);
 67:       const pill = screen.getByText(props.text);
 68:       // Assert
 69:       expect(pill).toHaveClass(...baseClasses, props.className);
 70:     });
 71:   });
 72:   describe("interactions", () => {
 73:     it("calls onClick when clicked as button", () => {
 74:       // Arrange
 75:       const mockOnClick = jest.fn();
 76:       const props = {
 77:         text: "Clickable Pill",
 78:         onClick: mockOnClick,
 79:       };
 80:       // Act
 81:       render(<Pill {...props} />);
 82:       const pill = screen.getByText(props.text);
 83:       fireEvent.click(pill);
 84:       // Assert
 85:       expect(mockOnClick).toHaveBeenCalledTimes(1);
 86:     });
 87:     it("does not call onClick when rendered as link", () => {
 88:       // Arrange
 89:       const mockOnClick = jest.fn();
 90:       const props = {
 91:         text: "Link Pill",
 92:         href: "/test",
 93:         onClick: mockOnClick,
 94:       };
 95:       // Act
 96:       render(<Pill {...props} />);
 97:       const pill = screen.getByText(props.text);
 98:       fireEvent.click(pill);
 99:       // Assert
100:       expect(mockOnClick).not.toHaveBeenCalled();
101:     });
102:   });
103: });
```

## File: src/__tests__/UI/SkipLink.test.tsx
```typescript
 1: import React from "react";
 2: import { render, screen } from "@testing-library/react";
 3: import "@testing-library/jest-dom";
 4: import SkipLink from "@/components/UI/SkipLink.component";
 5: describe("SkipLink", () => {
 6:   describe("rendering", () => {
 7:     it("renders skip link with correct text", () => {
 8:       // Arrange
 9:       const expectedText = "Hopp til hovedinnhold";
10:       // Act
11:       render(<SkipLink />);
12:       const skipLink = screen.getByText(expectedText);
13:       // Assert
14:       expect(skipLink).toBeInTheDocument();
15:     });
16:     it("renders as link with correct href", () => {
17:       // Arrange
18:       const expectedProps = {
19:         text: "Hopp til hovedinnhold",
20:         href: "#main-content",
21:       };
22:       // Act
23:       render(<SkipLink />);
24:       const button = screen.getByRole("link", { name: expectedProps.text });
25:       // Assert
26:       expect(button).toHaveAttribute("href", expectedProps.href);
27:     });
28:   });
29:   describe("accessibility", () => {
30:     it("applies correct visibility classes for focus states", () => {
31:       // Arrange
32:       const expectedClasses = [
33:         "sr-only",
34:         "focus-within:not-sr-only",
35:         "focus-within:absolute",
36:         "focus-within:top-4",
37:         "focus-within:left-4",
38:         "focus-within:z-50",
39:       ];
40:       // Act
41:       render(<SkipLink />);
42:       const skipLink = screen.getByText("Hopp til hovedinnhold").closest("div");
43:       // Assert
44:       expectedClasses.forEach((className) => {
45:         expect(skipLink).toHaveClass(className);
46:       });
47:     });
48:   });
49: });
```

## File: src/__tests__/UI/Tabs.test.tsx
```typescript
  1: /**
  2:  * @jest-environment jsdom
  3:  */
  4: /// <reference types="@testing-library/jest-dom" />
  5: import React from "react";
  6: import { render, screen, fireEvent } from "@testing-library/react";
  7: import "@testing-library/jest-dom";
  8: import Tabs from "@/components/UI/Tabs.component";
  9: // Component that throws an error immediately
 10: const ImmediateCrash = () => {
 11:   throw new Error("Immediate crash!");
 12: };
 13: const mockMotion = {
 14:   motion: {
 15:     div: (props: React.ComponentProps<"div">) => (
 16:       <div {...props}>{props.children}</div>
 17:     ),
 18:     button: (props: React.ComponentProps<"button">) => (
 19:       <button type="button" {...props}>
 20:         {props.children}
 21:       </button>
 22:     ),
 23:   },
 24:   AnimatePresence: ({ children }: { children: React.ReactNode }) => (
 25:     <>{children}</>
 26:   ),
 27: };
 28: jest.mock("motion", () => mockMotion);
 29: const mockTabs = [
 30:   {
 31:     id: "tab1",
 32:     label: "Normal Tab",
 33:     content: <div>Normal content</div>,
 34:   },
 35:   {
 36:     id: "tab2",
 37:     label: "Crashing Tab",
 38:     content: <ImmediateCrash />,
 39:   },
 40: ];
 41: describe("Tabs", () => {
 42:   const renderTabs = (orientation?: "horizontal" | "vertical") =>
 43:     render(<Tabs tabs={mockTabs} orientation={orientation} />);
 44:   it("renders tabs with correct layout in vertical orientation", () => {
 45:     // Arrange
 46:     const orientation = undefined; // default vertical orientation
 47:     // Act
 48:     renderTabs(orientation);
 49:     const tabList = screen.getByRole("tablist");
 50:     // Assert
 51:     expect(tabList).toHaveClass("sm:flex-col");
 52:   });
 53:   it("renders tabs with correct layout in horizontal orientation", () => {
 54:     // Arrange
 55:     const orientation = "horizontal";
 56:     // Act
 57:     renderTabs(orientation);
 58:     const tabList = screen.getByRole("tablist");
 59:     // Assert
 60:     expect(tabList).toHaveClass("flex-row");
 61:     expect(tabList).not.toHaveClass("sm:flex-col");
 62:   });
 63:   it("applies correct ARIA attributes to tabs", () => {
 64:     // Arrange
 65:     const expectedAttributes = mockTabs.map((tab, index) => ({
 66:       tab,
 67:       isSelected: index === 0,
 68:       controlsId: `tabpanel-${tab.id}`,
 69:     }));
 70:     // Act
 71:     renderTabs();
 72:     // Assert
 73:     expectedAttributes.forEach(({ tab, isSelected, controlsId }) => {
 74:       const tabElement = screen.getByRole("tab", { name: tab.label });
 75:       expect(tabElement).toHaveAttribute(
 76:         "aria-selected",
 77:         isSelected.toString(),
 78:       );
 79:       expect(tabElement).toHaveAttribute("aria-controls", controlsId);
 80:     });
 81:   });
 82:   it("switches tab content when clicking tabs", () => {
 83:     // Arrange
 84:     renderTabs();
 85:     const initialContent = "Normal content";
 86:     // Act & Assert - Initial state
 87:     expect(screen.getByText(initialContent)).toBeInTheDocument();
 88:     // Act & Assert - Click handling
 89:     const crashingTab = screen.getByRole("tab", { name: "Crashing Tab" });
 90:     expect(() => {
 91:       fireEvent.click(crashingTab);
 92:       render(<ImmediateCrash />);
 93:     }).toThrow("Immediate crash!");
 94:   });
 95:   it("applies correct border styles to tabs", () => {
 96:     // Arrange
 97:     renderTabs();
 98:     // Act
 99:     const tabs = screen.getAllByRole("tab");
100:     // Assert
101:     expect(tabs[0]).not.toHaveClass("border-t");
102:     expect(tabs[1]).toHaveClass("border-t", "border-gray-600");
103:   });
104:   it("renders tab panels with correct attributes", () => {
105:     // Arrange
106:     const expectedAttributes = {
107:       id: "tabpanel-tab1",
108:       labelledBy: "tab-tab1",
109:       className: "px-8",
110:     };
111:     // Act
112:     renderTabs();
113:     const activePanel = screen.getByRole("tabpanel");
114:     // Assert
115:     expect(activePanel).toHaveAttribute("id", expectedAttributes.id);
116:     expect(activePanel).toHaveAttribute(
117:       "aria-labelledby",
118:       expectedAttributes.labelledBy,
119:     );
120:     expect(activePanel).toHaveClass(expectedAttributes.className);
121:   });
122: });
```

## File: src/app/api/siteMapGenerator.ts
```typescript
 1: import { SitemapStream, streamToPromise } from "sitemap";
 2: import { Readable } from "stream";
 3: import type { NextApiRequest, NextApiResponse } from "next";
 4: interface IData {
 5:   toString: () => string;
 6: }
 7: interface ILinks {
 8:   url: string;
 9:   changefreq: string;
10:   priority: number;
11: }
12: const siteMapGenerator = async (req: NextApiRequest, res: NextApiResponse) => {
13:   // An array with your links
14:   const links: ILinks[] = [
15:     { url: "/", changefreq: "daily", priority: 0.3 },
16:     { url: "/prosjekter", changefreq: "daily", priority: 0.3 },
17:     { url: "/cv", changefreq: "daily", priority: 0.3 },
18:     { url: "/kontakt", changefreq: "daily", priority: 0.3 },
19:   ];
20:   // Create a stream to write to
21:   const stream = new SitemapStream({ hostname: `https://${req.headers.host}` });
22:   res.writeHead(200, {
23:     "Content-Type": "application/xml",
24:   });
25:   const xmlString = await streamToPromise(
26:     Readable.from(links).pipe(stream),
27:   ).then((data: IData) => data.toString());
28:   res.end(xmlString);
29: };
30: export default siteMapGenerator;
```

## File: src/app/cv/page.tsx
```typescript
 1: import RootLayout from "../RootLayout";
 2: import CVContent from "@/components/CV/CVContent.component";
 3: import { client } from "@/lib/sanity/client";
 4: import { cvQuery } from "@/lib/sanity/queries";
 5: import { Metadata } from "next/types";
 6: export const metadata: Metadata = {
 7:   title: "CV - Dfweb",
 8:   description: "Daniel Fjeldstad | Frontend Web Utvikler | Portefølje",
 9: };
10: export default async function CVPage() {
11:   const cvData = await client.fetch(cvQuery);
12:   return (
13:     <RootLayout>
14:       <CVContent cvData={cvData} />
15:     </RootLayout>
16:   );
17: }
```

## File: src/app/kontakt/page.tsx
```typescript
 1: import RootLayout from "../RootLayout";
 2: import KontaktContent from "@/components/Kontakt/KontaktContent.component";
 3: import { Metadata } from "next/types";
 4: export const metadata: Metadata = {
 5:   title: "Kontakt - Dfweb",
 6:   description: "Daniel Fjeldstad | Frontend Web Utvikler | Portefølje",
 7: };
 8: export default async function PostIndex() {
 9:   return (
10:     <RootLayout>
11:       <KontaktContent />
12:     </RootLayout>
13:   );
14: }
```

## File: src/app/prosjekter/actions.ts
```typescript
 1: import { client } from "@/lib/sanity/client";
 2: import { projectsQuery } from "@/lib/sanity/queries";
 3: import type { Project } from "@/types/sanity.types";
 4: export async function getProjects(): Promise<Project[]> {
 5:   try {
 6:     // Add a small delay to demonstrate loading state
 7:     await new Promise((resolve) => setTimeout(resolve, 1000));
 8:     const projects = await client.fetch(
 9:       projectsQuery,
10:       {},
11:       {
12:         // Enable Incremental Static Regeneration with a 1 hour revalidation period
13:         next: { revalidate: 3600 },
14:       },
15:     );
16:     return projects;
17:   } catch (error) {
18:     console.error("Error fetching projects:", error);
19:     throw new Error("Failed to fetch projects");
20:   }
21: }
```

## File: src/app/prosjekter/error.tsx
```typescript
 1: "use client";
 2: import { useEffect } from "react";
 3: type ErrorBoundaryProps = Readonly<{
 4:   error: Error & { digest?: string };
 5:   reset: () => void;
 6: }>;
 7: export default function ErrorBoundary({ error, reset }: ErrorBoundaryProps) {
 8:   useEffect(() => {
 9:     console.error(error);
10:   }, [error]);
11:   return (
12:     <div className="flex flex-col items-center justify-center min-h-[50vh] text-center px-4">
13:       <h2 className="text-2xl font-bold text-matrix-light mb-4">
14:         Noe gikk galt ved lasting av prosjekter
15:       </h2>
16:       <button
17:         onClick={reset}
18:         className="px-4 py-2 bg-matrix-dark hover:bg-matrix-light text-white rounded transition-colors"
19:       >
20:         Prøv igjen
21:       </button>
22:     </div>
23:   );
24: }
```

## File: src/app/prosjekter/loading.tsx
```typescript
 1: import RootLayout from "../RootLayout";
 2: import PageHeader from "@/components/UI/PageHeader.component";
 3: import RotatingLoader from "@/components/Animations/RotatingLoader.component";
 4: export default function Loading() {
 5:   return (
 6:     <RootLayout>
 7:       <main
 8:         role="main"
 9:         aria-label="Laster portefølje"
10:         className="mt-32 bg-graybg"
11:       >
12:         <PageHeader>Prosjekter</PageHeader>
13:         <div className="container mx-auto flex justify-center items-center min-h-[400px]">
14:           <RotatingLoader />
15:         </div>
16:       </main>
17:     </RootLayout>
18:   );
19: }
```

## File: src/app/prosjekter/page.tsx
```typescript
 1: import { Suspense } from "react";
 2: import type { Metadata } from "next/types";
 3: import RootLayout from "../RootLayout";
 4: import PageHeader from "@/components/UI/PageHeader.component";
 5: import ProsjektCard from "@/components/Prosjekter/ProsjektCard.component";
 6: import RotatingLoader from "@/components/Animations/RotatingLoader.component";
 7: import { getProjects } from "./actions";
 8: export const metadata: Metadata = {
 9:   title: "Prosjekter - Dfweb",
10:   description: "Daniel Fjeldstad | Frontend Web Utvikler | Portefølje",
11: };
12: export default async function Prosjekter() {
13:   const projects = await getProjects();
14:   return (
15:     <RootLayout>
16:       <main
17:         role="main"
18:         aria-label="Innhold portefølje"
19:         className="mt-32 bg-graybg"
20:       >
21:         <PageHeader>Prosjekter</PageHeader>
22:         <Suspense fallback={<RotatingLoader />}>
23:           <div className="container mx-auto">
24:             <div className="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 xl:grid-cols-2 gap-8">
25:               {projects.map((project) => (
26:                 <ProsjektCard key={project.id} {...project} />
27:               ))}
28:             </div>
29:           </div>
30:         </Suspense>
31:       </main>
32:     </RootLayout>
33:   );
34: }
```

## File: src/app/cursor.css
```css
 1: .matrix-cursor {
 2:   cursor: none;
 3: }
 4: .matrix-cursor::before,
 5: .matrix-cursor::after {
 6:   content: "";
 7:   position: fixed;
 8:   pointer-events: none;
 9:   z-index: 9999;
10:   left: var(--cursor-x, 0);
11:   top: var(--cursor-y, 0);
12: }
13: .matrix-cursor::before {
14:   width: 16px;
15:   height: 16px;
16:   border: 2px solid #00ff62;
17:   border-radius: 50%;
18:   transform: translate(-50%, -50%);
19:   box-shadow: 0 0 10px #00ff62;
20:   animation: pulse-and-rotate 2s ease-in-out infinite;
21: }
22: .matrix-cursor::after {
23:   width: 4px;
24:   height: 4px;
25:   background: #00ff62;
26:   border-radius: 50%;
27:   transform: translate(-50%, -50%);
28:   box-shadow: 0 0 15px 2px #00ff62;
29:   animation: pulse 1s ease-in-out infinite;
30: }
31: .matrix-trail {
32:   position: fixed;
33:   pointer-events: none;
34:   font-family: monospace;
35:   color: #00ff62;
36:   font-size: 12px;
37:   text-shadow: 0 0 3px #00ff62;
38:   z-index: 9998;
39:   opacity: 0;
40:   animation: trail-fade 3s linear forwards;
41:   letter-spacing: 5px;
42: }
43: @keyframes trail-fade {
44:   0% {
45:     opacity: 0.3;
46:     transform: translateY(0);
47:   }
48:   50% {
49:     opacity: 0.15;
50:     transform: translateY(35px);
51:   }
52:   100% {
53:     opacity: 0;
54:     transform: translateY(50px);
55:   }
56: }
57: @keyframes pulse-and-rotate {
58:   0% {
59:     transform: translate(-50%, -50%) rotate(0deg) scale(1);
60:     border-radius: 50%;
61:   }
62:   25% {
63:     border-radius: 2px;
64:   }
65:   50% {
66:     transform: translate(-50%, -50%) rotate(180deg) scale(1.2);
67:     border-radius: 50%;
68:   }
69:   75% {
70:     border-radius: 2px;
71:   }
72:   100% {
73:     transform: translate(-50%, -50%) rotate(360deg) scale(1);
74:     border-radius: 50%;
75:   }
76: }
77: @keyframes pulse {
78:   0%,
79:   100% {
80:     transform: translate(-50%, -50%) scale(1);
81:     opacity: 0.8;
82:   }
83:   50% {
84:     transform: translate(-50%, -50%) scale(1.5);
85:     opacity: 1;
86:   }
87: }
```

## File: src/app/glitch.css
```css
  1: .glitch {
  2:   position: relative;
  3: }
  4: @keyframes noise-anim {
  5:   0% {
  6:     clip: rect(42px, 9999px, 44px, 0);
  7:   }
  8:   5% {
  9:     clip: rect(12px, 9999px, 85px, 0);
 10:   }
 11:   10% {
 12:     clip: rect(22px, 9999px, 65px, 0);
 13:   }
 14:   15% {
 15:     clip: rect(32px, 9999px, 75px, 0);
 16:   }
 17:   20% {
 18:     clip: rect(42px, 9999px, 55px, 0);
 19:   }
 20:   25% {
 21:     clip: rect(52px, 9999px, 45px, 0);
 22:   }
 23:   30% {
 24:     clip: rect(62px, 9999px, 35px, 0);
 25:   }
 26:   35% {
 27:     clip: rect(72px, 9999px, 25px, 0);
 28:   }
 29:   40% {
 30:     clip: rect(82px, 9999px, 15px, 0);
 31:   }
 32:   45% {
 33:     clip: rect(92px, 9999px, 5px, 0);
 34:   }
 35:   50% {
 36:     clip: rect(102px, 9999px, 95px, 0);
 37:   }
 38:   55% {
 39:     clip: rect(112px, 9999px, 85px, 0);
 40:   }
 41:   60% {
 42:     clip: rect(122px, 9999px, 75px, 0);
 43:   }
 44:   65% {
 45:     clip: rect(132px, 9999px, 65px, 0);
 46:   }
 47:   70% {
 48:     clip: rect(142px, 9999px, 55px, 0);
 49:   }
 50:   75% {
 51:     clip: rect(152px, 9999px, 45px, 0);
 52:   }
 53:   80% {
 54:     clip: rect(162px, 9999px, 35px, 0);
 55:   }
 56:   85% {
 57:     clip: rect(172px, 9999px, 25px, 0);
 58:   }
 59:   90% {
 60:     clip: rect(182px, 9999px, 15px, 0);
 61:   }
 62:   95% {
 63:     clip: rect(192px, 9999px, 5px, 0);
 64:   }
 65:   100% {
 66:     clip: rect(202px, 9999px, 95px, 0);
 67:   }
 68: }
 69: @keyframes noise-anim-2 {
 70:   0% {
 71:     clip: rect(32px, 9999px, 34px, 0);
 72:   }
 73:   5% {
 74:     clip: rect(22px, 9999px, 75px, 0);
 75:   }
 76:   10% {
 77:     clip: rect(12px, 9999px, 55px, 0);
 78:   }
 79:   15% {
 80:     clip: rect(42px, 9999px, 65px, 0);
 81:   }
 82:   20% {
 83:     clip: rect(52px, 9999px, 45px, 0);
 84:   }
 85:   25% {
 86:     clip: rect(62px, 9999px, 35px, 0);
 87:   }
 88:   30% {
 89:     clip: rect(72px, 9999px, 25px, 0);
 90:   }
 91:   35% {
 92:     clip: rect(82px, 9999px, 15px, 0);
 93:   }
 94:   40% {
 95:     clip: rect(92px, 9999px, 5px, 0);
 96:   }
 97:   45% {
 98:     clip: rect(102px, 9999px, 95px, 0);
 99:   }
100:   50% {
101:     clip: rect(112px, 9999px, 85px, 0);
102:   }
103:   55% {
104:     clip: rect(122px, 9999px, 75px, 0);
105:   }
106:   60% {
107:     clip: rect(132px, 9999px, 65px, 0);
108:   }
109:   65% {
110:     clip: rect(142px, 9999px, 55px, 0);
111:   }
112:   70% {
113:     clip: rect(152px, 9999px, 45px, 0);
114:   }
115:   75% {
116:     clip: rect(162px, 9999px, 35px, 0);
117:   }
118:   80% {
119:     clip: rect(172px, 9999px, 25px, 0);
120:   }
121:   85% {
122:     clip: rect(182px, 9999px, 15px, 0);
123:   }
124:   90% {
125:     clip: rect(192px, 9999px, 5px, 0);
126:   }
127:   95% {
128:     clip: rect(202px, 9999px, 95px, 0);
129:   }
130:   100% {
131:     clip: rect(212px, 9999px, 85px, 0);
132:   }
133: }
134: .glitch:after,
135: .glitch:before {
136:   content: attr(data-text);
137:   position: absolute;
138:   top: 0;
139:   overflow: hidden;
140:   clip: rect(0, 900px, 0, 0);
141: }
142: .glitch:after {
143:   left: 2px;
144:   text-shadow: -1px 0 red;
145: }
146: .glitch:before {
147:   left: -2px;
148:   text-shadow: 1px 0 blue;
149: }
150: .glitch:hover:after {
151:   animation: noise-anim 0.3s infinite linear alternate-reverse;
152: }
153: .glitch:hover:before {
154:   animation: noise-anim-2 0.3s infinite linear alternate-reverse;
155: }
```

## File: src/app/globals.css
```css
 1: @tailwind base;
 2: @tailwind components;
 3: @tailwind utilities;
 4: :root {
 5:   --matrix-green: #00ff62;
 6:   --matrix-dark: #008529;
 7: }
 8: body {
 9:   background-color: #0a0a0a;
10:   color: #e1e1e1;
11:   font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
12: }
13: /* Matrix canvas - refined opacity for better readability */
14: #matrixCanvas {
15:   opacity: 0.7;
16: }
17: /* Selection */
18: ::selection {
19:   background-color: var(--matrix-dark);
20:   color: #ffffff;
21: }
22: /* Scrollbar */
23: * {
24:   scrollbar-width: thin;
25:   scrollbar-color: var(--matrix-dark) #1a1a1a;
26: }
27: ::-webkit-scrollbar {
28:   width: 6px;
29: }
30: ::-webkit-scrollbar-track {
31:   background: #1a1a1a;
32: }
33: ::-webkit-scrollbar-thumb {
34:   background: var(--matrix-dark);
35:   border-radius: 3px;
36: }
37: ::-webkit-scrollbar-thumb:hover {
38:   background: var(--matrix-green);
39: }
40: /* Remove focus outline */
41: :focus {
42:   outline: none;
43: }
44: /* Remove focus visible outline */
45: :focus-visible {
46:   outline: none;
47: }
```

## File: src/app/layout.tsx
```typescript
 1: import type { Metadata } from "next";
 2: import { Inter } from "next/font/google";
 3: import "./globals.css";
 4: import "./glitch.css";
 5: import Footer from "@/components/Layout/Footer.component";
 6: import SkipLink from "@/components/UI/SkipLink.component";
 7: const inter = Inter({ subsets: ["latin"] });
 8: export const metadata: Metadata = {
 9:   title: "Forside - Dfweb",
10:   description: "Daniel Fjeldstad | Frontend Web Utvikler | Portefølje",
11: };
12: export default function RootLayout({
13:   children,
14: }: Readonly<{
15:   children: React.ReactNode;
16: }>) {
17:   return (
18:     <html lang="en">
19:       <head>
20:         <link rel="icon" href="/favicon.ico" />
21:         <link rel="apple-touch-icon" href="/logo.png" />
22:         <meta property="og:title" content="Daniel Fjeldstad" />
23:         <meta name="author" content="Daniel Fjeldstad" />
24:         <meta property="og:locale" content="nb_NO" />
25:         <meta
26:           name="description"
27:           content="Daniel Fjeldstad | Frontend Web Utvikler | Portefølje"
28:         />
29:         <meta
30:           property="og:description"
31:           content="Daniel Fjeldstad | Frontend Web Utvikler | Portefølje"
32:         />
33:         <meta property="og:url" content="https://www.dfweb.no/" />
34:         <meta property="og:site_name" content="dfweb.no" />
35:       </head>
36:       <body
37:         className={`flex flex-col min-h-screen bg-slate-900 leading-relaxed text-slate-300/[0.9] antialiased selection:bg-teal-300 selection:text-teal-900 ${inter.className}`}
38:       >
39:         <SkipLink />
40:         <div id="main-content" className="flex-grow">
41:           {children}
42:         </div>
43:         <Footer />
44:       </body>
45:     </html>
46:   );
47: }
```

## File: src/app/not-found.tsx
```typescript
 1: import ReactMatrixAnimation from "@/components/Animations/Matrix.component";
 2: import Pill from "@/components/UI/Pill.component";
 3: export default function Custom404() {
 4:   return (
 5:     <div className="absolute w-full h-full">
 6:       <ReactMatrixAnimation />
 7:       <div className="absolute inset-0 flex flex-col items-center justify-center h-full">
 8:         <h1 className="text-white text-5xl m-6">Har du gått deg vill, Neo?</h1>
 9:         <Pill href="/" text="Returner til Matrix" />
10:       </div>
11:     </div>
12:   );
13: }
```

## File: src/app/page.tsx
```typescript
 1: import dynamic from "next/dynamic";
 2: import RootLayout from "@/app/RootLayout";
 3: import { client } from "@/lib/sanity/client";
 4: import { pageContentQuery } from "@/lib/sanity/queries";
 5: const DynamicHero = dynamic(() => import("@/components/Index/Hero.component"), {
 6:   loading: () => <div>Loading hero...</div>,
 7: });
 8: const DynamicIndexContent = dynamic(
 9:   () => import("@/components/Index/IndexContent.component"),
10:   {
11:     loading: () => <div>Loading content...</div>,
12:   },
13: );
14: export default async function HomePage() {
15:   const pageContent = await client.fetch(pageContentQuery);
16:   return (
17:     <RootLayout>
18:       <main>
19:         <div className="mt-[4.5rem] md:mt-32 overflow-hidden">
20:           {pageContent.hero && <DynamicHero content={pageContent.hero} />}
21:         </div>
22:         {pageContent.content && (
23:           <DynamicIndexContent pageContent={pageContent.content} />
24:         )}
25:       </main>
26:     </RootLayout>
27:   );
28: }
```

## File: src/app/RootLayout.tsx
```typescript
 1: import { SpeedInsights } from "@vercel/speed-insights/next";
 2: import { client } from "@/lib/sanity/client";
 3: import { navigationQuery } from "@/lib/sanity/queries";
 4: import Header from "@/components/Layout/Header.component";
 5: import ErrorBoundary from "@/components/ErrorBoundary/ErrorBoundary";
 6: export default async function RootLayout({
 7:   children,
 8: }: Readonly<{
 9:   children: React.ReactNode;
10: }>) {
11:   const navigation = await client.fetch(navigationQuery);
12:   return (
13:     <ErrorBoundary>
14:       <Header navigationLinks={navigation.links} />
15:       <SpeedInsights />
16:       {children}
17:     </ErrorBoundary>
18:   );
19: }
```

## File: src/components/Animations/types/Animations.types.ts
```typescript
 1: import { ReactNode } from "react";
 2: export interface IAnimateProps {
 3:   children: ReactNode;
 4:   cssClass?: string;
 5: }
 6: export interface IAnimateBounceProps {
 7:   children: ReactNode;
 8:   cssClass?: string;
 9:   viewAmount?: "some" | "all" | number;
10:   instant?: boolean;
11: }
12: export interface IAnimateWithDelayProps {
13:   children: ReactNode;
14:   cssClass?: string;
15:   delay: number;
16: }
17: export interface IAnimateStaggerWithDelayProps {
18:   children: ReactNode;
19:   cssClass?: string;
20:   delay: number;
21:   staggerDelay?: number;
22:   animateNotReverse: boolean;
23: }
24: export interface IGrowProps {
25:   duration?: number;
26:   delay?: number;
27:   easing?: [number, number, number, number];
28:   children: ReactNode;
29: }
```

## File: src/components/Animations/BounceInScroll.component.tsx
```typescript
 1: "use client";
 2: import { Variants, motion } from "motion/react";
 3: import { IAnimateBounceProps } from "./types/Animations.types";
 4: const bounceVariants: Variants = {
 5:   offscreen: {
 6:     y: 30,
 7:     opacity: 0,
 8:   },
 9:   onscreen: {
10:     y: 0,
11:     opacity: 1,
12:     transition: {
13:       type: "spring",
14:       bounce: 0.5,
15:       duration: 1.5,
16:     },
17:   },
18: };
19: /**
20:  * Bounce in content when content becomes visible in viewport
21:  * @function BounceInScroll
22:  * @param {ReactNode} children - Children content to render
23:  * @param {string} cssClass - CSS classes to apply to component
24:  * @param {"some" | "all" | number} viewAmount - Amount of component needed to be visible before animating
25:  * @param {boolean} instant - Whether to animate instantly without scroll trigger
26:  * @returns {JSX.Element} - Rendered component
27:  */
28: const BounceInScroll = ({
29:   children,
30:   cssClass,
31:   viewAmount,
32:   instant,
33: }: IAnimateBounceProps) => (
34:   <motion.div
35:     initial="offscreen"
36:     animate={instant ? "onscreen" : undefined}
37:     whileInView={instant ? undefined : "onscreen"}
38:     viewport={instant ? undefined : { once: true, amount: viewAmount ?? 0.2 }}
39:     className={cssClass}
40:     data-testid="bounceinscroll"
41:   >
42:     <motion.div variants={bounceVariants}>{children}</motion.div>
43:   </motion.div>
44: );
45: export default BounceInScroll;
```

## File: src/components/Animations/FadeDown.component.tsx
```typescript
 1: import { Variants, motion } from "motion/react";
 2: import { IAnimateWithDelayProps } from "./types/Animations.types";
 3: /**
 4:  * Fade down content animation
 5:  * @function FadeDown
 6:  * @param {ReactNode} children - Children content to render
 7:  * @param {string} cssClass - CSS classes to apply to component
 8:  * @param {number} delay - Time to wait before starting animation
 9:  * @returns {JSX.Element} - Rendered component
10:  */
11: const FadeDown = ({ children, cssClass, delay }: IAnimateWithDelayProps) => {
12:   const fadeDownVariants: Variants = {
13:     initial: { opacity: 0, y: -20 },
14:     animate: {
15:       y: 0,
16:       opacity: 1,
17:       transition: { delay, type: "spring", duration: 0.5, stiffness: 100 },
18:     },
19:   };
20:   return (
21:     <motion.div
22:       className={cssClass}
23:       variants={fadeDownVariants}
24:       initial="initial"
25:       animate="animate"
26:       data-testid="fadedown"
27:     >
28:       {children}
29:     </motion.div>
30:   );
31: };
32: export default FadeDown;
```

## File: src/components/Animations/FadeUp.component.tsx
```typescript
 1: import { Variants, motion } from "motion/react";
 2: import { IAnimateWithDelayProps } from "./types/Animations.types";
 3: /**
 4:  * Fade up content animation
 5:  * @function FadeUp
 6:  * @param {ReactNode} children - Children content to render
 7:  * @param {string} cssClass - CSS classes to apply to component
 8:  * @param {number} delay - Time to wait before starting animation
 9:  * @returns {JSX.Element} - Rendered component
10:  */
11: const FadeUp = ({ children, cssClass, delay }: IAnimateWithDelayProps) => {
12:   const fadeUpVariants: Variants = {
13:     initial: { opacity: 0, y: 20 },
14:     animate: {
15:       y: 0,
16:       opacity: 1,
17:       transition: { delay, type: "spring", duration: 0.5, stiffness: 100 },
18:     },
19:   };
20:   return (
21:     <motion.div
22:       className={cssClass}
23:       variants={fadeUpVariants}
24:       initial="initial"
25:       animate="animate"
26:       data-testid="fadeup"
27:     >
28:       {children}
29:     </motion.div>
30:   );
31: };
32: export default FadeUp;
```

## File: src/components/Animations/Grow.component.tsx
```typescript
 1: import { motion } from "motion/react";
 2: import { IGrowProps } from "./types/Animations.types";
 3: /**
 4:  * A component that animates its children to grow in size.
 5:  * @param props Props for the Grow component.
 6:  * @returns A component that animates its children to grow in size.
 7:  */
 8: const Grow = ({
 9:   duration = 0.5,
10:   delay = 0,
11:   easing = [0.42, 0, 0.58, 1],
12:   children,
13: }: IGrowProps) => {
14:   return (
15:     <motion.div
16:       initial={{ scale: 0 }}
17:       animate={{ scale: 1 }}
18:       transition={{ duration, delay, ease: easing }}
19:       data-testid="grow"
20:     >
21:       {children}
22:     </motion.div>
23:   );
24: };
25: export default Grow;
```

## File: src/components/Animations/Matrix.component.tsx
```typescript
  1: "use client";
  2: import React, { useEffect, useRef, useCallback } from "react";
  3: import { MatrixRenderer } from "./Matrix.renderer";
  4: import { hexToRgb, getRandomInt, debounce, Column } from "./Matrix.utils";
  5: export interface ReactMatrixAnimationProps {
  6:   tileSize?: number;
  7:   fadeFactor?: number;
  8:   backgroundColor?: string;
  9:   fontColor?: string;
 10:   glowColor?: string;
 11:   tileSet?: string[] | null;
 12: }
 13: const CANVAS_ID = "matrixCanvas";
 14: /**
 15:  * ReactMatrixAnimation component
 16:  * @param {ReactMatrixAnimationProps} props - The props for the ReactMatrixAnimation component
 17:  * @returns {JSX.Element} The rendered ReactMatrixAnimation component
 18:  */
 19: const ReactMatrixAnimation: React.FC<ReactMatrixAnimationProps> = ({
 20:   tileSize = 20,
 21:   fadeFactor = 0.5,
 22:   backgroundColor = "#111111",
 23:   fontColor = "#008529",
 24:   glowColor = "#00FF00",
 25:   tileSet = null,
 26: }) => {
 27:   const canvasRef = useRef<HTMLCanvasElement>(null);
 28:   const columnsRef = useRef<Column[]>([]);
 29:   const maxStackHeightRef = useRef<number>(0);
 30:   const lastFrameTimeRef = useRef<number>(0);
 31:   const isInitializedRef = useRef<boolean>(false);
 32:   const fps = 10;
 33:   const frameInterval = 1000 / fps;
 34:   const rgbBackground = hexToRgb(backgroundColor);
 35:   if (!rgbBackground) {
 36:     throw new Error("Invalid background color. Use a hex value e.g. #030303");
 37:   }
 38:   const rgbFont = hexToRgb(fontColor);
 39:   if (!rgbFont) {
 40:     throw new Error("Invalid font color. Use a hex value e.g. #030303");
 41:   }
 42:   /**
 43:    * Initializes the matrix columns
 44:    * @param {HTMLCanvasElement} canvas - The canvas element
 45:    */
 46:   const initMatrix = useCallback(
 47:     (canvas: HTMLCanvasElement) => {
 48:       const columns: Column[] = [];
 49:       const maxStackHeight = Math.ceil(canvas.height / tileSize);
 50:       for (let i = 0; i < canvas.width / tileSize; ++i) {
 51:         const column: Column = {
 52:           x: i * tileSize,
 53:           stackHeight: 10 + getRandomInt(maxStackHeight),
 54:           stackCounter: -getRandomInt(maxStackHeight * 2),
 55:         };
 56:         columns.push(column);
 57:       }
 58:       columnsRef.current = columns;
 59:       maxStackHeightRef.current = maxStackHeight;
 60:     },
 61:     [tileSize],
 62:   );
 63:   const tick = useCallback(
 64:     (
 65:       timestamp: number,
 66:       ctx: CanvasRenderingContext2D,
 67:       canvas: HTMLCanvasElement,
 68:     ) => {
 69:       if (!lastFrameTimeRef.current) {
 70:         lastFrameTimeRef.current = timestamp;
 71:       }
 72:       const delta = timestamp - lastFrameTimeRef.current;
 73:       if (delta > frameInterval) {
 74:         const renderer = new MatrixRenderer({
 75:           ctx,
 76:           canvas,
 77:           columns: columnsRef.current,
 78:           maxStackHeight: maxStackHeightRef.current,
 79:           tileSize,
 80:           fadeFactor,
 81:           rgbBackground,
 82:           rgbFont,
 83:           glowColor,
 84:           tileSet,
 85:           getRandomInt,
 86:         });
 87:         renderer.draw();
 88:         lastFrameTimeRef.current = timestamp - (delta % frameInterval);
 89:       }
 90:       requestAnimationFrame((timestamp) => tick(timestamp, ctx, canvas));
 91:     },
 92:     [fadeFactor, rgbBackground, rgbFont, tileSize, glowColor, tileSet],
 93:   );
 94:   useEffect(() => {
 95:     const canvas = canvasRef.current;
 96:     if (!canvas) return;
 97:     const ctx = canvas.getContext("2d");
 98:     if (!ctx) return;
 99:     const handleResize = () => {
100:       const boundingClientRect = canvas.getBoundingClientRect();
101:       canvas.width = boundingClientRect.width;
102:       canvas.height = boundingClientRect.height;
103:       initMatrix(canvas);
104:       isInitializedRef.current = true;
105:     };
106:     const debouncedResize = debounce(handleResize, 100);
107:     window.addEventListener("resize", debouncedResize);
108:     handleResize();
109:     requestAnimationFrame((timestamp) => tick(timestamp, ctx, canvas));
110:     return () => {
111:       window.removeEventListener("resize", debouncedResize);
112:     };
113:   }, [initMatrix, tick]);
114:   return (
115:     <canvas
116:       ref={canvasRef}
117:       id={CANVAS_ID}
118:       style={{ width: "100%", height: "100%" }}
119:       data-testid="matrix-canvas"
120:       className="absolute inset-0"
121:     />
122:   );
123: };
124: export default ReactMatrixAnimation;
```

## File: src/components/Animations/Matrix.renderer.ts
```typescript
 1: import { RGB, Column, getRandomCharacter } from "./Matrix.utils";
 2: interface MatrixRendererProps {
 3:   ctx: CanvasRenderingContext2D;
 4:   canvas: HTMLCanvasElement;
 5:   columns: Column[];
 6:   maxStackHeight: number;
 7:   tileSize: number;
 8:   fadeFactor: number;
 9:   rgbBackground: RGB;
10:   rgbFont: RGB;
11:   glowColor: string;
12:   tileSet: string[] | null;
13:   getRandomInt: (max: number) => number;
14: }
15: export class MatrixRenderer {
16:   private readonly ctx: CanvasRenderingContext2D;
17:   private readonly canvas: HTMLCanvasElement;
18:   private readonly columns: Column[];
19:   private readonly maxStackHeight: number;
20:   private readonly tileSize: number;
21:   private readonly fadeFactor: number;
22:   private readonly rgbBackground: RGB;
23:   private readonly rgbFont: RGB;
24:   private readonly glowColor: string;
25:   private readonly tileSet: string[] | null;
26:   private readonly getRandomInt: (max: number) => number;
27:   constructor({
28:     ctx,
29:     canvas,
30:     columns,
31:     maxStackHeight,
32:     tileSize,
33:     fadeFactor,
34:     rgbBackground,
35:     rgbFont,
36:     glowColor,
37:     tileSet,
38:     getRandomInt,
39:   }: MatrixRendererProps) {
40:     this.ctx = ctx;
41:     this.canvas = canvas;
42:     this.columns = columns;
43:     this.maxStackHeight = maxStackHeight;
44:     this.tileSize = tileSize;
45:     this.fadeFactor = fadeFactor;
46:     this.rgbBackground = rgbBackground;
47:     this.rgbFont = rgbFont;
48:     this.glowColor = glowColor;
49:     this.tileSet = tileSet;
50:     this.getRandomInt = getRandomInt;
51:   }
52:   draw(): void {
53:     this.drawBackground();
54:     this.drawColumns();
55:   }
56:   private drawBackground(): void {
57:     this.ctx.fillStyle = `rgba(${this.rgbBackground.r}, ${this.rgbBackground.g}, ${this.rgbBackground.b}, ${this.fadeFactor})`;
58:     this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
59:     this.ctx.font = `${this.tileSize - 2}px monospace`;
60:   }
61:   private drawColumns(): void {
62:     for (const column of this.columns) {
63:       if (column.stackCounter >= 0) {
64:         const randomCharacter = getRandomCharacter(this.tileSet);
65:         const y = column.stackCounter * this.tileSize + this.tileSize;
66:         // Draw regular characters
67:         this.ctx.fillStyle = `rgb(${this.rgbFont.r}, ${this.rgbFont.g}, ${this.rgbFont.b})`;
68:         this.ctx.fillText(randomCharacter, column.x, y);
69:         // Add glow effect to the last character
70:         if (column.stackCounter === Math.floor(column.stackHeight) - 1) {
71:           this.ctx.save();
72:           this.ctx.shadowColor = this.glowColor;
73:           this.ctx.shadowBlur = 10;
74:           this.ctx.fillStyle = this.glowColor;
75:           this.ctx.fillText(randomCharacter, column.x, y);
76:           this.ctx.restore();
77:         }
78:       }
79:       column.stackCounter++;
80:       if (column.stackCounter >= column.stackHeight) {
81:         column.stackHeight = 10 + this.getRandomInt(this.maxStackHeight);
82:         column.stackCounter = 0;
83:       }
84:     }
85:   }
86: }
```

## File: src/components/Animations/Matrix.utils.ts
```typescript
 1: export interface RGB {
 2:   r: number;
 3:   g: number;
 4:   b: number;
 5: }
 6: export interface Column {
 7:   x: number;
 8:   stackHeight: number;
 9:   stackCounter: number;
10: }
11: /**
12:  * Converts a hex color value to RGB
13:  * @param {string} hexValue - The hex color value to convert
14:  * @returns {RGB | null} The RGB color object or null if invalid hex value
15:  */
16: export const hexToRgb = (hexValue: string): RGB | null => {
17:   const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hexValue);
18:   return result
19:     ? {
20:         r: parseInt(result[1], 16),
21:         g: parseInt(result[2], 16),
22:         b: parseInt(result[3], 16),
23:       }
24:     : null;
25: };
26: /**
27:  * Generates a random integer
28:  * @param {number} max - The maximum value (exclusive)
29:  * @returns {number} A random integer between 0 and max-1
30:  */
31: export const getRandomInt = (max: number): number => {
32:   const array = new Uint32Array(1);
33:   window.crypto.getRandomValues(array);
34:   return array[0] % max;
35: };
36: /**
37:  * Gets a random character from the tileSet or generates a random ASCII character
38:  * @param {string[] | null} tileSet - Optional set of characters to choose from
39:  * @returns {string} A random character
40:  */
41: export const getRandomCharacter = (tileSet: string[] | null): string => {
42:   if (tileSet && Array.isArray(tileSet) && tileSet.length > 0) {
43:     return tileSet[getRandomInt(tileSet.length)];
44:   }
45:   return String.fromCharCode(33 + getRandomInt(94));
46: };
47: /**
48:  * Debounce function
49:  * @param {T} func - The function to debounce
50:  * @param {number} wait - The debounce wait time in milliseconds
51:  * @returns {(...args: Parameters<T>) => void} The debounced function
52:  */
53: export const debounce = <T extends (...args: unknown[]) => void>(
54:   func: T,
55:   wait: number,
56: ): ((...args: Parameters<T>) => void) => {
57:   let timeout: ReturnType<typeof setTimeout> | null = null;
58:   return (...args: Parameters<T>) => {
59:     if (timeout !== null) {
60:       clearTimeout(timeout);
61:     }
62:     timeout = setTimeout(() => func(...args), wait);
63:   };
64: };
```

## File: src/components/Animations/MatrixCursor.component.tsx
```typescript
  1: "use client";
  2: import { useEffect, RefObject, useState, useCallback } from "react";
  3: import "@/app/cursor.css";
  4: import { useMobile } from "../../hooks/useMobile"; // Pb51b
  5: interface MatrixCursorProps {
  6:   heroRef: RefObject<HTMLElement | null>;
  7: }
  8: interface CursorStyles extends React.CSSProperties {
  9:   "--cursor-x": string;
 10:   "--cursor-y": string;
 11: }
 12: interface MatrixTrail {
 13:   id: string;
 14:   x: number;
 15:   y: number;
 16:   char: string;
 17: }
 18: /**
 19:  * MatrixCursor component that renders a custom cursor with a matrix trail effect
 20:  * @param {MatrixCursorProps} props - The props for the MatrixCursor component
 21:  * @param {RefObject<HTMLElement | null>} props.heroRef - Reference to the hero section element
 22:  * @returns {JSX.Element | null} The rendered MatrixCursor component or null if heroRef is not available
 23:  */
 24: const MatrixCursor = ({ heroRef }: MatrixCursorProps) => {
 25:   const isMobile = useMobile(); // Pd528
 26:   const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });
 27:   const [isHovered, setIsHovered] = useState(false);
 28:   const [trails, setTrails] = useState<MatrixTrail[]>([]);
 29:   const getRandomChar = useCallback(() => {
 30:     const matrixChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*";
 31:     return matrixChars[Math.floor(Math.random() * matrixChars.length)];
 32:   }, []);
 33:   const createTrail = useCallback(
 34:     (x: number, y: number) => {
 35:       const newTrail: MatrixTrail = {
 36:         id: Math.random().toString(36).substring(2, 100),
 37:         x,
 38:         y,
 39:         char: getRandomChar(),
 40:       };
 41:       setTrails((currentTrails) => {
 42:         const updatedTrails = [...currentTrails, newTrail];
 43:         if (updatedTrails.length > 20) {
 44:           return updatedTrails.slice(1);
 45:         }
 46:         return updatedTrails;
 47:       });
 48:     },
 49:     [getRandomChar],
 50:   );
 51:   useEffect(() => {
 52:     const heroSection = heroRef.current;
 53:     if (!heroSection) return;
 54:     // Add cursor: none to the hero section when hovered
 55:     if (isHovered) {
 56:       heroSection.style.cursor = "none";
 57:     } else {
 58:       heroSection.style.cursor = "";
 59:     }
 60:     const handleMouseMove = (e: MouseEvent) => {
 61:       setCursorPosition({ x: e.clientX, y: e.clientY });
 62:       if (isHovered) {
 63:         createTrail(e.clientX, e.clientY);
 64:       }
 65:     };
 66:     const handleMouseEnter = () => {
 67:       setIsHovered(true);
 68:       heroSection.style.cursor = "none";
 69:     };
 70:     const handleMouseLeave = () => {
 71:       setIsHovered(false);
 72:       heroSection.style.cursor = "";
 73:       setTrails([]);
 74:     };
 75:     heroSection.addEventListener("mousemove", handleMouseMove);
 76:     heroSection.addEventListener("mouseenter", handleMouseEnter);
 77:     heroSection.addEventListener("mouseleave", handleMouseLeave);
 78:     return () => {
 79:       heroSection.removeEventListener("mousemove", handleMouseMove);
 80:       heroSection.removeEventListener("mouseenter", handleMouseEnter);
 81:       heroSection.removeEventListener("mouseleave", handleMouseLeave);
 82:       heroSection.style.cursor = "";
 83:     };
 84:   }, [heroRef, isHovered, createTrail]);
 85:   const handleAnimationEnd = useCallback((trailId: string) => {
 86:     setTrails((currentTrails) =>
 87:       currentTrails.filter((trail) => trail.id !== trailId),
 88:     );
 89:   }, []);
 90:   if (!heroRef.current || isMobile) return null; // P6ecf
 91:   const cursorStyles: CursorStyles = {
 92:     position: "fixed",
 93:     top: 0,
 94:     left: 0,
 95:     width: "100%",
 96:     height: "100%",
 97:     pointerEvents: "none",
 98:     zIndex: 9999,
 99:     "--cursor-x": `${cursorPosition.x}px`,
100:     "--cursor-y": `${cursorPosition.y}px`,
101:   };
102:   return (
103:     <div
104:       data-testid="matrix-cursor"
105:       className={isHovered ? "matrix-cursor" : ""}
106:       style={cursorStyles}
107:     >
108:       {trails.map((trail) => (
109:         <div
110:           key={trail.id}
111:           className="matrix-trail"
112:           style={{
113:             position: "fixed",
114:             left: `${trail.x}px`,
115:             top: `${trail.y}px`,
116:             zIndex: 10000,
117:             pointerEvents: "none",
118:           }}
119:           onAnimationEnd={() => handleAnimationEnd(trail.id)}
120:         >
121:           {trail.char}
122:         </div>
123:       ))}
124:       {isHovered && (
125:         <div
126:           style={{
127:             position: "fixed",
128:             top: 0,
129:             left: 0,
130:             width: "100%",
131:             height: "100%",
132:             pointerEvents: "none",
133:             zIndex: 9999,
134:           }}
135:         />
136:       )}
137:     </div>
138:   );
139: };
140: export default MatrixCursor;
```

## File: src/components/Animations/PageTransition.component.tsx
```typescript
 1: import { Variants, motion, AnimatePresence } from "motion/react";
 2: import { IAnimateProps } from "./types/Animations.types";
 3: /**
 4:  * Fade in animation used for page transitions
 5:  * @function PageTransition
 6:  * @param {ReactNode} children - Children content to render
 7:  * @param {string} cssClass - CSS classes to apply to component
 8:  * @returns {JSX.Element} - Rendered component
 9:  */
10: const PageTransition = ({ children, cssClass }: IAnimateProps) => {
11:   const pageTransitionVariants: Variants = {
12:     initial: { opacity: 0 },
13:     animate: { opacity: 1, transition: { duration: 1.0 } },
14:     exit: { opacity: 0 },
15:   };
16:   return (
17:     <AnimatePresence mode="wait">
18:       <motion.div
19:         className={cssClass}
20:         variants={pageTransitionVariants}
21:         initial="initial"
22:         animate="animate"
23:         exit="exit"
24:         data-testid="pagetransition"
25:       >
26:         {children}
27:       </motion.div>
28:     </AnimatePresence>
29:   );
30: };
31: export default PageTransition;
```

## File: src/components/Animations/RotatingLoader.component.tsx
```typescript
 1: /**
 2:  * RotatingLoader component
 3:  * Renders a rotating loader animation with Matrix theme
 4:  * @returns {JSX.Element} The rendered RotatingLoader component
 5:  */
 6: export default function RotatingLoader() {
 7:   return (
 8:     <div className="grid min-h-[140px] w-full place-items-center overflow-x-scroll rounded-lg p-6 lg:overflow-visible">
 9:       <div className="animate-matrix-glow">
10:         <svg
11:           className="animate-spin"
12:           viewBox="0 0 64 64"
13:           fill="none"
14:           xmlns="http://www.w3.org/2000/svg"
15:           width="64"
16:           height="64"
17:         >
18:           <path
19:             d="M32 3C35.8083 3 39.5794 3.75011 43.0978 5.20749C46.6163 6.66488 49.8132 8.80101 52.5061 11.4939C55.199 14.1868 57.3351 17.3837 58.7925 20.9022C60.2499 24.4206 61 28.1917 61 32C61 35.8083 60.2499 39.5794 58.7925 43.0978C57.3351 46.6163 55.199 49.8132 52.5061 52.5061C49.8132 55.199 46.6163 57.3351 43.0978 58.7925C39.5794 60.2499 35.8083 61 32 61C28.1917 61 24.4206 60.2499 20.9022 58.7925C17.3837 57.3351 14.1868 55.199 11.4939 52.5061C8.801 49.8132 6.66487 46.6163 5.20749 43.0978C3.7501 39.5794 3 35.8083 3 32C3 28.1917 3.75011 24.4206 5.2075 20.9022C6.66489 17.3837 8.80101 14.1868 11.4939 11.4939C14.1868 8.80099 17.3838 6.66487 20.9022 5.20749C24.4206 3.7501 28.1917 3 32 3L32 3Z"
20:             className="stroke-matrix-dark"
21:             strokeWidth="5"
22:             strokeLinecap="round"
23:             strokeLinejoin="round"
24:           ></path>
25:           <path
26:             d="M32 3C36.5778 3 41.0906 4.08374 45.1692 6.16256C49.2477 8.24138 52.7762 11.2562 55.466 14.9605C58.1558 18.6647 59.9304 22.9531 60.6448 27.4748C61.3591 31.9965 60.9928 36.6232 59.5759 40.9762"
27:             className="stroke-matrix-light"
28:             strokeWidth="5"
29:             strokeLinecap="round"
30:             strokeLinejoin="round"
31:           ></path>
32:         </svg>
33:       </div>
34:     </div>
35:   );
36: }
```

## File: src/components/CV/CVContent.component.tsx
```typescript
  1: import PageHeader from "@/components/UI/PageHeader.component";
  2: import Button from "@/components/UI/Button.component";
  3: import Tabs from "@/components/UI/Tabs.component";
  4: interface CVData {
  5:   keyQualifications: string[];
  6:   experience: Array<{
  7:     period: string;
  8:     company: string;
  9:     role: string;
 10:     description: string;
 11:   }>;
 12:   education: Array<{
 13:     period: string;
 14:     institution: string;
 15:     degree: string;
 16:     description: string;
 17:   }>;
 18:   volunteerWork: Array<{
 19:     period: string;
 20:     organization: string;
 21:     role: string;
 22:     description: string;
 23:   }>;
 24: }
 25: interface CVContentProps {
 26:   cvData: CVData;
 27: }
 28: /**
 29:  * CVContent component for rendering the CV page with tabs
 30:  * @param {CVContentProps} props - The props for the CVContent component
 31:  * @returns {JSX.Element} The rendered CVContent component
 32:  */
 33: const CVContent: React.FC<CVContentProps> = ({ cvData }) => {
 34:   const tabs = [
 35:     {
 36:       id: "qualifications",
 37:       label: "Nøkkelkvalifikasjoner",
 38:       content: (
 39:         <ul className="list-disc pl-5 text-slate-300/[0.9]">
 40:           {cvData.keyQualifications.map((qual) => (
 41:             <li key={qual} className="mb-2">
 42:               {qual}
 43:             </li>
 44:           ))}
 45:         </ul>
 46:       ),
 47:     },
 48:     {
 49:       id: "experience",
 50:       label: "Erfaring",
 51:       content: (
 52:         <div className="text-slate-300/[0.9]">
 53:           {cvData.experience.map((exp) => (
 54:             <div key={exp.description} className="mb-6">
 55:               <h3 className="font-semibold text-slate-100">
 56:                 {exp.period} - {exp.company}
 57:               </h3>
 58:               {exp.role && <p className="italic">{exp.role}</p>}
 59:               <p>{exp.description}</p>
 60:             </div>
 61:           ))}
 62:         </div>
 63:       ),
 64:     },
 65:     {
 66:       id: "education",
 67:       label: "Utdanning",
 68:       content: (
 69:         <div className="text-slate-300/[0.9]">
 70:           {cvData.education.map((edu) => (
 71:             <div key={edu.description} className="mb-6">
 72:               <h3 className="font-semibold text-slate-100">
 73:                 {edu.period} - {edu.institution}
 74:               </h3>
 75:               {edu.degree && <p className="italic">{edu.degree}</p>}
 76:               <p>{edu.description}</p>
 77:             </div>
 78:           ))}
 79:         </div>
 80:       ),
 81:     },
 82:     {
 83:       id: "volunteerWork",
 84:       label: "Frivillig arbeid",
 85:       content: (
 86:         <div className="text-slate-300/[0.9]">
 87:           {cvData.volunteerWork?.map((vol) => (
 88:             <div key={vol.description} className="mb-6">
 89:               <h3 className="font-semibold text-slate-100">
 90:                 {vol.period} - {vol.organization}
 91:               </h3>
 92:               {vol.role && <p className="italic">{vol.role}</p>}
 93:               <p>{vol.description}</p>
 94:             </div>
 95:           ))}
 96:         </div>
 97:       ),
 98:     },
 99:   ];
100:   return (
101:     <main id="maincontent">
102:       <div className="mt-32 bg-graybg">
103:         <PageHeader>CV</PageHeader>
104:         <div className="px-4 lg:px-0 xl:px-0 md:px-0">
105:           <div className="container mx-auto bg-slate-700 rounded shadow sm:mb-4">
106:             <div className="p-4 mx-auto md:h-full mt-4 flex flex-col justify-center items-center md:min-h-[600px] min-h-[400px]">
107:               <div className="p-4 text-lg rounded md:w-full">
108:                 <div className="md:flex md:justify-center hidden">
109:                   <Tabs tabs={tabs} />
110:                 </div>
111:                 <div className="mx-auto text-center md:mt-8 md:hidden">
112:                   <Button href="./cv2.pdf" renderAs="a" type="button">
113:                     Last ned PDF
114:                   </Button>
115:                 </div>
116:               </div>
117:             </div>
118:           </div>
119:         </div>
120:       </div>
121:     </main>
122:   );
123: };
124: export default CVContent;
```

## File: src/components/ErrorBoundary/ErrorBoundary.tsx
```typescript
 1: "use client";
 2: import React, { ReactNode, ErrorInfo } from "react";
 3: import {
 4:   ErrorBoundary as ReactErrorBoundary,
 5:   FallbackProps,
 6: } from "react-error-boundary";
 7: import Fallback from "./Fallback.component";
 8: interface ErrorBoundaryProps {
 9:   children: ReactNode;
10:   compact?: boolean;
11: }
12: /**
13:  * ErrorBoundary component that catches JavaScript errors anywhere in the child component tree.
14:  * It logs the error and displays a fallback UI instead of the component tree that crashed.
15:  *
16:  * @param {Object} props - The component props
17:  * @param {ReactNode} props.children - The child components to be wrapped by the ErrorBoundary
18:  * @param {boolean} props.compact - Whether to show a compact error fallback (used in stories)
19:  * @returns {JSX.Element} A React component that catches errors in its child components
20:  */
21: const ErrorBoundary: React.FC<ErrorBoundaryProps> = ({
22:   children,
23:   compact = false,
24: }) => {
25:   const handleError = (error: Error, info: ErrorInfo) => {
26:     console.error("Uventet feil i Matrix:", error, info);
27:   };
28:   const ErrorFallback = (props: FallbackProps) => {
29:     return <Fallback {...props} compact={compact} />;
30:   };
31:   return (
32:     <ReactErrorBoundary FallbackComponent={ErrorFallback} onError={handleError}>
33:       {children}
34:     </ReactErrorBoundary>
35:   );
36: };
37: export default ErrorBoundary;
```

## File: src/components/ErrorBoundary/ErrorFallback.component.tsx
```typescript
 1: import React from "react";
 2: import ReactMatrixAnimation from "../../components/Animations/Matrix.component";
 3: import Pill from "../../components/UI/Pill.component";
 4: interface ErrorFallbackProps {
 5:   error: Error;
 6:   compact?: boolean;
 7: }
 8: /**
 9:  * ErrorFallback component to display when an error occurs within the ErrorBoundary.
10:  * It shows a Matrix-themed error message with the option to reload the page.
11:  *
12:  * @param {Object} props - The component props
13:  * @param {Error} props.error - The error object caught by the ErrorBoundary
14:  * @param {boolean} props.compact - Whether to show a compact version (used in stories)
15:  * @returns {JSX.Element} A React component displaying the error message and reload option
16:  */
17: const ErrorFallback: React.FC<ErrorFallbackProps> = ({
18:   error,
19:   compact = false,
20: }) => {
21:   if (compact) {
22:     return (
23:       <div className="relative bg-gray-900 p-4 rounded-lg overflow-hidden">
24:         <div className="absolute inset-0 opacity-30">
25:           <ReactMatrixAnimation />
26:         </div>
27:         <div className="relative z-10 flex flex-col items-center text-center">
28:           <h2 className="text-white text-lg mb-2">
29:             Har du funnet en feil i Matrix?
30:           </h2>
31:           <p className="text-white text-sm mb-3">
32:             {error.message || "En uventet feil har oppstått."}
33:           </p>
34:           <button
35:             onClick={() => window.location.reload()}
36:             className="px-3 py-1 bg-matrix-light text-black rounded text-sm hover:bg-matrix-dark"
37:           >
38:             Returner til Matrix
39:           </button>
40:         </div>
41:       </div>
42:     );
43:   }
44:   return (
45:     <div className="absolute w-full h-full">
46:       <ReactMatrixAnimation />
47:       <div className="absolute inset-0 flex flex-col items-center justify-center h-full">
48:         <h1 className="text-white text-5xl m-6">
49:           Har du funnet en feil i Matrix?
50:         </h1>
51:         <p className="text-white text-xl mb-6">
52:           {error.message || "En uventet feil har oppstått."}
53:         </p>
54:         <Pill
55:           text="Returner til Matrix"
56:           onClick={() => window.location.reload()}
57:         />
58:       </div>
59:     </div>
60:   );
61: };
62: export default ErrorFallback;
```

## File: src/components/ErrorBoundary/ErrorFallbackWrapper.component.tsx
```typescript
 1: import React from "react";
 2: import ErrorFallback from "./ErrorFallback.component";
 3: interface ErrorFallbackWrapperProps {
 4:   error: Error;
 5:   compact?: boolean;
 6: }
 7: /**
 8:  * Wrapper component for ErrorFallback that handles compact mode
 9:  * @param {Object} props - The component props
10:  * @param {Error} props.error - The error object to display
11:  * @param {boolean} props.compact - Whether to show a compact version
12:  * @returns {JSX.Element} The wrapped ErrorFallback component
13:  */
14: const ErrorFallbackWrapper: React.FC<ErrorFallbackWrapperProps> = ({
15:   error,
16:   compact,
17: }) => <ErrorFallback error={error} compact={compact} />;
18: export default ErrorFallbackWrapper;
```

## File: src/components/ErrorBoundary/Fallback.component.tsx
```typescript
 1: import React from "react";
 2: import { FallbackProps } from "react-error-boundary";
 3: import ErrorFallbackWrapper from "./ErrorFallbackWrapper.component";
 4: interface FallbackComponentProps extends FallbackProps {
 5:   compact: boolean;
 6: }
 7: const Fallback: React.FC<FallbackComponentProps> = ({ error, compact }) => {
 8:   return <ErrorFallbackWrapper error={error} compact={compact} />;
 9: };
10: export default Fallback;
```

## File: src/components/Index/Hero.component.tsx
```typescript
 1: "use client";
 2: import React, { useRef } from "react";
 3: import dynamic from "next/dynamic";
 4: import Icons from "./Icons.component";
 5: import FadeDown from "../Animations/FadeDown.component";
 6: import FadeUp from "../Animations/FadeUp.component";
 7: import RotatingLoader from "../Animations/RotatingLoader.component";
 8: import MobileBackground from "./MobileBackground.component";
 9: import MatrixCursor from "../Animations/MatrixCursor.component";
10: const ReactMatrixAnimation = dynamic(
11:   () => import("../Animations/Matrix.component"),
12:   {
13:     ssr: false,
14:     loading: () => (
15:       <div className="text-center">
16:         <RotatingLoader />
17:       </div>
18:     ),
19:   },
20: );
21: type THero = { text: string };
22: interface IContent {
23:   content: THero[];
24: }
25: /**
26:  * Hero component for rendering the main hero section of the page
27:  * @param {IContent} props - The props for the Hero component
28:  * @param {THero[]} props.content - Array of text content for the hero section
29:  * @returns {JSX.Element} The rendered Hero component
30:  */
31: const Hero = ({ content }: IContent) => {
32:   const heroRef = useRef<HTMLElement>(null);
33:   return (
34:     <article
35:       aria-label="Kontainer for animasjoner av introtekst"
36:       id="main-hero"
37:       data-testid="main-hero"
38:       ref={heroRef}
39:       className="relative flex flex-col justify-center text-lg h-[32rem] md:h-[30rem] overflow-hidden w-full"
40:     >
41:       <MatrixCursor heroRef={heroRef} />
42:       <MobileBackground />
43:       <div className="hidden md:block absolute inset-0 w-full h-full">
44:         <ReactMatrixAnimation />
45:       </div>
46:       <div className="relative z-10">
47:         <section className="text-left md:text-center px-4 md:px-0">
48:           <FadeDown delay={0.5}>
49:             <h1
50:               data-cy="hei"
51:               className="text-6xl font-bold text-[#00ff62] text-center"
52:             >
53:               {content.length > 0 ? content[0].text : "Hei!"}
54:             </h1>
55:           </FadeDown>
56:           <FadeUp delay={0.9} cssClass="mt-4">
57:             <h2 className="text-2xl text-slate-300 text-left md:text-center  ">
58:               {content.length > 0 && content[1].text}
59:             </h2>
60:           </FadeUp>
61:           <FadeDown delay={1.4} cssClass="mt-4">
62:             <p className="text-xl text-slate-300 text-left md:text-center ">
63:               {content.length > 0 && content[2].text}
64:             </p>
65:           </FadeDown>
66:           <div className="mt-4">
67:             <Icons />
68:           </div>
69:         </section>
70:       </div>
71:     </article>
72:   );
73: };
74: export default Hero;
```

## File: src/components/Index/Icons.component.tsx
```typescript
 1: import { IconType } from "react-icons";
 2: import { FaReact, FaVuejs, FaPhp } from "react-icons/fa";
 3: import { SiTypescript, SiWordpress } from "react-icons/si";
 4: import Grow from "../Animations/Grow.component";
 5: interface IAnimateIcons {
 6:   id: number;
 7:   Icon: IconType;
 8:   iconName: string;
 9: }
10: const AnimateIcons: IAnimateIcons[] = [
11:   {
12:     id: 0,
13:     Icon: FaReact,
14:     iconName: "React",
15:   },
16:   {
17:     id: 1,
18:     Icon: FaVuejs,
19:     iconName: "VueJS",
20:   },
21:   {
22:     id: 2,
23:     Icon: SiTypescript,
24:     iconName: "TypeScript",
25:   },
26:   {
27:     id: 3,
28:     Icon: SiWordpress,
29:     iconName: "WordPress",
30:   },
31:   {
32:     id: 4,
33:     Icon: FaPhp,
34:     iconName: "PHP",
35:   },
36: ];
37: /**
38:  * Icons component that renders SVG icons used on the front page
39:  * Uses Framer Motion for animations to show the SVGs
40:  * @returns {JSX.Element} The rendered Icons component
41:  */
42: const Icons = () => (
43:   <div
44:     data-testid="icons"
45:     className="flex flex-wrap justify-center gap-8 p-2 text-slate-300/[0.8]"
46:   >
47:     {AnimateIcons.map(({ Icon, id, iconName }) => (
48:       <span className="relative" key={id}>
49:         <Grow delay={1.8 + id * 0.2}>
50:           <div className="relative group">
51:             <div className="p-4 rounded-lg bg-slate-900/50 backdrop-blur-sm border border-slate-800/50 transition-all duration-300 group-hover:border-[#00ff62]/30 group-hover:bg-slate-900/70">
52:               <Icon
53:                 data-testid={iconName}
54:                 aria-label={`${iconName} ikon`}
55:                 title={`${iconName} ikon`}
56:                 size="2.5em"
57:                 className="transition-all duration-300 group-hover:text-[#00ff62]"
58:               />
59:             </div>
60:             <span className="absolute -bottom-6 left-1/2 -translate-x-1/2 text-sm font-medium opacity-0 group-hover:opacity-100 transition-all duration-300 whitespace-nowrap text-[#00ff62]">
61:               {iconName}
62:             </span>
63:           </div>
64:         </Grow>
65:       </span>
66:     ))}
67:   </div>
68: );
69: export default Icons;
```

## File: src/components/Index/IndexContent.component.tsx
```typescript
 1: "use client";
 2: import Section from "./Section.component";
 3: interface IChild {
 4:   _key: string;
 5:   _type: string;
 6:   marks: string[];
 7:   text: string;
 8: }
 9: interface IText {
10:   _key: string;
11:   _type: string;
12:   children: IChild[];
13:   markDefs: string[];
14:   style: string;
15: }
16: interface IContent {
17:   id: string;
18:   text: IText[];
19:   title: string;
20: }
21: /**
22:  * IndexContent component that renders multiple content sections with alternating visual styles
23:  * @param {Object} props - The props for the IndexContent component
24:  * @param {IContent[]} props.pageContent - Array of content sections to render. Each section alternates between default and alternate variant
25:  * @returns {JSX.Element} The rendered IndexContent component
26:  * @throws {Error} Throws an error if no content is available
27:  */
28: const IndexContent = ({ pageContent }: { pageContent: IContent[] }) => {
29:   if (!pageContent || pageContent.length === 0) {
30:     throw new Error("Ingen innhold tilgjengelig");
31:   }
32:   return (
33:     <div className="w-screen md:w-full overflow-hidden -mb-8">
34:       {pageContent.map((page, index) => (
35:         <Section
36:           key={page.id}
37:           {...page}
38:           variant={index % 2 === 0 ? "default" : "alternate"}
39:         />
40:       ))}
41:     </div>
42:   );
43: };
44: export default IndexContent;
```

## File: src/components/Index/MobileBackground.component.tsx
```typescript
 1: /**
 2:  * MobileBackground component that renders a background image for mobile devices
 3:  * @returns {JSX.Element} The rendered MobileBackground component
 4:  */
 5: const MobileBackground = () => (
 6:   <div
 7:     className="absolute inset-0 md:hidden bg-cover bg-center bg-no-repeat pb-4"
 8:     style={{
 9:       backgroundImage: "url('/images/mobilbg.webp')",
10:       top: "-0.5rem",
11:       marginBottom: "0.5rem",
12:     }}
13:   />
14: );
15: export default MobileBackground;
```

## File: src/components/Index/Section.component.tsx
```typescript
 1: "use client";
 2: import { PortableText } from "@portabletext/react";
 3: import { useState } from "react";
 4: import BounceInScroll from "../Animations/BounceInScroll.component";
 5: import Button from "../UI/Button.component";
 6: import { myPortableTextComponents } from "@/utils/portableTextComponents";
 7: interface IChild {
 8:   _key: string;
 9:   _type: string;
10:   marks: string[];
11:   text: string;
12: }
13: interface IText {
14:   _key: string;
15:   _type: string;
16:   children: IChild[];
17:   markDefs: string[];
18:   style: string;
19: }
20: interface IContent {
21:   text: IText[];
22:   title: string;
23:   variant?: "default" | "alternate";
24: }
25: /**
26:  * Section component that renders a single content section
27:  * @param {IContent} props - The props for the Section component
28:  * @param {string} props.text - The text content of the section
29:  * @param {string} props.title - The title of the section
30:  * @param {"default" | "alternate"} [props.variant="default"] - Visual style variant of the section. Controls background color.
31:  * @returns {JSX.Element | null} The rendered Section component or null if invalid data
32:  */
33: const Section = ({ text, title, variant = "default" }: IContent) => {
34:   const [shouldError, setShouldError] = useState(false);
35:   if (!title || !text) {
36:     console.error(
37:       `Ugyldig seksjon data: tittel=${title}, tekst=${JSON.stringify(text)}`,
38:     );
39:     return null;
40:   }
41:   if (shouldError) {
42:     throw new Error("En uventet feil har oppstått");
43:   }
44:   const sectionStyles = {
45:     default: "bg-slate-900",
46:     alternate: "bg-slate-800/30",
47:   };
48:   return (
49:     <section
50:       aria-label={title}
51:       data-testid="sanity-section"
52:       className={`
53:         md:py-6 
54:         relative
55:         transition-colors
56:         duration-300
57:         ${sectionStyles[variant]}
58:       `}
59:     >
60:       <div className="p-6 text-lg h-full max-w-7xl mx-auto">
61:         <BounceInScroll viewAmount={0}>
62:           <h2
63:             data-testid="sanity-title"
64:             data-cy={title}
65:             className="text-3xl text-center text-slate-100"
66:           >
67:             {title}
68:           </h2>
69:           <div className="flex justify-center">
70:             <div className="mt-4 text-lg text-left md:max-w-3xl text-slate-300/[0.9]">
71:               <PortableText
72:                 value={text}
73:                 components={myPortableTextComponents}
74:               />
75:             </div>
76:           </div>
77:           {process.env.NODE_ENV === "development" && (
78:             <Button onClick={() => setShouldError(true)} type="button">
79:               Utløs Testfeil
80:             </Button>
81:           )}
82:         </BounceInScroll>
83:       </div>
84:     </section>
85:   );
86: };
87: export default Section;
```

## File: src/components/Kontakt/config/formConfig.ts
```typescript
 1: import { z } from "zod";
 2: export const formSchema = z.object({
 3:   navn: z
 4:     .string()
 5:     .min(1, "Fullt navn er påkrevd")
 6:     .regex(/^[a-zA-ZæøåÆØÅ ]+$/, "Vennligst bruk norske bokstaver"),
 7:   telefon: z
 8:     .string()
 9:     .min(1, "Telefonnummer er påkrevd")
10:     .regex(/^\d{8}$/, "Vennligst oppgi et gyldig telefonnummer"),
11:   tekst: z.string().min(1, "Beskjed er påkrevd"),
12: });
13: export type FormData = z.infer<typeof formSchema>;
14: export const formFields = [
15:   {
16:     name: "navn" as const,
17:     label: "Fullt navn",
18:     inputPattern: /^[a-zA-ZæøåÆØÅ ]+$/,
19:     title: "Vennligst bruk norske bokstaver",
20:   },
21:   {
22:     name: "telefon" as const,
23:     label: "Telefonnummer",
24:     inputPattern: /^\d{8}$/,
25:     title: "Vennligst oppgi et gyldig telefonnummer",
26:   },
27:   {
28:     name: "tekst" as const,
29:     label: "Hva ønsker du å si?",
30:     type: "textarea" as const,
31:   },
32: ] as const;
```

## File: src/components/Kontakt/KontaktContent.component.tsx
```typescript
 1: "use client";
 2: import emailjs from "@emailjs/browser";
 3: import { useState } from "react";
 4: import PageHeader from "@/components/UI/PageHeader.component";
 5: import GenericForm from "@/components/UI/GenericForm.component";
 6: import { formSchema, formFields, FormData } from "./config/formConfig";
 7: /**
 8:  * Renders contact form. Uses EmailJS to send the emails.
 9:  * @function KontaktContent
10:  * @returns {JSX.Element} - Rendered component
11:  */
12: const KontaktContent = () => {
13:   const [serverResponse, setServerResponse] = useState<string>("");
14:   /**
15:    * Handles the form submission and sends an email using the provided API keys.
16:    *
17:    * @param {FormData} data - The form data.
18:    * @return {Promise<void>} No return value.
19:    */
20:   const onSubmit = async (data: FormData): Promise<void> => {
21:     const EMAIL_API_KEY = process.env.NEXT_PUBLIC_EMAIL_API_KEY ?? "changeme";
22:     const TEMPLATE_KEY =
23:       process.env.NEXT_PUBLIC_EMAIL_TEMPLATE_KEY ?? "changeme";
24:     const SERVICE_KEY = process.env.NEXT_PUBLIC_EMAIL_SERVICE_KEY ?? "changeme";
25:     try {
26:       emailjs.init(EMAIL_API_KEY);
27:       await emailjs.send(SERVICE_KEY, TEMPLATE_KEY, data);
28:       setServerResponse("Takk for din beskjed");
29:     } catch {
30:       setServerResponse("Feil under sending av skjema");
31:     }
32:   };
33:   return (
34:     <main data-testid="kontaktcontent" id="maincontent">
35:       <div className="mt-32 bg-graybg">
36:         <PageHeader>Kontakt</PageHeader>
37:         <div className="px-4 lg:px-0 xl:px-0 md:px-0">
38:           <div className="container mx-auto bg-slate-700 rounded shadow sm:mb-4">
39:             <div className="p-4 mx-auto md:h-full mt-4 flex flex-col justify-center items-center min-h-[470px]">
40:               <div className="p-2 md:p-6 pt-8">
41:                 {serverResponse ? (
42:                   <h3 className="m-2 h-32 text-xl text-center text-gray-300">
43:                     {serverResponse}
44:                   </h3>
45:                 ) : (
46:                   <div className="bg-gray-800 p-4 md:p-6 rounded-lg pt-8">
47:                     <GenericForm<typeof formSchema>
48:                       formSchema={formSchema}
49:                       onSubmit={onSubmit}
50:                       fields={formFields}
51:                       submitButtonText="Send skjema"
52:                     />
53:                   </div>
54:                 )}
55:               </div>
56:             </div>
57:           </div>
58:         </div>
59:       </div>
60:     </main>
61:   );
62: };
63: export default KontaktContent;
```

## File: src/components/Layout/DesktopNavigation.component.tsx
```typescript
 1: import React from "react";
 2: import { MotionLi, MotionUl } from "@/lib/framer/client";
 3: import NavigationLink from "./NavigationLink.component";
 4: import { useNavigation } from "@/hooks/useNavigation";
 5: interface NavigationLink {
 6:   title: string;
 7:   name: string;
 8:   hash: string;
 9:   href: string;
10:   externalLink: boolean;
11: }
12: interface DesktopNavigationProps {
13:   navigationLinks: NavigationLink[];
14: }
15: /**
16:  * DesktopNavigation component that renders the navigation menu for desktop view
17:  * @param {DesktopNavigationProps} props - The props for the DesktopNavigation component
18:  * @param {NavigationLink[]} props.navigationLinks - Array of navigation links to be rendered
19:  * @returns {JSX.Element} The rendered DesktopNavigation component
20:  */
21: const DesktopNavigation: React.FC<DesktopNavigationProps> = ({
22:   navigationLinks,
23: }) => {
24:   const { isLinkActive } = useNavigation(navigationLinks);
25:   return (
26:     <MotionUl
27:       className="hidden md:flex md:w-[22rem] flex-wrap items-center justify-center gap-y-1 text-[0.9rem] font-medium text-slate-200 sm:w-[initial] sm:flex-nowrap sm:gap-5"
28:       variants={{
29:         hidden: { opacity: 0 },
30:         visible: {
31:           opacity: 1,
32:           transition: {
33:             staggerChildren: 0.1,
34:             delayChildren: 0.3,
35:           },
36:         },
37:       }}
38:       initial="hidden"
39:       animate="visible"
40:     >
41:       {navigationLinks.map((link) => (
42:         <MotionLi
43:           className="h-3/4 flex items-center justify-center relative"
44:           key={link.name}
45:           variants={{
46:             hidden: { y: -20, opacity: 0 },
47:             visible: { y: 0, opacity: 1 },
48:           }}
49:           transition={{ duration: 0.3 }}
50:         >
51:           <NavigationLink
52:             name={link.name}
53:             href={link.href}
54:             isActive={isLinkActive(link.href)}
55:           />
56:         </MotionLi>
57:       ))}
58:     </MotionUl>
59:   );
60: };
61: export default DesktopNavigation;
```

## File: src/components/Layout/Footer.component.tsx
```typescript
 1: "use client";
 2: import { IconContext } from "react-icons";
 3: import { BiCopyright } from "react-icons/bi";
 4: /**
 5:  * Renders the footer for the application
 6:  * @function Footer
 7:  * @returns {JSX.Element} - Rendered Hamburger component
 8:  */
 9: const Footer = () => (
10:   <footer
11:     className="mt-8"
12:     aria-label="Innholdet for bunnteksten med copyright"
13:     data-testid="footer"
14:   >
15:     <div className="bg-slate-800 shadow min-h-[50px]">
16:       <div className="w-full mx-auto p-6 text-center font-semibold">
17:         <div className="flex justify-center items-center space-x-2">
18:           <span>Copyright Daniel Fjeldstad</span>
19:           <IconContext.Provider value={{ className: "inline-block" }}>
20:             <BiCopyright size="1.2em" />
21:           </IconContext.Provider>
22:           <span>{new Date().getFullYear()}</span>
23:         </div>
24:       </div>
25:     </div>
26:   </footer>
27: );
28: export default Footer;
```

## File: src/components/Layout/Hamburger.component.tsx
```typescript
 1: "use client";
 2: export interface IHamburgerProps {
 3:   onClick: () => void;
 4:   animatetoX: boolean;
 5: }
 6: /**
 7:  * Hamburger component used in mobile menu. Animates to a X when clicked
 8:  * @function Hamburger
 9:  * @param {() => void} onClick - onClick handler to respond to clicks
10:  * @param {boolean} animatetoX - Should the hamburger animate to a X?
11:  * @returns {JSX.Element} - Rendered component
12:  */
13: const Hamburger = ({ onClick, animatetoX }: IHamburgerProps) => {
14:   const hamburgerLine =
15:     "h-1 w-10 my-1 rounded-full bg-white transition ease transform duration-300 not-sr-only";
16:   const opacityFull = "opacity-100 group-hover:opacity-100";
17:   return (
18:     <button
19:       className="flex flex-col w-16 rounded justify-center items-center group z-50 pr-6"
20:       data-cy="hamburger"
21:       data-testid="hamburger"
22:       onClick={onClick}
23:       aria-expanded={animatetoX}
24:       type="button"
25:     >
26:       <span className="sr-only text-white text-2xl">Hamburger</span>
27:       <span
28:         data-testid="hamburgerline"
29:         className={`${hamburgerLine} ${
30:           animatetoX
31:             ? "rotate-45 translate-y-3 opacity-100 group-hover:opacity-100"
32:             : opacityFull
33:         }`}
34:       />
35:       <span
36:         className={`${hamburgerLine} ${animatetoX ? "opacity-0" : opacityFull}`}
37:       />
38:       <span
39:         className={`${hamburgerLine} ${
40:           animatetoX
41:             ? "-rotate-45 -translate-y-3 opacity-100 group-hover:opacity-100"
42:             : opacityFull
43:         }`}
44:       />
45:     </button>
46:   );
47: };
48: export default Hamburger;
```

## File: src/components/Layout/Header.component.tsx
```typescript
 1: "use client";
 2: import React from "react";
 3: import { MotionDiv } from "@/lib/framer/client";
 4: import MobileMenu from "./MobileMenu.component";
 5: import DesktopNavigation from "./DesktopNavigation.component";
 6: interface NavigationLink {
 7:   title: string;
 8:   name: string;
 9:   hash: string;
10:   href: string;
11:   externalLink: boolean;
12: }
13: interface HeaderProps {
14:   navigationLinks: NavigationLink[];
15: }
16: /**
17:  * Header component that renders the navigation bar
18:  * @param {HeaderProps} props - The props for the Header component
19:  * @param {NavigationLink[]} props.navigationLinks - Array of navigation links
20:  * @returns {JSX.Element} The rendered Header component
21:  */
22: const Header: React.FC<HeaderProps> = ({ navigationLinks }) => {
23:   return (
24:     <header className="z-[999] relative">
25:       <div
26:         className="sm:hidden w-full w-[450px] md:max-w-[36rem] bg-slate-800 bg-opacity-80 fixed top-0 left-1/2 h-[4.5rem] shadow rounded-none shadow-lg shadow-black/[0.03] backdrop-blur-[0.5rem] sm:top-6 sm:h-[3.25rem] md:w-[36rem] sm:rounded-full mr-8 md:mr-0"
27:         style={{ transform: "translateX(-50%)" }}
28:       />
29:       <MotionDiv
30:         className="hidden sm:block w-full w-[450px] md:max-w-[36rem] bg-slate-800 bg-opacity-80 fixed top-0 left-1/2 h-[4.5rem] shadow rounded-none shadow-lg shadow-black/[0.03] backdrop-blur-[0.5rem] sm:top-6 sm:h-[3.25rem] md:w-[36rem] sm:rounded-full mr-8 md:mr-0"
31:         initial={{ y: -100, x: "-50%", opacity: 0 }}
32:         animate={{
33:           y: 0,
34:           x: "-51%",
35:           opacity: 1,
36:           transition: {
37:             y: { duration: 0.6, ease: "easeOut" },
38:             opacity: { duration: 0.6, ease: "easeOut" },
39:           },
40:         }}
41:       />
42:       <nav className="flex fixed top-[0.65rem] left-1/2 h-12 -translate-x-1/2 py-2 sm:top-[1.7rem] sm:h-[initial] sm:py-0 w-full max-w-[370px] justify-end md:justify-between items-center">
43:         <DesktopNavigation navigationLinks={navigationLinks} />
44:         <div id="hamburger-div" data-cy="hamburger-div" className="md:hidden">
45:           <MobileMenu links={navigationLinks} />
46:         </div>
47:       </nav>
48:     </header>
49:   );
50: };
51: export default Header;
```

## File: src/components/Layout/MobileMenu.component.tsx
```typescript
  1: "use client";
  2: import { useRef } from "react";
  3: import { useClickAway } from "react-use";
  4: import Link from "next/link";
  5: import { usePathname } from "next/navigation";
  6: import { AnimatePresence, useCycle, motion } from "motion/react";
  7: import Hamburger from "./Hamburger.component";
  8: interface ILink {
  9:   title: string;
 10:   name: string;
 11:   hash: string;
 12:   href: string;
 13:   externalLink: boolean;
 14: }
 15: interface IMobileMenuProps {
 16:   links: ILink[];
 17: }
 18: /**
 19:  * MobileMenu component that renders a responsive navigation menu for mobile devices
 20:  * @param {Object} props
 21:  * @param {ILink[]} props.links - Array of navigation link objects
 22:  * @returns {JSX.Element} The rendered MobileMenu component
 23:  */
 24: const MobileMenu = ({ links }: IMobileMenuProps) => {
 25:   const [isExpanded, setisExpanded] = useCycle<boolean>(false, true);
 26:   const ref = useRef(null);
 27:   const pathname = usePathname();
 28:   const handleClickOutside = () => {
 29:     setisExpanded(0);
 30:   };
 31:   useClickAway(ref, handleClickOutside);
 32:   const menuVariants = {
 33:     closed: {
 34:       x: "125%",
 35:       transition: {
 36:         type: "spring",
 37:         stiffness: 60,
 38:         damping: 10,
 39:         delay: 0.3,
 40:       },
 41:     },
 42:     open: {
 43:       x: 0,
 44:       transition: {
 45:         type: "spring",
 46:         stiffness: 60,
 47:         damping: 10,
 48:       },
 49:     },
 50:   };
 51:   const itemVariants = {
 52:     closed: (i: number) => ({
 53:       x: i % 2 === 0 ? "-50%" : "50%",
 54:       opacity: 0,
 55:       transition: {
 56:         type: "spring",
 57:         stiffness: 120,
 58:         damping: 12,
 59:         duration: 0.25,
 60:       },
 61:     }),
 62:     open: (i: number) => ({
 63:       x: 0,
 64:       opacity: 1,
 65:       transition: {
 66:         type: "spring",
 67:         stiffness: 120,
 68:         damping: 12,
 69:         delay: i * 0.25,
 70:       },
 71:     }),
 72:   };
 73:   return (
 74:     <div
 75:       ref={ref}
 76:       className="z-50 md:hidden lg:hidden xl:hidden"
 77:       data-testid="mobilemenu"
 78:     >
 79:       <Hamburger onClick={setisExpanded} animatetoX={isExpanded} />
 80:       <AnimatePresence>
 81:         {isExpanded && (
 82:           <motion.div
 83:             id="mobile-menu"
 84:             data-testid="mobile-menu"
 85:             data-cy="mobile-menu"
 86:             aria-hidden={!isExpanded}
 87:             className="fixed top-0 right-0 w-[calc(100vw+20px)] h-[calc(100vh+20px)] bg-gray-800 flex items-center justify-center -z-10 -mt-4"
 88:             initial="closed"
 89:             animate="open"
 90:             exit="closed"
 91:             variants={menuVariants}
 92:           >
 93:             <nav aria-label="Navigasjon" className="w-full">
 94:               <motion.ul
 95:                 className="w-full"
 96:                 initial="closed"
 97:                 animate="open"
 98:                 exit="closed"
 99:                 variants={{
100:                   open: {
101:                     transition: { staggerChildren: 0.07, delayChildren: 0.2 },
102:                   },
103:                   closed: {
104:                     transition: { staggerChildren: 0.05, staggerDirection: -1 },
105:                   },
106:                 }}
107:               >
108:                 {links.map(({ title, name, href, externalLink }, index) => (
109:                   <motion.li
110:                     key={title}
111:                     className="block p-4 text-xl text-white mx-auto text-center border-t border-b border-gray-600 border-solid shadow"
112:                     data-cy="mobile-menu-item"
113:                     custom={index}
114:                     variants={itemVariants}
115:                   >
116:                     {externalLink ? (
117:                       <a
118:                         aria-label={name}
119:                         href={href}
120:                         target="_blank"
121:                         rel="noreferrer"
122:                         data-testid={`mobil-${name}`}
123:                         className="flex w-full items-center justify-center px-2 py-2 hover:text-white transition font-semibold text-lg"
124:                       >
125:                         {name}
126:                       </a>
127:                     ) : (
128:                       <Link
129:                         href={href}
130:                         data-testid={`mobil-${name}`}
131:                         prefetch={true}
132:                         className={`flex w-full items-center justify-center px-2 py-2 hover:text-white transition font-semibold text-lg ${
133:                           pathname === href ? "text-green-400" : ""
134:                         }`}
135:                       >
136:                         <div className="glitch relative" data-text={name}>
137:                           {name}
138:                           <motion.span
139:                             className={`absolute bottom-0 left-0 h-0.5 bg-current ${
140:                               pathname === href ? "bg-green-400" : "bg-white"
141:                             }`}
142:                             initial={{
143:                               width: pathname === href ? "100%" : "0%",
144:                             }}
145:                             animate={{
146:                               width: pathname === href ? "100%" : "0%",
147:                             }}
148:                             transition={{ duration: 0.3 }}
149:                           />
150:                         </div>
151:                       </Link>
152:                     )}
153:                   </motion.li>
154:                 ))}
155:               </motion.ul>
156:             </nav>
157:           </motion.div>
158:         )}
159:       </AnimatePresence>
160:     </div>
161:   );
162: };
163: export default MobileMenu;
```

## File: src/components/Layout/NavigationLink.component.tsx
```typescript
 1: import React from "react";
 2: import Link from "next/link";
 3: import { motion } from "motion/react";
 4: import { MotionDiv } from "@/lib/framer/client";
 5: interface NavigationLinkProps {
 6:   name: string;
 7:   href: string;
 8:   isActive: boolean;
 9: }
10: /**
11:  * NavigationLink component that renders a single navigation link with hover and active states
12:  * @param {NavigationLinkProps} props - The props for the NavigationLink component
13:  * @param {string} props.name - The text to display for the link
14:  * @param {string} props.href - The URL the link should navigate to
15:  * @param {boolean} props.isActive - Whether the link is currently active
16:  * @returns {JSX.Element} The rendered NavigationLink component
17:  */
18: const NavigationLink: React.FC<NavigationLinkProps> = ({
19:   name,
20:   href,
21:   isActive,
22: }) => (
23:   <MotionDiv className="relative" whileHover="hover">
24:     <Link
25:       prefetch={true}
26:       className={`flex w-full items-center justify-center px-2 py-2 hover:text-white transition font-semibold text-lg ${
27:         isActive ? "text-green-400" : ""
28:       }`}
29:       href={href}
30:     >
31:       <div className="glitch relative" data-text={name}>
32:         {name}
33:         <motion.span
34:           className={`absolute bottom-0 left-0 h-0.5 bg-current ${
35:             isActive ? "bg-green-400" : "bg-white"
36:           }`}
37:           initial={{
38:             width: isActive ? "100%" : "0%",
39:           }}
40:           variants={{
41:             hover: { width: "100%" },
42:           }}
43:           transition={{ duration: 0.3 }}
44:         />
45:       </div>
46:     </Link>
47:   </MotionDiv>
48: );
49: export default NavigationLink;
```

## File: src/components/Prosjekter/ProsjektCard.component.tsx
```typescript
 1: "use client";
 2: import React from "react";
 3: import Image from "next/image";
 4: import Button from "@/components/UI/Button.component";
 5: import BounceInScroll from "@/components/Animations/BounceInScroll.component";
 6: import { urlFor } from "@/lib/sanity/helpers";
 7: import type { Project } from "@/types/sanity.types";
 8: /**
 9:  * ProsjektCard component that renders a card for a project
10:  * @param {Object} props
11:  * @param {string} props.name - The name of the project
12:  * @param {string} props.description - A brief description of the project
13:  * @param {string} props.subdescription - Additional description of the project
14:  * @param {Object} props.projectimage - The image object for the project
15:  * @param {Array} props.urlwww - Array of website URLs for the project
16:  * @param {Array} props.urlgithub - Array of GitHub URLs for the project
17:  * @returns {JSX.Element} The rendered ProsjektCard component
18:  */
19: const ProsjektCard: React.FC<Project> = ({
20:   name,
21:   description,
22:   subdescription,
23:   projectimage,
24:   urlwww,
25:   urlgithub,
26:   featured,
27: }) => {
28:   return (
29:     <div
30:       className="bg-slate-700 shadow-md rounded overflow-hidden mx-4 md:m-0"
31:       data-testid="projectcard"
32:     >
33:       <BounceInScroll viewAmount={0.3} instant={featured}>
34:         <div className="relative w-full h-48 md:h-60">
35:           <div className="w-full h-full p-5 md:pb-[20px] relative overflow-hidden flex justify-center md:h-[340px]">
36:             {projectimage && (
37:               <Image
38:                 className="transition-all duration-300 ease-in-out hover:-translate-y-1 hover:shadow-[0_2px_20px_rgba(60,255,60,0.35)]"
39:                 width="600"
40:                 height="340"
41:                 quality={100}
42:                 src={urlFor(projectimage).url() as string}
43:                 alt={name}
44:                 priority
45:                 unoptimized
46:               />
47:             )}
48:           </div>
49:         </div>
50:         <div className="md:mt-16 p-2 flex flex-col justify-between min-h-[250px] xl:min-h-[275px]">
51:           <h1 className="xl:mt-4 text-xl text-center font-bold py-2 text-slate-100">
52:             {name}
53:           </h1>
54:           <h2 className="text-md px-4 text-gray-300">{description}</h2>
55:           <p className="mt-4 text-sm mt-2 px-4 text-gray-300">
56:             {subdescription}
57:           </p>
58:           <div className="flex justify-center mt-4">
59:             {urlwww && urlwww.length > 0 && (
60:               <Button href={urlwww[0].url} renderAs="a">
61:                 Besøk
62:               </Button>
63:             )}
64:             {urlgithub && urlgithub.length > 0 && (
65:               <Button href={urlgithub[0].url} renderAs="a">
66:                 GitHub
67:               </Button>
68:             )}
69:           </div>
70:         </div>
71:       </BounceInScroll>
72:     </div>
73:   );
74: };
75: export default ProsjektCard;
```

## File: src/components/UI/Button.component.tsx
```typescript
 1: import type { ElementType, ReactNode, MouseEventHandler } from "react";
 2: export interface IButtonProps {
 3:   children: ReactNode;
 4:   href?: string;
 5:   renderAs?: ElementType;
 6:   type?: "button" | "submit" | "reset";
 7:   disabled?: boolean;
 8:   download?: boolean | string;
 9:   onClick?: MouseEventHandler<HTMLButtonElement>;
10: }
11: /**
12:  * Button component that can be rendered as various HTML elements
13:  * @param {Object} props
14:  * @param {ReactNode} props.children - The content of the button
15:  * @param {string} [props.href] - The URL to link to if the button is an anchor
16:  * @param {ElementType} [props.renderAs] - The HTML element to render the button as
17:  * @param {"button" | "submit" | "reset"} [props.type="submit"] - The type of the button
18:  * @param {boolean} [props.disabled=false] - Whether the button is disabled
19:  * @param {boolean | string} [props.download] - Specifies that the target will be downloaded when clicked
20:  * @param {MouseEventHandler<HTMLButtonElement>} [props.onClick] - Click event handler
21:  * @returns {JSX.Element} The rendered Button component
22:  */
23: const Button = ({
24:   children,
25:   href,
26:   renderAs,
27:   type = "submit",
28:   disabled = false,
29:   download,
30:   onClick,
31:   ...props
32: }: IButtonProps) => {
33:   const Component = renderAs ?? "button";
34:   const isLink = renderAs === "a";
35:   const targetLink = isLink ? "_blank" : undefined;
36:   return (
37:     <Component
38:       type={isLink ? undefined : type}
39:       data-cy="submit"
40:       className="glitch p-3 m-3 text-white font-medium transition duration-300 ease-in-out bg-emerald-700 rounded hover:bg-emerald-800 disabled:opacity-50 disabled:pointer-events-none"
41:       href={href}
42:       target={targetLink}
43:       disabled={disabled}
44:       data-text={children}
45:       download={download}
46:       onClick={onClick}
47:       {...props}
48:     >
49:       {children}
50:     </Component>
51:   );
52: };
53: export default Button;
```

## File: src/components/UI/GenericForm.component.tsx
```typescript
 1: import React from "react";
 2: import { useForm, Path, FieldValues } from "react-hook-form";
 3: import { z } from "zod";
 4: import { zodResolver } from "@hookform/resolvers/zod";
 5: import Button from "./Button.component";
 6: import InputField from "./InputField.component";
 7: type InputType = "input" | "textarea";
 8: type FieldConfig<T extends FieldValues> = {
 9:   readonly name: Path<T>;
10:   readonly label: string;
11:   readonly type?: InputType;
12:   readonly inputPattern?: RegExp;
13:   readonly title?: string;
14: };
15: interface GenericFormProps<TSchema extends z.ZodType<FieldValues>> {
16:   readonly formSchema: TSchema;
17:   readonly onSubmit: (data: z.infer<TSchema>) => Promise<void>;
18:   readonly fields: ReadonlyArray<FieldConfig<z.infer<TSchema>>>;
19:   readonly submitButtonText: string;
20: }
21: /**
22:  * A generic, reusable form component that can be easily customized and extended.
23:  * It uses Zod for schema validation and react-hook-form for form handling.
24:  *
25:  * @template TSchema - The Zod schema type for form validation.
26:  * @param {Readonly<GenericFormProps<TSchema>>} props - The props for the GenericForm component.
27:  * @returns {JSX.Element} The rendered form.
28:  */
29: function GenericForm<TSchema extends z.ZodType<FieldValues>>({
30:   formSchema,
31:   onSubmit,
32:   fields,
33:   submitButtonText,
34: }: Readonly<GenericFormProps<TSchema>>) {
35:   type FormData = z.infer<TSchema>;
36:   const {
37:     register,
38:     handleSubmit,
39:     formState: { errors, isSubmitting },
40:   } = useForm<FormData>({
41:     resolver: zodResolver(formSchema),
42:   });
43:   return (
44:     <form
45:       id="contact-form"
46:       className="text-center"
47:       onSubmit={handleSubmit(onSubmit)}
48:       method="POST"
49:       action="/api/form"
50:       aria-label="Contact Form"
51:     >
52:       <fieldset>
53:         <legend className="text-center mx-auto text-xl mt-4 sr-only">
54:           Kontaktskjema
55:         </legend>
56:         {fields.map((field) => (
57:           <React.Fragment key={field.name}>
58:             <InputField<FormData>
59:               name={field.name}
60:               label={field.label}
61:               htmlFor={field.name}
62:               register={register}
63:               error={errors[field.name]?.message as string | undefined}
64:               isRequired
65:               type={field.type}
66:               inputPattern={field.inputPattern}
67:               title={field.title}
68:             />
69:             <br />
70:           </React.Fragment>
71:         ))}
72:       </fieldset>
73:       <div className="-mt-4">
74:         <Button disabled={isSubmitting} data-testid="submit-button">
75:           {submitButtonText}
76:         </Button>
77:       </div>
78:     </form>
79:   );
80: }
81: export default GenericForm;
```

## File: src/components/UI/InputField.component.tsx
```typescript
 1: import React from "react";
 2: import {
 3:   UseFormRegister,
 4:   FieldValues,
 5:   RegisterOptions,
 6:   Path,
 7: } from "react-hook-form";
 8: export interface InputProps<T extends FieldValues> {
 9:   readonly name: Path<T>;
10:   readonly label: string;
11:   readonly htmlFor: string;
12:   readonly isRequired?: boolean;
13:   readonly inputPattern?: RegExp;
14:   readonly title?: string;
15:   readonly type?: "input" | "textarea";
16:   readonly register: UseFormRegister<T>;
17:   readonly error?: string;
18: }
19: /**
20:  * Creates register options for react-hook-form
21:  * @template T - Type extending FieldValues
22:  * @param {boolean} [isRequired] - Whether the field is required
23:  * @param {RegExp} [inputPattern] - Regular expression pattern for input validation
24:  * @param {string} [title] - Title for the input field
25:  * @returns {RegisterOptions<T, Path<T>>} Register options object
26:  */
27: export function createRegisterOptions<T extends FieldValues>(
28:   isRequired?: boolean,
29:   inputPattern?: RegExp,
30:   title?: string,
31: ): RegisterOptions<T, Path<T>> {
32:   return {
33:     required: isRequired ? "Dette feltet er påkrevd" : false,
34:     ...(inputPattern
35:       ? { pattern: { value: inputPattern, message: title ?? "Ugyldig format" } }
36:       : {}),
37:   };
38: }
39: /**
40:  * InputField component for rendering form inputs
41:  * @template T - Type extending FieldValues
42:  * @param {InputProps<T>} props - The props for the InputField component
43:  * @returns {JSX.Element} The rendered InputField component
44:  */
45: function InputField<T extends FieldValues>({
46:   name,
47:   label,
48:   inputPattern,
49:   isRequired,
50:   htmlFor,
51:   title,
52:   type = "input",
53:   register,
54:   error,
55:   ...props
56: }: InputProps<T>) {
57:   const sharedClasses =
58:     "cursor-pointer peer block text-xl w-64 p-2 bg-gray-800 text-slate-100 border-gray-500 border rounded border-opacity-50 outline-none focus:border-slate-200 placeholder-gray-300 placeholder-opacity-0 transition duration-200";
59:   const registerOptions = createRegisterOptions<T>(
60:     isRequired,
61:     inputPattern,
62:     title,
63:   );
64:   return (
65:     <div className="relative my-2 flex flex-col items-center">
66:       <div className="relative">
67:         {type === "input" ? (
68:           <input
69:             id={htmlFor}
70:             type="text"
71:             placeholder={label}
72:             className={`${sharedClasses} ${error ? "border-red-500" : ""}`}
73:             {...register(name, registerOptions)}
74:             {...props}
75:           />
76:         ) : (
77:           <textarea
78:             id={htmlFor}
79:             placeholder={label}
80:             className={`${sharedClasses} ${error ? "border-red-500" : ""}`}
81:             {...register(name, registerOptions)}
82:             {...props}
83:           ></textarea>
84:         )}
85:         <label
86:           htmlFor={htmlFor}
87:           className={`absolute cursor-pointer left-1 top-0 z-10 origin-[0] -translate-y-8 scale-75 transform bg-gray-800 px-2 text-slate-100 duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-10 peer-focus:scale-75 peer-focus:px-2 peer-focus:text-primary-600 peer-focus:bg-gray-800 ${
88:             type === "textarea" ? "cursor-pointer peer-focus:-top-4" : ""
89:           }`}
90:         >
91:           {label}
92:         </label>
93:       </div>
94:       {error && <span className="text-red-500 text-sm mt-1">{error}</span>}
95:     </div>
96:   );
97: }
98: export default InputField;
```

## File: src/components/UI/PageHeader.component.tsx
```typescript
 1: import type { ReactNode } from "react";
 2: export interface IPageHeaderProps {
 3:   children: ReactNode;
 4: }
 5: /**
 6:  * PageHeader component for rendering the header for each page
 7:  * @function PageHeader
 8:  * @param {children?} children - HTML children to render in the page header component
 9:  * @returns {ReactNode} - Rendered component
10:  */
11: const PageHeader = ({ children }: IPageHeaderProps) => (
12:   <div className="px-4 p lg:px-0 xl:px-0 md:px-0">
13:     <div className="container bg-slate-700 shadow rounded h-16 p-4 m-4 mx-auto">
14:       <h1 className="text-2xl text-center font-bold text-slate-100">
15:         {children}
16:       </h1>
17:     </div>
18:   </div>
19: );
20: export default PageHeader;
```

## File: src/components/UI/Pill.component.tsx
```typescript
 1: import React from "react";
 2: interface PillProps {
 3:   text: string;
 4:   className?: string;
 5:   href?: string;
 6:   onClick?: () => void;
 7: }
 8: /**
 9:  * Renders a Pill component.
10:  *
11:  * @param {PillProps} props - The properties for the Pill component.
12:  * @param {string} props.text - The text to display in the Pill.
13:  * @param {string} [props.className=''] - Additional CSS classes to apply to the Pill.
14:  * @param {string} [props.href] - The URL to navigate to when the Pill is clicked.
15:  * @param {() => void} [props.onClick] - The function to call when the Pill is clicked.
16:  * @return {JSX.Element} The rendered Pill component.
17:  */
18: const Pill: React.FC<PillProps> = ({ text, className = "", href, onClick }) => {
19:   const baseClasses = `glitch text-white m-4 text-xl p-6 mt-4 rounded-full transition duration-300 ease-in-out transform
20:                  bg-blue-600 bg-opacity-20 border-2 border-blue-800 border-opacity-30                     
21:                  hover:bg-blue-400 hover:bg-opacity-30
22:                  hover:shadow-[0_0_15px_rgba(0,255,255,0.1),0_0_20px_rgba(0,255,255,0.1),inset_0_0_20px_rgba(0,255,255,0.1)]
23:                  backdrop-blur-sm ${className}`;
24:   if (href) {
25:     return (
26:       <a href={href} className={baseClasses} data-text={text}>
27:         {text}
28:       </a>
29:     );
30:   }
31:   return (
32:     <button className={baseClasses} onClick={onClick} data-text={text}>
33:       {text}
34:     </button>
35:   );
36: };
37: export default Pill;
```

## File: src/components/UI/SkipLink.component.tsx
```typescript
 1: import React from "react";
 2: import Button from "./Button.component";
 3: const SkipLink: React.FC = () => {
 4:   return (
 5:     <div className="sr-only focus-within:not-sr-only focus-within:absolute focus-within:top-4 focus-within:left-4 focus-within:z-50">
 6:       <Button renderAs="a" href="#main-content">
 7:         Hopp til hovedinnhold
 8:       </Button>
 9:     </div>
10:   );
11: };
12: export default SkipLink;
```

## File: src/components/UI/Tabs.component.tsx
```typescript
 1: "use client";
 2: import React, { useState } from "react";
 3: import { motion, AnimatePresence } from "motion/react";
 4: interface Tab {
 5:   id: string;
 6:   label: string;
 7:   content: React.ReactNode;
 8: }
 9: interface TabsProps {
10:   tabs: Tab[];
11:   orientation?: "horizontal" | "vertical";
12: }
13: /**
14:  * Renders a set of tabs with content.
15:  *
16:  * @param {TabsProps} props - The props object containing the tabs and orientation.
17:  * @param {Tab[]} props.tabs - An array of Tab objects representing the tabs.
18:  * @param {string} [props.orientation="vertical"] - The orientation of the tabs. Defaults to "vertical".
19:  * @return {JSX.Element} The rendered Tabs component.
20:  */
21: const Tabs: React.FC<TabsProps> = ({ tabs, orientation = "vertical" }) => {
22:   const [activeTab, setActiveTab] = useState(tabs[0].id);
23:   const handleTabClick = (tabId: string) => {
24:     setActiveTab(tabId);
25:   };
26:   const isVertical = orientation === "vertical";
27:   return (
28:     <div className="bg-gray-800 p-6 rounded-lg md:max-w-[1000px] min-h-[20rem]">
29:       <div
30:         className={`flex ${isVertical ? "flex-col sm:flex-row" : "flex-col"} bg-gray-800 rounded-lg h-[calc(75vh-2rem)] mt-4`}
31:       >
32:         <div
33:           className={`${isVertical ? "sm:w-1/4 w-full" : "w-full"} bg-gray-700 ${isVertical ? "max-h-[181px] " : ""}`}
34:         >
35:           <div
36:             className={`flex ${isVertical ? "flex-row sm:flex-col" : "flex-row"}`}
37:             role="tablist"
38:           >
39:             {tabs.map((tab, index) => (
40:               <motion.button
41:                 key={tab.id}
42:                 onClick={() => handleTabClick(tab.id)}
43:                 className={`px-4 py-3 text-sm font-medium relative ${
44:                   activeTab === tab.id
45:                     ? "text-white"
46:                     : "text-gray-300 hover:text-white"
47:                 } ${isVertical ? "w-full text-left" : "flex-grow text-center"}
48:                  ${index !== 0 ? "border-t border-gray-600" : ""}
49:                  ${isVertical && index !== tabs.length - 1 ? "border-b border-gray-600" : ""}                
50:                 `}
51:                 role="tab"
52:                 aria-selected={activeTab === tab.id}
53:                 aria-controls={`tabpanel-${tab.id}`}
54:                 id={`tab-${tab.id}`}
55:               >
56:                 {activeTab === tab.id && (
57:                   <motion.div
58:                     layoutId="active-tab"
59:                     className={`absolute ${isVertical ? "inset-y-0 left-0 w-1" : "inset-x-0 bottom-0 h-1"} bg-[var(--matrix-dark)]`}
60:                     initial={false}
61:                     transition={{ type: "spring", stiffness: 500, damping: 30 }}
62:                   />
63:                 )}
64:                 <span className="relative z-10">{tab.label}</span>
65:               </motion.button>
66:             ))}
67:           </div>
68:         </div>
69:         <div
70:           className={`${isVertical ? "sm:w-3/4 w-full" : "w-full"} bg-gray-800 overflow-y-auto`}
71:         >
72:           <AnimatePresence mode="wait">
73:             {tabs.map(
74:               (tab) =>
75:                 activeTab === tab.id && (
76:                   <motion.div
77:                     key={tab.id}
78:                     role="tabpanel"
79:                     id={`tabpanel-${tab.id}`}
80:                     aria-labelledby={`tab-${tab.id}`}
81:                     className="px-8"
82:                     initial={{ opacity: 0, y: 20 }}
83:                     animate={{ opacity: 1, y: 0 }}
84:                     exit={{ opacity: 0, y: -20 }}
85:                     transition={{ duration: 0.3 }}
86:                   >
87:                     {tab.content}
88:                   </motion.div>
89:                 ),
90:             )}
91:           </AnimatePresence>
92:         </div>
93:       </div>
94:     </div>
95:   );
96: };
97: export default Tabs;
```

## File: src/config/env.ts
```typescript
 1: import { cleanEnv, str } from "envalid";
 2: // Server-side environment variables
 3: export const serverEnv = cleanEnv(process.env, {
 4:   AI_API_KEY: str({
 5:     desc: "AI service API key",
 6:   }),
 7:   AI_BASE_URL: str({
 8:     desc: "AI service base URL",
 9:   }),
10:   MODEL_NAME: str({
11:     desc: "AI model identifier",
12:     default: "claude-3.5-sonnet@anthropic",
13:   }),
14: });
15: // Client-side environment variables (NEXT_PUBLIC_)
16: export const publicEnv = cleanEnv(process.env, {
17:   NEXT_PUBLIC_EMAIL_API_KEY: str({
18:     desc: 'EmailJS API key starting with "user_"',
19:     example: "user_abc123",
20:   }),
21:   NEXT_PUBLIC_EMAIL_TEMPLATE_KEY: str({
22:     desc: 'EmailJS template key starting with "template_"',
23:     example: "template_xyz789",
24:   }),
25:   NEXT_PUBLIC_EMAIL_SERVICE_KEY: str({
26:     desc: 'EmailJS service key starting with "service_"',
27:     example: "service_def456",
28:   }),
29: });
30: // Type-safe way to access public env vars from the client
31: export const clientEnv = {
32:   EMAIL_API_KEY: publicEnv.NEXT_PUBLIC_EMAIL_API_KEY,
33:   EMAIL_TEMPLATE_KEY: publicEnv.NEXT_PUBLIC_EMAIL_TEMPLATE_KEY,
34:   EMAIL_SERVICE_KEY: publicEnv.NEXT_PUBLIC_EMAIL_SERVICE_KEY,
35: };
```

## File: src/e2e/cypress/component/Button.cy.tsx
```typescript
 1: /// <reference types="cypress" />
 2: import Button from "@/components/UI/Button.component";
 3: // https://larsmagnus.co/blog/component-testing-with-cypress-in-next-js
 4: describe("<Button>", () => {
 5:   it("mounts", () => {
 6:     cy.mount(<Button>Test</Button>);
 7:     cy.get("[data-cy=submit]").should("have.text", "Test");
 8:   });
 9:   // Test href prop
10:   it("navigates when clicked if href provided", () => {
11:     cy.mount(<Button href="https://example.com">Button</Button>);
12:     cy.get("a").click();
13:     cy.url().should("include", "example.com");
14:   });
15:   it("renders as submit button", () => {
16:     cy.mount(<Button type="submit">Button</Button>);
17:     cy.get('button[type="submit"]').should("exist");
18:   });
19:   it("renders as reset button", () => {
20:     cy.mount(<Button type="reset">Button</Button>);
21:     cy.get('button[type="reset"]').should("exist");
22:   });
23: });
```

## File: src/e2e/cypress/component/Hero.cy.tsx
```typescript
 1: /// <reference types="cypress"/>
 2: import Hero from "@/components/Index/Hero.component";
 3: const content = [
 4:   {
 5:     text: "Hei!",
 6:   },
 7:   {
 8:     text: "Jeg heter Daniel Fjeldstad og er en webutvikler.",
 9:   },
10:   {
11:     text: "Jeg kan PHP, Wordpress, Javascript, Typescript, React, Vue, Docker, Photoshop og mye mer.",
12:   },
13: ];
14: it("Viser Hero komponentt", () => {
15:   cy.mount(<Hero content={content} />);
16:   cy.contains("Hei!").should("be.visible");
17: });
18: it("Viser PHP tekst", () => {
19:   cy.mount(<Hero content={content} />);
20:   cy.contains("PHP").should("be.visible");
21: });
```

## File: src/e2e/cypress/component/Icons.cy.tsx
```typescript
 1: /// <reference types="cypress" />
 2: import Icons from "@/components/Index/Icons.component";
 3: const beVisible = "be.visible";
 4: it("Renders all icons", () => {
 5:   cy.mount(<Icons />);
 6:   cy.get('[data-testid="icons"]').within(() => {
 7:     cy.get('[data-testid="React"]').should(beVisible);
 8:     cy.get('[data-testid="Vue"]').should(beVisible);
 9:     cy.get('[data-testid="Typescript"]').should(beVisible);
10:     cy.get('[data-testid="Wordpress"]').should(beVisible);
11:     cy.get('[data-testid="PHP"]').should(beVisible);
12:   });
13: });
```

## File: src/e2e/cypress/e2e/accessibility.cy.ts
```typescript
 1: /// <reference types="cypress"/>
 2: /// <reference types="cypress-axe"/>
 3: /// <reference types="axe-core"/>
 4: import { checkAccessibility } from "../support/functions";
 5: describe("Accessibility testing av forside", () => {
 6:   beforeEach(() => {
 7:     cy.visit("/");
 8:   });
 9:   it("Forside skal ikke ha noen a11y feilmeldinger", () => {
10:     // Vent på at animasjonene skal bli ferdige før vi tester
11:     checkAccessibility(5000);
12:   });
13: });
14: export {};
```

## File: src/e2e/cypress/e2e/cv.cy.ts
```typescript
 1: /// <reference types="cypress"/>
 2: /// <reference types="cypress-axe"/>
 3: /// <reference types="axe-core"/>
 4: import { checkAccessibility } from "../support/functions";
 5: describe("Test at CV vises og laster", () => {
 6:   beforeEach(() => {
 7:     cy.visit("http://localhost:3000/cv");
 8:   });
 9:   it("Se at CV vises", () => {
10:     cy.get("main#maincontent").should("be.visible");
11:     cy.get("#tab-qualifications").should("have.length", 1).and("be.visible");
12:   });
13:   it("CV skal ikke ha noen a11y feilmeldinger", () => {
14:     // Vent på at animasjonene skal bli ferdige før vi tester
15:     checkAccessibility(5000);
16:   });
17: });
```

## File: src/e2e/cypress/e2e/index.cy.ts
```typescript
 1: /// <reference types="cypress"/>
 2: // https://cheatography.com/aiqbal/cheat-sheets/cypress-io/
 3: describe("Forside", () => {
 4:   beforeEach(() => {
 5:     //cy.visit("/");
 6:     // Local:
 7:     cy.visit("http://localhost:3000");
 8:   });
 9:   it(`Hei vises på forsiden`, () => {
10:     cy.get('[data-cy="hei"]').contains("Hei!");
11:   });
12:   it(`Om meg vises på forsiden`, () => {
13:     cy.get('[data-cy="Om Meg"]').contains("Om Meg");
14:   });
15:   it(`Prosjekter vises på forsiden`, () => {
16:     cy.get('[data-cy="Prosjekter"]').contains("Prosjekter");
17:   });
18: });
19: export {};
```

## File: src/e2e/cypress/e2e/kontakt.cy.ts
```typescript
 1: /// <reference types="cypress"/>
 2: /// <reference types="cypress-axe"/>
 3: /// <reference types="axe-core"/>
 4: import { checkAccessibility } from "../support/functions";
 5: describe("Kontakt", () => {
 6:   const beVisible = "be.visible";
 7:   beforeEach(() => {
 8:     cy.visit("http://localhost:3000/kontakt");
 9:   });
10:   it(`Navn vises`, () => {
11:     cy.get("#navn").should(beVisible);
12:   });
13:   it(`Vi kan skrive navn`, () => {
14:     cy.get("#navn").type("Fullt navn").should("have.value", "Fullt navn");
15:   });
16:   it("Kontakt skal ikke ha noen a11y feilmeldinger", () => {
17:     checkAccessibility(5000);
18:   });
19: });
20: export {};
```

## File: src/e2e/cypress/e2e/prosjekter.cy.ts
```typescript
 1: /// <reference types="cypress"/>
 2: /// <reference types="cypress-axe"/>
 3: /// <reference types="axe-core"/>
 4: import { checkAccessibility } from "../support/functions";
 5: describe("Prosjekter Page", () => {
 6:   beforeEach(() => {
 7:     cy.visit("http://localhost:3000/prosjekter");
 8:   });
 9:   it("should load the prosjekter page", () => {
10:     cy.url().should("include", "/prosjekter");
11:     cy.get("h1").should("contain", "Prosjekter"); // Assumption: there is an h1 element with the text 'Prosjekter' on the page
12:   });
13:   it("should display project cards", () => {
14:     cy.get('[data-testid="projectcard"]').should("have.length.at.least", 1);
15:   });
16:   it("should display project name, description, and subdescription", () => {
17:     cy.get('[data-testid="projectcard"]')
18:       .first()
19:       .within(() => {
20:         cy.get("h1").should("have.class", "text-xl").and("not.be.empty");
21:         cy.get("h2").should("have.class", "text-md").and("not.be.empty");
22:         cy.get("p").should("have.class", "text-sm").and("not.be.empty");
23:       });
24:   });
25:   it('should have functioning "Besøk" button if urlwww exists', () => {
26:     cy.get('[data-testid="projectcard"]')
27:       .first()
28:       .within(() => {
29:         cy.get("a")
30:           .contains("Besøk")
31:           .should("have.attr", "href")
32:           .and("not.be.empty");
33:       });
34:   });
35:   it('should have functioning "GitHub" button if urlgithub exists', () => {
36:     cy.get('[data-testid="projectcard"]')
37:       .first()
38:       .within(() => {
39:         cy.get("a")
40:           .contains("GitHub")
41:           .should("have.attr", "href")
42:           .and("not.be.empty");
43:       });
44:   });
45:   it('should have the correct URL for "GitHub" button', () => {
46:     cy.get('[data-testid="projectcard"]')
47:       .first()
48:       .within(() => {
49:         cy.get("a")
50:           .contains("GitHub")
51:           .should("have.attr", "href")
52:           .and("match", /^https:\/\/github\.com\/.+$/);
53:       });
54:   });
55:   it("Prosjekter page should not have any a11y issues", () => {
56:     checkAccessibility(5000);
57:   });
58: });
```

## File: src/e2e/cypress/support/commands.ts
```typescript
 1: /// <reference types="cypress" />
 2: // ***********************************************
 3: // This example commands.ts shows you how to
 4: // create various custom commands and overwrite
 5: // existing commands.
 6: //
 7: // For more comprehensive examples of custom
 8: // commands please read more here:
 9: // https://on.cypress.io/custom-commands
10: // ***********************************************
11: //
12: //
13: // -- This is a parent command --
14: // Cypress.Commands.add('login', (email, password) => { ... })
15: //
16: //
17: // -- This is a child command --
18: // Cypress.Commands.add('drag', { prevSubject: 'element'}, (subject, options) => { ... })
19: //
20: //
21: // -- This is a dual command --
22: // Cypress.Commands.add('dismiss', { prevSubject: 'optional'}, (subject, options) => { ... })
23: //
24: //
25: // -- This will overwrite an existing command --
26: // Cypress.Commands.overwrite('visit', (originalFn, url, options) => { ... })
27: //
28: // declare global {
29: //   namespace Cypress {
30: //     interface Chainable {
31: //       login(email: string, password: string): Chainable<void>
32: //       drag(subject: string, options?: Partial<TypeOptions>): Chainable<Element>
33: //       dismiss(subject: string, options?: Partial<TypeOptions>): Chainable<Element>
34: //       visit(originalFn: CommandOriginalFn, url: string, options: Partial<VisitOptions>): Chainable<Element>
35: //     }
36: //   }
37: // }
38: export {};
```

## File: src/e2e/cypress/support/component-index.html
```html
 1: <!DOCTYPE html>
 2: <html lang="nb">
 3:   <head>
 4:     <meta charset="utf-8">
 5:     <meta http-equiv="X-UA-Compatible" content="IE=edge">
 6:     <meta name="viewport" content="width=device-width,initial-scale=1.0">
 7:     <title>Components App</title>
 8:     <!-- Used by Next.js to inject CSS. -->
 9:     <div id="__next_css__DO_NOT_USE__"></div>
10:   </head>
11:   <body>
12:     <div data-cy-root></div>
13:   </body>
14: </html>
```

## File: src/e2e/cypress/support/component.ts
```typescript
 1: // ***********************************************************
 2: // This example support/component.ts is processed and
 3: // loaded automatically before your test files.
 4: //
 5: // This is a great place to put global configuration and
 6: // behavior that modifies Cypress.
 7: //
 8: // You can change the location of this file or turn off
 9: // automatically serving support files with the
10: // 'supportFile' configuration option.
11: //
12: // You can read more here:
13: // https://on.cypress.io/configuration
14: // ***********************************************************
15: // Import commands.js using ES2015 syntax:
16: import "./commands";
17: import "@/styles/globals.css";
18: import { mount } from "cypress/react18";
19: // Augment the Cypress namespace to include type definitions for
20: // your custom command.
21: // Alternatively, can be defined in cypress/support/component.d.ts
22: // with a <reference path="./component" /> at the top of your spec.
23: /*
24: declare global {
25:   namespace Cypress {
26:     interface Chainable {
27:       mount: typeof mount;
28:     }
29:   }
30: }
31: */
32: Cypress.Commands.add("mount", mount);
33: // Example use:
34: // cy.mount(<MyComponent />)
35: export {};
```

## File: src/e2e/cypress/support/e2e.ts
```typescript
 1: // ***********************************************************
 2: // This example support/e2e.ts is processed and
 3: // loaded automatically before your test files.
 4: //
 5: // This is a great place to put global configuration and
 6: // behavior that modifies Cypress.
 7: //
 8: // You can change the location of this file or turn off
 9: // automatically serving support files with the
10: // 'supportFile' configuration option.
11: //
12: // You can read more here:
13: // https://on.cypress.io/configuration
14: // ***********************************************************
15: import "cypress-axe";
16: // Import commands.js using ES2015 syntax:
17: import "./commands";
18: // Alternatively you can use CommonJS syntax:
19: // require('./commands')
```

## File: src/e2e/cypress/support/functions.ts
```typescript
 1: import { Result } from "axe-core";
 2: export function terminalLog(violations: Result[]) {
 3:   cy.task(
 4:     "log",
 5:     `${violations.length} accessibility violation${violations.length === 1 ? "" : "s"} ${
 6:       violations.length === 1 ? "was" : "were"
 7:     } detected`,
 8:   );
 9:   const violationData = violations.map(
10:     ({ id, impact, description, nodes }) => ({
11:       id,
12:       impact,
13:       description,
14:       nodes: nodes.length,
15:     }),
16:   );
17:   cy.task("table", violationData);
18:   console.table(violationData);
19: }
20: export function checkAccessibility(delay?: number) {
21:   if (delay) {
22:     cy.wait(delay);
23:   }
24:   cy.injectAxe();
25:   cy.checkA11y(undefined, undefined, terminalLog);
26: }
```

## File: src/e2e/cypress/tsconfig.json
```json
 1: {
 2:   "extends": "../../../tsconfig.json",
 3:   "compilerOptions": {
 4:     "noEmit": true,
 5:     "isolatedModules": false,
 6:     "types": ["cypress", "@testing-library/cypress"]
 7:   },
 8:   "include": [
 9:     "../../../node_modules/cypress",
10:     "../../../node_modules/@testing-library/cypress",
11:     "support/component.ts",
12:     "./**/*.ts"
13:   ]
14: }
```

## File: src/e2e/playwright/cv.spec.ts
```typescript
 1: import { test, expect } from "@playwright/test";
 2: test.describe("CV page", () => {
 3:   test("loads and displays main content correctly", async ({ page }) => {
 4:     await page.goto("/cv");
 5:     // Check if 'Nøkkelkvalifikasjoner' tab is visible
 6:     await expect(
 7:       page.getByRole("tab", { name: "Nøkkelkvalifikasjoner" }),
 8:     ).toBeVisible();
 9:   });
10:   test("navigates to and displays Experience section correctly", async ({
11:     page,
12:   }) => {
13:     await page.goto("/cv");
14:     // Click on 'Erfaring' tab
15:     await page.getByRole("tab", { name: "Erfaring" }).click();
16:     // Check if a specific experience entry is visible
17:     await expect(
18:       page.getByRole("heading", { name: "– 2021 - NovaCare" }),
19:     ).toBeVisible();
20:   });
21:   test("displays Education section correctly", async ({ page }) => {
22:     await page.goto("/cv");
23:     // Click on 'Erfaring' tab
24:     await page.getByRole("tab", { name: "Utdanning" }).click();
25:     // Check if education information is present
26:     await expect(page.getByLabel("Utdanning")).toContainText(
27:       "2019 – 2025 - Kompetanseheving / egenlæring frontendutvikling",
28:     );
29:   });
30: });
```

## File: src/e2e/playwright/index.spec.ts
```typescript
 1: import { test, expect } from "@playwright/test";
 2: test.describe("Home page", () => {
 3:   test("loads and displays main content correctly", async ({ page }) => {
 4:     await page.goto("/");
 5:     // Check main heading
 6:     await expect(page.locator("h1")).toContainText("Hei!");
 7:     await expect(page.getByRole("heading", { name: "Hei!" })).toBeVisible();
 8:     // Check subheading
 9:     await expect(page.getByTestId("fadeup").getByRole("heading")).toContainText(
10:       "Jeg heter Daniel Fjeldstad og er en webutvikler.",
11:     );
12:     await expect(
13:       page.getByRole("heading", { name: "Jeg heter Daniel Fjeldstad og" }),
14:     ).toBeVisible();
15:     // Check skills text
16:     await expect(page.getByText("Jeg kan PHP, Wordpress,")).toBeVisible();
17:     // Check if icons are visible
18:     await expect(page.getByTestId("icons")).toBeVisible();
19:   });
20:   test("displays 'Om Meg' section correctly", async ({ page }) => {
21:     await page.goto("/");
22:     const omMegSection = page.getByLabel("Om Meg");
23:     // Check section title
24:     await expect(omMegSection.getByTestId("sanity-title")).toContainText(
25:       "Om Meg",
26:     );
27:     // Check section content
28:     await expect(omMegSection.getByTestId("bounceinscroll")).toContainText(
29:       "I over 10 år har jeg hatt en lidenskap for webutvikling og design, og ser i dag på meg selv som en dedikert senior frontendutvikler.Jeg har jobbet mye med WordPress og WooCommerce, hvor jeg siden 2011 har levert kvalitetsarbeid som frilanser på Fiverr, og har oppnådd 100% positive tilbakemeldinger.Språk som moderne Javascript (ES6+) og Typescript, og populære rammeverk som React, Vue 2/3, Next.js og Sveltekit er noe jeg bruker hver dag. Jeg har også erfaring med PHP, mySQL, GraphQL, Docker, Storybook, Sanity.io, Jest, Cypress, Python og Bootstrap.",
30:     );
31:   });
32:   test("displays 'Prosjekter' section correctly", async ({ page }) => {
33:     await page.goto("/");
34:     const prosjekterSection = page.getByLabel("Prosjekter");
35:     // Check section content
36:     await expect(prosjekterSection.getByTestId("bounceinscroll")).toContainText(
37:       "Jeg har de siste årene hatt mye fokus på AI i form av bruk av og programmering av ulike AI verktøy, boter og applikasjoner. Jeg er også svært aktiv i flere AI miljøer på Discord hvor jeg er administrator på flere servere med totalt over 500 medlemmer, og opererer også som teknisk ansvarlig og utvikler av AI boter og verktøy som brukes på serverne. Holder også på mye med utvikling på GITHUB på hobbybasis, hvor jeg kan skilte med å være Norges mest aktive utvikler.På PROSJEKTER kan du se eksempler på arbeid jeg har gjort i nyere tid.Har også bidratt med utvikling av flere open-source prosjekter på GITHUB.",
38:     );
39:   });
40: });
```

## File: src/e2e/playwright/kontakt.spec.ts
```typescript
 1: import { test, expect } from "@playwright/test";
 2: test.describe("Contact page", () => {
 3:   test("loads and displays form elements correctly", async ({ page }) => {
 4:     await page.goto("/kontakt");
 5:     // Check if form labels are visible
 6:     await expect(page.getByText("Fullt navn")).toBeVisible();
 7:     await expect(page.getByText("Telefonnummer")).toBeVisible();
 8:     await expect(page.getByText("Hva ønsker du å si?")).toBeVisible();
 9:     // Check if submit button is visible using the new data-testid
10:     await expect(page.getByTestId("submit-button")).toBeVisible();
11:   });
12:   test("submit button has correct text", async ({ page }) => {
13:     await page.goto("/kontakt");
14:     // Check if the submit button has the correct text
15:     const submitButton = page.getByTestId("submit-button");
16:     await expect(submitButton).toHaveText("Send skjema");
17:   });
18: });
```

## File: src/e2e/playwright/prosjekter.spec.ts
```typescript
 1: import { test, expect } from "@playwright/test";
 2: test.describe("Prosjekter page", () => {
 3:   test("loads and displays main content correctly", async ({ page }) => {
 4:     await page.goto("/prosjekter");
 5:     // Check main heading
 6:     await expect(
 7:       page.getByRole("heading", { name: "Prosjekter" }),
 8:     ).toBeVisible();
 9:     // Check if 'Dfweb versjon' heading is visible
10:     await expect(
11:       page.getByRole("heading", { name: "Dfweb versjon" }),
12:     ).toBeVisible();
13:   });
14:   test("displays project images correctly", async ({ page }) => {
15:     await page.goto("/prosjekter");
16:     // Check if project images are visible
17:     await expect(page.getByRole("img", { name: "Earth Doom" })).toBeVisible();
18:     await expect(
19:       page.getByRole("img", { name: "NextJS WooCommerce" }),
20:     ).toBeVisible();
21:   });
22:   test("displays project details correctly", async ({ page }) => {
23:     await page.goto("/prosjekter");
24:     const portfolioContent = page.getByLabel("Innhold portefølje");
25:     // Check project title
26:     await expect(portfolioContent).toContainText("Earth Doom");
27:     // Check project description
28:     await expect(portfolioContent).toContainText(
29:       "Fullstack strategispill inspirert av Planetarion. Prosjektet inkluderer innlogging, database, grafer, responsivt design med mer.",
30:     );
31:     // Check project technologies
32:     await expect(portfolioContent).toContainText(
33:       "Typescript, Tailwind, Prisma, Clerk, tRPC, PostgreSQL, Chart.js",
34:     );
35:     // Check if 'Besøk' and 'GitHub' links are visible
36:     await expect(page.getByText("BesøkGitHub").first()).toBeVisible();
37:   });
38: });
```

## File: src/hooks/useMobile.tsx
```typescript
 1: import { useState, useEffect } from "react";
 2: /**
 3:  * A React hook that returns a boolean indicating if the user is on a mobile device.
 4:  * The determination uses window.innerWidth < 640 as a threshold.
 5:  *
 6:  * @returns true if the device width is under 640px, else false.
 7:  */
 8: export function useMobile(): boolean {
 9:   const [isMobile, setIsMobile] = useState<boolean>(false);
10:   useEffect(() => {
11:     const checkIfMobile = (): void => {
12:       setIsMobile(window.innerWidth < 640);
13:     };
14:     checkIfMobile();
15:     window.addEventListener("resize", checkIfMobile);
16:     return () => window.removeEventListener("resize", checkIfMobile);
17:   }, []);
18:   return isMobile;
19: }
```

## File: src/hooks/useNavigation.ts
```typescript
 1: import { usePathname } from "next/navigation";
 2: interface NavigationLink {
 3:   title: string;
 4:   name: string;
 5:   hash: string;
 6:   href: string;
 7:   externalLink: boolean;
 8: }
 9: /**
10:  * Custom hook for managing navigation state and logic
11:  * @param {NavigationLink[]} navigationLinks - Array of navigation links
12:  * @returns {Object} An object containing navigation-related data and functions
13:  * @property {NavigationLink[]} navigationLinks - The array of navigation links passed to the hook
14:  * @property {function} isLinkActive - A function that checks if a given link is currently active
15:  */
16: export function useNavigation(navigationLinks: NavigationLink[]) {
17:   const pathname = usePathname();
18:   const isLinkActive = (href: string) => pathname === href;
19:   return {
20:     navigationLinks,
21:     isLinkActive,
22:   };
23: }
```

## File: src/lib/framer/client.ts
```typescript
1: "use client";
2: import { motion } from "motion/react";
3: export const MotionDiv = motion.div;
4: export const MotionLi = motion.li;
5: export const MotionUl = motion.ul;
```

## File: src/lib/sanity/client.ts
```typescript
 1: import { createClient } from "next-sanity";
 2: const projectId = process.env.NEXT_PUBLIC_SANITY_PROJECT_ID || "41s7iutf";
 3: const dataset = process.env.NEXT_PUBLIC_SANITY_DATASET || "production";
 4: const apiVersion = process.env.NEXT_PUBLIC_SANITY_API_VERSION || "2023-05-03";
 5: export const client = createClient({
 6:   projectId,
 7:   dataset,
 8:   apiVersion,
 9:   useCdn: true,
10: });
```

## File: src/lib/sanity/helpers.ts
```typescript
1: import { client } from "./client";
2: import imageUrlBuilder from "@sanity/image-url";
3: const builder = imageUrlBuilder(client);
4: export const urlFor = (source: string) => {
5:   return builder.image(source);
6: };
```

## File: src/lib/sanity/queries.ts
```typescript
 1: import { groq } from "next-sanity";
 2: export const projectsQuery = groq`
 3:   *[_type == "project"] | order(featureOrder asc) {
 4:     id,
 5:     name,
 6:     description,
 7:     subdescription,
 8:     projectcategory->{
 9:       _id,
10:       title
11:     },
12:     urlwww[]{
13:       ...,
14:       _key,
15:     },
16:     urlgithub[]{
17:       ...,
18:       _key,
19:     },
20:     "projectimage": projectimage.asset->url,
21:     featured,
22:     featureOrder
23:   }
24: `;
25: export const cvQuery = groq`
26:   *[_type == "cv"][0] {
27:     keyQualifications,
28:     experience[] {
29:       period,
30:       company,
31:       role,
32:       description
33:     },
34:     education[] {
35:       period,
36:       institution,
37:       degree,
38:       description
39:     },
40:     volunteerWork[] {
41:       period,
42:       organization,
43:       role,
44:       description
45:     }
46:   }
47: `;
48: export const pageContentQuery = groq`
49:   *[_type == 'page' && title match 'Hjem'][0]{
50:     "id": _id, 
51:     title, 
52:     hero, 
53:     content
54:   }
55: `;
56: export const navigationQuery = groq`
57:   *[_type == "navigation"][0] {
58:     title,
59:     links[] {
60:       title,
61:       name,
62:       hash,
63:       href,
64:       externalLink
65:     }
66:   }
67: `;
```

## File: src/stories/components/BounceInScroll.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta, Story } from "@ladle/react";
 3: import BounceInScroll from "../../components/Animations/BounceInScroll.component";
 4: import { IAnimateBounceProps } from "../../components/Animations/types/Animations.types";
 5: export default {
 6:   title: "Animations/BounceInScroll",
 7:   component: BounceInScroll,
 8: } as Meta;
 9: const Template: Story<IAnimateBounceProps> = (args) => (
10:   <div className="min-h-[150vh] bg-gray-800 p-8">
11:     <div className="text-white mb-[100vh]">
12:       ⬇️ Scroll down to see the animation
13:     </div>
14:     <BounceInScroll {...args} />
15:   </div>
16: );
17: const Card = () => (
18:   <div className="bg-gray-700 p-6 rounded-lg shadow-lg">
19:     <h2 className="text-2xl text-white mb-4">Animated Card</h2>
20:     <p className="text-gray-300">
21:       This card demonstrates the BounceInScroll animation component.
22:     </p>
23:   </div>
24: );
25: export const Default = Template.bind({});
26: Default.args = {
27:   children: <Card />,
28:   viewAmount: 0.2,
29: };
30: export const InstantAnimation = Template.bind({});
31: InstantAnimation.args = {
32:   children: <Card />,
33:   instant: true,
34: };
35: export const FullViewTrigger = Template.bind({});
36: FullViewTrigger.args = {
37:   children: <Card />,
38:   viewAmount: "all",
39: };
40: export const PartialViewTrigger = Template.bind({});
41: PartialViewTrigger.args = {
42:   children: <Card />,
43:   viewAmount: "some",
44: };
45: export const CustomViewAmount = Template.bind({});
46: CustomViewAmount.args = {
47:   children: <Card />,
48:   viewAmount: 0.5,
49: };
50: export const WithCustomClass = Template.bind({});
51: WithCustomClass.args = {
52:   children: <Card />,
53:   cssClass: "max-w-md mx-auto",
54: };
55: export const LargeContent = Template.bind({});
56: LargeContent.args = {
57:   children: (
58:     <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
59:       <Card />
60:       <Card />
61:       <Card />
62:     </div>
63:   ),
64:   viewAmount: 0.2,
65: };
66: export const TextContent = Template.bind({});
67: TextContent.args = {
68:   children: (
69:     <div className="text-white text-center">
70:       <h1 className="text-4xl font-bold mb-4">Welcome</h1>
71:       <p className="text-xl">This is a simple text animation example.</p>
72:     </div>
73:   ),
74:   viewAmount: 0.2,
75: };
```

## File: src/stories/components/Button.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta, Story } from "@ladle/react";
 3: import Button, { IButtonProps } from "../../components/UI/Button.component";
 4: export default {
 5:   title: "Button",
 6:   component: Button,
 7: } as Meta;
 8: const Template: Story<IButtonProps> = (args) => <Button {...args} />;
 9: export const Default = Template.bind({});
10: Default.args = {
11:   children: "Default Button",
12: };
13: export const LinkButton = Template.bind({});
14: LinkButton.args = {
15:   children: "Link Button",
16:   href: "https://example.com",
17:   renderAs: "a",
18: };
19: export const SubmitButton = Template.bind({});
20: SubmitButton.args = {
21:   children: "Submit Button",
22:   type: "submit",
23: };
24: export const ResetButton = Template.bind({});
25: ResetButton.args = {
26:   children: "Reset Button",
27:   type: "reset",
28: };
29: export const DisabledButton = Template.bind({});
30: DisabledButton.args = {
31:   children: "Disabled Button",
32:   disabled: true,
33: };
34: export const CustomElementButton = Template.bind({});
35: CustomElementButton.args = {
36:   children: "Custom Element Button",
37:   renderAs: "div",
38: };
```

## File: src/stories/components/ErrorBoundary.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta } from "@ladle/react";
 3: import ErrorBoundary from "../../components/ErrorBoundary/ErrorBoundary";
 4: import "@/app/globals.css";
 5: export default {
 6:   title: "ErrorBoundary",
 7:   component: ErrorBoundary,
 8: } as Meta;
 9: // Component that throws an error
10: const BuggyCounter = () => {
11:   const [counter, setCounter] = React.useState(0);
12:   if (counter === 5) {
13:     throw new Error("Counter reached 5!");
14:   }
15:   return (
16:     <div className="p-2 bg-surface rounded">
17:       <p className="text-sm">Counter: {counter}</p>
18:       <button
19:         onClick={() => setCounter((c) => c + 1)}
20:         className="mt-1 px-2 py-1 bg-matrix-light text-black rounded text-xs hover:bg-matrix-dark"
21:       >
22:         Increment
23:       </button>
24:       <p className="text-xs mt-1 text-gray-400">Crashes at 5</p>
25:     </div>
26:   );
27: };
28: // Component that throws an error immediately
29: const ImmediateCrash = () => {
30:   throw new Error("Immediate crash!");
31: };
32: // Basic error boundary example
33: export const Default = () => (
34:   <ErrorBoundary>
35:     <BuggyCounter />
36:   </ErrorBoundary>
37: );
38: // Compact error boundary example
39: export const CompactError = () => (
40:   <ErrorBoundary compact>
41:     <ImmediateCrash />
42:   </ErrorBoundary>
43: );
44: // Multiple error boundaries
45: export const Multiple = () => (
46:   <div className="space-y-2">
47:     <ErrorBoundary compact>
48:       <div className="p-2 bg-surface rounded">
49:         <p className="text-xs">Working component</p>
50:       </div>
51:     </ErrorBoundary>
52:     <ErrorBoundary compact>
53:       <ImmediateCrash />
54:     </ErrorBoundary>
55:     <ErrorBoundary compact>
56:       <div className="p-2 bg-surface rounded">
57:         <p className="text-xs">Another working component</p>
58:       </div>
59:     </ErrorBoundary>
60:   </div>
61: );
```

## File: src/stories/components/FadeDown.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta, Story } from "@ladle/react";
 3: import FadeDown from "../../components/Animations/FadeDown.component";
 4: import { IAnimateWithDelayProps } from "../../components/Animations/types/Animations.types";
 5: export default {
 6:   title: "FadeDown",
 7:   component: FadeDown,
 8: } as Meta;
 9: const Template: Story<IAnimateWithDelayProps> = (args) => (
10:   <FadeDown {...args} />
11: );
12: export const Default = Template.bind({});
13: Default.args = {
14:   children: "Fade Down Animation",
15:   cssClass: "p-4 bg-gray-100 border border-gray-300 rounded",
16:   delay: 0,
17: };
18: export const WithDelay = Template.bind({});
19: WithDelay.args = {
20:   children: "Fade Down with Delay",
21:   cssClass: "p-4 bg-blue-100 border border-blue-300 rounded",
22:   delay: 1,
23: };
24: export const CustomStyles = Template.bind({});
25: CustomStyles.args = {
26:   children: "Fade Down with Custom Styles",
27:   cssClass: "p-4 bg-green-100 border border-green-300 rounded shadow-lg",
28:   delay: 0.5,
29: };
```

## File: src/stories/components/FadeUp.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta, Story } from "@ladle/react";
 3: import FadeUp from "../../components/Animations/FadeUp.component";
 4: import { IAnimateWithDelayProps } from "../../components/Animations/types/Animations.types";
 5: export default {
 6:   title: "FadeUp",
 7:   component: FadeUp,
 8: } as Meta;
 9: const Template: Story<IAnimateWithDelayProps> = (args) => <FadeUp {...args} />;
10: export const Default = Template.bind({});
11: Default.args = {
12:   children: "Fade Up Animation",
13:   cssClass: "p-4 bg-gray-100 border border-gray-300 rounded",
14:   delay: 0,
15: };
16: export const WithDelay = Template.bind({});
17: WithDelay.args = {
18:   children: "Fade Up with Delay",
19:   cssClass: "p-4 bg-blue-100 border border-blue-300 rounded",
20:   delay: 1,
21: };
22: export const CustomStyles = Template.bind({});
23: CustomStyles.args = {
24:   children: "Fade Up with Custom Styles",
25:   cssClass: "p-4 bg-green-100 border border-green-300 rounded shadow-lg",
26:   delay: 0.5,
27: };
```

## File: src/stories/components/Footer.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta } from "@ladle/react";
 3: import Footer from "../../components/Layout/Footer.component";
 4: import "@/app/globals.css";
 5: export default {
 6:   title: "Layout/Footer",
 7:   component: Footer,
 8: } as Meta;
 9: // Default footer
10: export const Default = () => <Footer />;
11: // With content above
12: export const WithContent = () => (
13:   <>
14:     <div className="min-h-[200px] flex items-center justify-center bg-slate-700">
15:       <p>Page content</p>
16:     </div>
17:     <Footer />
18:   </>
19: );
20: // Narrow viewport
21: export const NarrowViewport = () => (
22:   <div style={{ width: "320px" }}>
23:     <Footer />
24:   </div>
25: );
26: // Wide viewport
27: export const WideViewport = () => <Footer />;
28: // With margin top showcase
29: export const WithMarginTop = () => (
30:   <>
31:     <div className="min-h-[100px] flex items-center justify-center bg-slate-700">
32:       <p>Content area</p>
33:     </div>
34:     <Footer />
35:   </>
36: );
```

## File: src/stories/components/GenericForm.stories.tsx
```typescript
  1: import React from "react";
  2: import { Meta } from "@ladle/react";
  3: import { z } from "zod";
  4: import GenericForm from "../../components/UI/GenericForm.component";
  5: export default {
  6:   title: "GenericForm",
  7:   component: GenericForm,
  8: } as Meta;
  9: // Example schemas
 10: const contactSchema = z.object({
 11:   name: z.string().min(2, "Name must be at least 2 characters"),
 12:   email: z.string().email("Invalid email address"),
 13:   message: z.string().min(10, "Message must be at least 10 characters"),
 14: });
 15: const subscribeSchema = z.object({
 16:   email: z.string().email("Invalid email address"),
 17:   preferences: z.string().min(1, "Please select your preferences"),
 18: });
 19: const feedbackSchema = z.object({
 20:   title: z.string().min(3, "Title must be at least 3 characters"),
 21:   rating: z.string().regex(/^[1-5]$/, "Rating must be between 1 and 5"),
 22:   feedback: z.string().min(20, "Feedback must be at least 20 characters"),
 23: });
 24: type FormData =
 25:   | z.infer<typeof contactSchema>
 26:   | z.infer<typeof subscribeSchema>
 27:   | z.infer<typeof feedbackSchema>
 28:   | { email: string };
 29: // Example async submit handlers
 30: const mockSubmit = async (data: FormData) => {
 31:   await new Promise((resolve) => setTimeout(resolve, 1000));
 32:   // eslint-disable-next-line no-console
 33:   console.log("Form submitted:", data);
 34: };
 35: // Contact Form Story
 36: export const ContactForm = () => (
 37:   <div className="max-w-md mx-auto p-6 bg-gray-800 rounded-lg">
 38:     <h2 className="text-2xl text-white mb-6">Contact Us</h2>
 39:     <GenericForm
 40:       formSchema={contactSchema}
 41:       onSubmit={mockSubmit}
 42:       submitButtonText="Send Message"
 43:       fields={[
 44:         {
 45:           name: "name",
 46:           label: "Your Name",
 47:           type: "input",
 48:         },
 49:         {
 50:           name: "email",
 51:           label: "Email Address",
 52:           type: "input",
 53:           inputPattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
 54:           title: "Please enter a valid email address",
 55:         },
 56:         {
 57:           name: "message",
 58:           label: "Your Message",
 59:           type: "textarea",
 60:         },
 61:       ]}
 62:     />
 63:   </div>
 64: );
 65: // Subscribe Form Story
 66: export const SubscribeForm = () => (
 67:   <div className="max-w-md mx-auto p-6 bg-gray-800 rounded-lg">
 68:     <h2 className="text-2xl text-white mb-6">Subscribe to Newsletter</h2>
 69:     <GenericForm
 70:       formSchema={subscribeSchema}
 71:       onSubmit={mockSubmit}
 72:       submitButtonText="Subscribe"
 73:       fields={[
 74:         {
 75:           name: "email",
 76:           label: "Email Address",
 77:           type: "input",
 78:           inputPattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
 79:           title: "Please enter a valid email address",
 80:         },
 81:         {
 82:           name: "preferences",
 83:           label: "Newsletter Preferences",
 84:           type: "textarea",
 85:         },
 86:       ]}
 87:     />
 88:   </div>
 89: );
 90: // Feedback Form Story
 91: export const FeedbackForm = () => (
 92:   <div className="max-w-md mx-auto p-6 bg-gray-800 rounded-lg">
 93:     <h2 className="text-2xl text-white mb-6">Provide Feedback</h2>
 94:     <GenericForm
 95:       formSchema={feedbackSchema}
 96:       onSubmit={mockSubmit}
 97:       submitButtonText="Submit Feedback"
 98:       fields={[
 99:         {
100:           name: "title",
101:           label: "Feedback Title",
102:           type: "input",
103:         },
104:         {
105:           name: "rating",
106:           label: "Rating (1-5)",
107:           type: "input",
108:           inputPattern: /^[1-5]$/,
109:           title: "Please enter a number between 1 and 5",
110:         },
111:         {
112:           name: "feedback",
113:           label: "Detailed Feedback",
114:           type: "textarea",
115:         },
116:       ]}
117:     />
118:   </div>
119: );
120: // Simple Form Story
121: export const SimpleForm = () => (
122:   <div className="max-w-md mx-auto p-6 bg-gray-800 rounded-lg">
123:     <h2 className="text-2xl text-white mb-6">Quick Contact</h2>
124:     <GenericForm
125:       formSchema={z.object({
126:         email: z.string().email("Invalid email address"),
127:       })}
128:       onSubmit={mockSubmit}
129:       submitButtonText="Contact"
130:       fields={[
131:         {
132:           name: "email",
133:           label: "Email Address",
134:           type: "input",
135:           inputPattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
136:           title: "Please enter a valid email address",
137:         },
138:       ]}
139:     />
140:   </div>
141: );
```

## File: src/stories/components/Grow.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta, Story } from "@ladle/react";
 3: import Grow from "../../components/Animations/Grow.component";
 4: import { IGrowProps } from "../../components/Animations/types/Animations.types";
 5: export default {
 6:   title: "Grow",
 7:   component: Grow,
 8: } as Meta;
 9: const Template: Story<IGrowProps> = (args) => <Grow {...args} />;
10: export const Default = Template.bind({});
11: Default.args = {
12:   children: "Grow Animation",
13:   duration: 0.5,
14:   delay: 0,
15:   easing: [0.42, 0, 0.58, 1],
16: };
17: export const WithDelay = Template.bind({});
18: WithDelay.args = {
19:   children: "Grow with Delay",
20:   duration: 0.5,
21:   delay: 1,
22:   easing: [0.42, 0, 0.58, 1],
23: };
24: export const CustomDuration = Template.bind({});
25: CustomDuration.args = {
26:   children: "Grow with Custom Duration",
27:   duration: 1,
28:   delay: 0,
29:   easing: [0.42, 0, 0.58, 1],
30: };
31: export const CustomEasing = Template.bind({});
32: CustomEasing.args = {
33:   children: "Grow with Custom Easing",
34:   duration: 0.5,
35:   delay: 0,
36:   easing: [0.25, 0.8, 0.25, 1],
37: };
```

## File: src/stories/components/Hamburger.stories.tsx
```typescript
 1: import React, { useState } from "react";
 2: import { Meta } from "@ladle/react";
 3: import Hamburger from "../../components/Layout/Hamburger.component";
 4: export default {
 5:   title: "Layout/Hamburger",
 6:   component: Hamburger,
 7: } as Meta;
 8: // Default hamburger state
 9: export const Default = () => (
10:   <div className="bg-gray-800 p-4">
11:     <Hamburger onClick={() => {}} animatetoX={false} />
12:   </div>
13: );
14: // X state
15: export const XState = () => (
16:   <div className="bg-gray-800 p-4">
17:     <Hamburger onClick={() => {}} animatetoX={true} />
18:   </div>
19: );
20: // Interactive state
21: export const Interactive = () => {
22:   const [isOpen, setIsOpen] = useState(false);
23:   return (
24:     <div className="bg-gray-800 p-4">
25:       <Hamburger onClick={() => setIsOpen(!isOpen)} animatetoX={isOpen} />
26:       <p className="text-white text-sm mt-4">
27:         Click the hamburger to toggle state
28:       </p>
29:     </div>
30:   );
31: };
32: // On dark background
33: export const OnDarkBackground = () => {
34:   const [isOpen, setIsOpen] = useState(false);
35:   return (
36:     <div className="bg-gray-900 p-4">
37:       <Hamburger onClick={() => setIsOpen(!isOpen)} animatetoX={isOpen} />
38:     </div>
39:   );
40: };
41: // On light background
42: export const OnLightBackground = () => {
43:   const [isOpen, setIsOpen] = useState(false);
44:   return (
45:     <div className="bg-gray-100 p-4">
46:       <div className="bg-gray-800 inline-block rounded">
47:         <Hamburger onClick={() => setIsOpen(!isOpen)} animatetoX={isOpen} />
48:       </div>
49:     </div>
50:   );
51: };
```

## File: src/stories/components/InputField.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta, Story } from "@ladle/react";
 3: import InputField, {
 4:   InputProps,
 5: } from "../../components/UI/InputField.component";
 6: import { useForm, FieldValues } from "react-hook-form";
 7: export default {
 8:   title: "InputField",
 9:   component: InputField,
10: } as Meta;
11: // Define a type for the form values
12: interface StoryFormValues extends FieldValues {
13:   defaultInput?: string;
14:   requiredInput?: string;
15:   emailInput?: string;
16:   textArea?: string;
17:   errorInput?: string;
18: }
19: // Wrapper component to provide form context
20: const InputFieldWrapper = <T extends FieldValues>(
21:   props: Omit<InputProps<T>, "register">,
22: ) => {
23:   const { register } = useForm<T>();
24:   return <InputField {...props} register={register} />;
25: };
26: const Template: Story<Omit<InputProps<StoryFormValues>, "register">> = (
27:   args,
28: ) => <InputFieldWrapper {...args} />;
29: export const Default = Template.bind({});
30: Default.args = {
31:   name: "defaultInput",
32:   label: "Default Input",
33:   htmlFor: "defaultInput",
34: };
35: export const Required = Template.bind({});
36: Required.args = {
37:   name: "requiredInput",
38:   label: "Required Input",
39:   htmlFor: "requiredInput",
40:   isRequired: true,
41: };
42: export const WithPattern = Template.bind({});
43: WithPattern.args = {
44:   name: "emailInput",
45:   label: "Email Input",
46:   htmlFor: "emailInput",
47:   inputPattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
48:   title: "Please enter a valid email address",
49: };
50: export const TextArea = Template.bind({});
51: TextArea.args = {
52:   name: "textArea",
53:   label: "Text Area",
54:   htmlFor: "textArea",
55:   type: "textarea",
56: };
57: export const WithError = Template.bind({});
58: WithError.args = {
59:   name: "errorInput",
60:   label: "Input with Error",
61:   htmlFor: "errorInput",
62:   error: "This field has an error",
63: };
```

## File: src/stories/components/Matrix.stories.tsx
```typescript
  1: import React, { useEffect, useState } from "react";
  2: import { Meta } from "@ladle/react";
  3: interface ReactMatrixAnimationProps {
  4:   tileSize?: number;
  5:   fadeFactor?: number;
  6:   backgroundColor?: string;
  7:   fontColor?: string;
  8:   glowColor?: string;
  9:   tileSet?: string[] | null;
 10: }
 11: export default {
 12:   title: "Animations/Matrix",
 13: } as Meta;
 14: // Client-side only wrapper component
 15: const ClientOnlyMatrix = (props: ReactMatrixAnimationProps) => {
 16:   const [Matrix, setMatrix] =
 17:     useState<React.ComponentType<ReactMatrixAnimationProps> | null>(null);
 18:   useEffect(() => {
 19:     import("../../components/Animations/Matrix.component").then((mod) => {
 20:       setMatrix(() => mod.default);
 21:     });
 22:   }, []);
 23:   if (!Matrix) {
 24:     return <div>Loading Matrix...</div>;
 25:   }
 26:   return <Matrix {...props} />;
 27: };
 28: const Container = ({ children }: { children: React.ReactNode }) => (
 29:   <div className="relative w-full h-[400px] bg-gray-900">{children}</div>
 30: );
 31: // Basic story with default props
 32: export const Default = () => (
 33:   <Container>
 34:     <ClientOnlyMatrix />
 35:   </Container>
 36: );
 37: // Story with custom colors
 38: export const CustomColors = () => (
 39:   <Container>
 40:     <ClientOnlyMatrix
 41:       backgroundColor="#000000"
 42:       fontColor="#FF0000"
 43:       glowColor="#FF4444"
 44:     />
 45:   </Container>
 46: );
 47: // Story with larger tiles
 48: export const LargeTiles = () => (
 49:   <Container>
 50:     <ClientOnlyMatrix
 51:       tileSize={30}
 52:       backgroundColor="#000000"
 53:       fontColor="#00FF00"
 54:       glowColor="#00FF00"
 55:     />
 56:   </Container>
 57: );
 58: // Story with smaller tiles
 59: export const SmallTiles = () => (
 60:   <Container>
 61:     <ClientOnlyMatrix
 62:       tileSize={12}
 63:       backgroundColor="#000000"
 64:       fontColor="#00FF00"
 65:       glowColor="#00FF00"
 66:     />
 67:   </Container>
 68: );
 69: // Story with binary characters
 70: export const BinaryMatrix = () => (
 71:   <Container>
 72:     <ClientOnlyMatrix
 73:       tileSet={["0", "1"]}
 74:       backgroundColor="#000000"
 75:       fontColor="#00FF00"
 76:       glowColor="#00FF00"
 77:     />
 78:   </Container>
 79: );
 80: // Story with slow fade effect
 81: export const SlowFade = () => (
 82:   <Container>
 83:     <ClientOnlyMatrix
 84:       fadeFactor={0.1}
 85:       backgroundColor="#000000"
 86:       fontColor="#00FF00"
 87:       glowColor="#00FF00"
 88:     />
 89:   </Container>
 90: );
 91: // Story with blue theme
 92: export const BlueTheme = () => (
 93:   <Container>
 94:     <ClientOnlyMatrix
 95:       backgroundColor="#000033"
 96:       fontColor="#0088FF"
 97:       glowColor="#00AAFF"
 98:       tileSet={["@", "#", "$", "%", "&", "*"]}
 99:     />
100:   </Container>
101: );
102: // Story with purple theme
103: export const PurpleTheme = () => (
104:   <Container>
105:     <ClientOnlyMatrix
106:       backgroundColor="#1a0033"
107:       fontColor="#9933ff"
108:       glowColor="#bf80ff"
109:       tileSize={25}
110:       fadeFactor={0.3}
111:     />
112:   </Container>
113: );
```

## File: src/stories/components/MatrixCursor.stories.tsx
```typescript
  1: import React, { useRef } from "react";
  2: import { Meta } from "@ladle/react";
  3: import MatrixCursor from "../../components/Animations/MatrixCursor.component";
  4: import "@/app/cursor.css";
  5: export default {
  6:   title: "Animations/MatrixCursor",
  7:   component: MatrixCursor,
  8: } as Meta;
  9: const DemoContainer = ({ children }: { children: React.ReactNode }) => {
 10:   const heroRef = useRef<HTMLDivElement>(null);
 11:   return (
 12:     <div
 13:       ref={heroRef}
 14:       className="min-h-[400px] bg-gray-900 p-8 rounded-lg relative overflow-hidden"
 15:     >
 16:       {children}
 17:       <MatrixCursor heroRef={heroRef} />
 18:     </div>
 19:   );
 20: };
 21: export const Default = () => (
 22:   <DemoContainer>
 23:     <div className="text-gray-300 space-y-4">
 24:       <h2 className="text-2xl font-bold text-white mb-4">Matrix Cursor Demo</h2>
 25:       <p>
 26:         Move your mouse around this container to see the matrix cursor effect.
 27:       </p>
 28:       <p>The cursor will change and leave a trail of matrix characters.</p>
 29:       <div className="grid grid-cols-2 gap-4 mt-8">
 30:         <div className="bg-gray-800 p-4 rounded">
 31:           <h3 className="text-lg font-semibold mb-2">Hover Area 1</h3>
 32:           <p className="text-sm">
 33:             Move your cursor here to see the effect in action
 34:           </p>
 35:         </div>
 36:         <div className="bg-gray-800 p-4 rounded">
 37:           <h3 className="text-lg font-semibold mb-2">Hover Area 2</h3>
 38:           <p className="text-sm">
 39:             Try moving between different areas to see the trail
 40:           </p>
 41:         </div>
 42:       </div>
 43:     </div>
 44:   </DemoContainer>
 45: );
 46: export const WithInteractiveElements = () => (
 47:   <DemoContainer>
 48:     <div className="text-gray-300 space-y-6">
 49:       <h2 className="text-2xl font-bold text-white mb-4">
 50:         Interactive Elements Demo
 51:       </h2>
 52:       <div className="grid grid-cols-2 gap-4">
 53:         <button className="bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition-colors">
 54:           Hover Me
 55:         </button>
 56:         <button className="bg-green-600 text-white px-6 py-3 rounded hover:bg-green-700 transition-colors text-center">
 57:           Button Example
 58:         </button>
 59:       </div>
 60:       <div className="bg-gray-800 p-6 rounded">
 61:         <p>
 62:           The matrix cursor effect works seamlessly with interactive elements.
 63:           Try hovering over the buttons above.
 64:         </p>
 65:       </div>
 66:     </div>
 67:   </DemoContainer>
 68: );
 69: export const LargeArea = () => (
 70:   <DemoContainer>
 71:     <div className="text-gray-300 min-h-[600px] flex items-center justify-center">
 72:       <div className="text-center space-y-4">
 73:         <h2 className="text-3xl font-bold text-white">Large Area Demo</h2>
 74:         <p>
 75:           This demo shows how the matrix cursor effect works in a larger area.
 76:           <br />
 77:           Move your cursor around to create longer trails.
 78:         </p>
 79:       </div>
 80:     </div>
 81:   </DemoContainer>
 82: );
 83: export const WithContent = () => (
 84:   <DemoContainer>
 85:     <div className="text-gray-300 space-y-6">
 86:       <h2 className="text-2xl font-bold text-white mb-4">
 87:         Content Interaction
 88:       </h2>
 89:       <div className="grid grid-cols-3 gap-4">
 90:         {[1, 2, 3].map((i) => (
 91:           <div
 92:             key={i}
 93:             className="bg-gray-800 p-4 rounded hover:bg-gray-700 transition-colors"
 94:           >
 95:             <h3 className="text-lg font-semibold mb-2">Card {i}</h3>
 96:             <p className="text-sm">
 97:               Hover over this card to see how the matrix cursor interacts with
 98:               content.
 99:             </p>
100:           </div>
101:         ))}
102:       </div>
103:       <div className="bg-gray-800 p-6 rounded mt-8">
104:         <p className="text-lg">
105:           The matrix cursor effect adds a unique interactive element to your
106:           content. Try moving between different cards to see how the trail
107:           follows your movement.
108:         </p>
109:       </div>
110:     </div>
111:   </DemoContainer>
112: );
```

## File: src/stories/components/NavigationLink.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta } from "@ladle/react";
 3: import "@/app/glitch.css";
 4: // Mock NavigationLink component for stories
 5: const NavigationLink = ({
 6:   name,
 7:   href,
 8:   isActive,
 9: }: {
10:   name: string;
11:   href: string;
12:   isActive: boolean;
13: }) => (
14:   <div className="relative">
15:     <a
16:       href={href}
17:       onClick={(e) => e.preventDefault()}
18:       className={`flex w-full items-center justify-center px-2 py-2 hover:text-white transition font-semibold text-lg ${
19:         isActive ? "text-green-400" : ""
20:       }`}
21:     >
22:       <div className="glitch relative" data-text={name}>
23:         {name}
24:         <span
25:           className={`absolute bottom-0 left-0 h-0.5 bg-current ${
26:             isActive ? "bg-green-400" : "bg-white"
27:           }`}
28:           style={{
29:             width: isActive ? "100%" : "0%",
30:             transition: "width 0.3s",
31:           }}
32:         />
33:       </div>
34:     </a>
35:   </div>
36: );
37: export default {
38:   title: "Layout/NavigationLink",
39:   component: NavigationLink,
40: } as Meta;
41: // Default state
42: export const Default = () => (
43:   <div className="bg-gray-800 p-4 w-48">
44:     <NavigationLink name="Home" href="/" isActive={false} />
45:   </div>
46: );
47: // Active state
48: export const Active = () => (
49:   <div className="bg-gray-800 p-4 w-48">
50:     <NavigationLink name="Home" href="/" isActive={true} />
51:   </div>
52: );
53: // Multiple links
54: export const MultipleLinks = () => (
55:   <div className="bg-gray-800 p-4 w-48 flex flex-col gap-2">
56:     <NavigationLink name="Home" href="/" isActive={true} />
57:     <NavigationLink name="Projects" href="/projects" isActive={false} />
58:     <NavigationLink name="Contact" href="/contact" isActive={false} />
59:   </div>
60: );
61: // Long text
62: export const LongText = () => (
63:   <div className="bg-gray-800 p-4 w-64">
64:     <NavigationLink
65:       name="Very Long Navigation Link Text"
66:       href="/long"
67:       isActive={false}
68:     />
69:   </div>
70: );
71: // Different backgrounds
72: export const OnDifferentBackgrounds = () => (
73:   <div className="space-y-4">
74:     <div className="bg-gray-900 p-4 w-48">
75:       <NavigationLink name="Dark Background" href="/" isActive={false} />
76:     </div>
77:     <div className="bg-gray-800 p-4 w-48">
78:       <NavigationLink name="Medium Background" href="/" isActive={true} />
79:     </div>
80:     <div className="bg-gray-700 p-4 w-48">
81:       <NavigationLink name="Light Background" href="/" isActive={false} />
82:     </div>
83:   </div>
84: );
85: // Horizontal layout
86: export const HorizontalLayout = () => (
87:   <div className="bg-gray-800 p-4">
88:     <nav className="flex gap-4">
89:       <NavigationLink name="Home" href="/" isActive={true} />
90:       <NavigationLink name="Projects" href="/projects" isActive={false} />
91:       <NavigationLink name="Contact" href="/contact" isActive={false} />
92:     </nav>
93:   </div>
94: );
```

## File: src/stories/components/PageHeader.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta } from "@ladle/react";
 3: import PageHeader from "../../components/UI/PageHeader.component";
 4: import "@/app/globals.css";
 5: export default {
 6:   title: "UI/PageHeader",
 7:   component: PageHeader,
 8: } as Meta;
 9: // Default header with text
10: export const Default = () => <PageHeader>Welcome to the Page</PageHeader>;
11: // With HTML elements
12: export const WithHtmlElements = () => (
13:   <PageHeader>
14:     Welcome to <span className="text-matrix-light">Matrix</span>
15:   </PageHeader>
16: );
17: // Long text
18: export const LongText = () => (
19:   <PageHeader>
20:     This is a very long page header text that demonstrates how the component
21:     handles longer content
22:   </PageHeader>
23: );
24: // Short text
25: export const ShortText = () => <PageHeader>Projects</PageHeader>;
26: // Narrow viewport
27: export const NarrowViewport = () => (
28:   <div style={{ width: "320px" }}>
29:     <PageHeader>Mobile View Header</PageHeader>
30:   </div>
31: );
32: // Wide viewport
33: export const WideViewport = () => (
34:   <div style={{ width: "1200px" }}>
35:     <PageHeader>Desktop View Header</PageHeader>
36:   </div>
37: );
```

## File: src/stories/components/Pill.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta, Story } from "@ladle/react";
 3: import Pill from "../../components/UI/Pill.component";
 4: export default {
 5:   title: "Pill",
 6:   component: Pill,
 7: } as Meta;
 8: const Template: Story<React.ComponentProps<typeof Pill>> = (args) => (
 9:   <Pill {...args} />
10: );
11: export const Default = Template.bind({});
12: Default.args = {
13:   text: "Default Pill",
14: };
15: export const CustomClass = Template.bind({});
16: CustomClass.args = {
17:   text: "Custom Styled Pill",
18:   className: "bg-purple-600 bg-opacity-20 border-purple-800",
19: };
20: export const AsLink = Template.bind({});
21: AsLink.args = {
22:   text: "Link Pill",
23:   href: "https://example.com",
24: };
25: export const WithClickHandler = Template.bind({});
26: WithClickHandler.args = {
27:   text: "Clickable Pill",
28:   onClick: () => alert("Pill clicked!"),
29: };
```

## File: src/stories/components/RotatingLoader.stories.tsx
```typescript
1: import React from "react";
2: import { Meta, Story } from "@ladle/react";
3: import RotatingLoader from "../../components/Animations/RotatingLoader.component";
4: export default {
5:   title: "RotatingLoader",
6:   component: RotatingLoader,
7: } as Meta;
8: const Template: Story = () => <RotatingLoader />;
9: export const Default = Template.bind({});
```

## File: src/stories/components/SkipLink.stories.tsx
```typescript
 1: import React from "react";
 2: import { Meta, Story } from "@ladle/react";
 3: import SkipLink from "../../components/UI/SkipLink.component";
 4: export default {
 5:   title: "SkipLink",
 6:   component: SkipLink,
 7: } as Meta;
 8: // Basic template
 9: const Template: Story = () => <SkipLink />;
10: export const Default = Template.bind({});
11: // Story showing the skip link in context
12: export const WithContext = () => (
13:   <div>
14:     <SkipLink />
15:     <header className="bg-gray-800 p-4 text-white">
16:       <nav>Navigation Content</nav>
17:     </header>
18:     <main id="main-content" className="p-4">
19:       <h1>Main Content</h1>
20:       <p>This story demonstrates the SkipLink in context with a page layout.</p>
21:       <p>
22:         Tab to focus on the SkipLink - it will appear at the top of the page.
23:       </p>
24:     </main>
25:   </div>
26: );
27: // Story with focus styles visible
28: export const Focused = () => (
29:   <div className="p-4">
30:     <div className="not-sr-only absolute top-4 left-4 z-50">
31:       <SkipLink />
32:     </div>
33:     <p className="mt-20">
34:       This story shows how the SkipLink appears when focused. The skip link is
35:       permanently visible here for demonstration purposes.
36:     </p>
37:   </div>
38: );
```

## File: src/stories/components/Tabs.stories.tsx
```typescript
  1: import React from "react";
  2: import { Meta, Story } from "@ladle/react";
  3: import Tabs from "../../components/UI/Tabs.component";
  4: export default {
  5:   title: "Tabs",
  6:   component: Tabs,
  7: } as Meta;
  8: const Template: Story<React.ComponentProps<typeof Tabs>> = (args) => (
  9:   <Tabs {...args} />
 10: );
 11: // Sample content components
 12: const TextContent = () => (
 13:   <div className="py-4">
 14:     <h2 className="text-xl text-white mb-4">Text Content</h2>
 15:     <p className="text-gray-300">
 16:       This is a sample text content for the tab panel. It demonstrates how text
 17:       content is displayed within the tabs component.
 18:     </p>
 19:   </div>
 20: );
 21: const ListContent = () => (
 22:   <div className="py-4">
 23:     <h2 className="text-xl text-white mb-4">List Content</h2>
 24:     <ul className="list-disc list-inside text-gray-300">
 25:       <li>First item in the list</li>
 26:       <li>Second item in the list</li>
 27:       <li>Third item in the list</li>
 28:     </ul>
 29:   </div>
 30: );
 31: const FormField = ({
 32:   id,
 33:   label,
 34:   type,
 35:   placeholder,
 36: }: {
 37:   id: string;
 38:   label: string;
 39:   type: string;
 40:   placeholder: string;
 41: }) => (
 42:   <div>
 43:     <label htmlFor={id} className="block text-gray-300 mb-2">
 44:       {label}
 45:     </label>
 46:     <input
 47:       id={id}
 48:       type={type}
 49:       className="w-full p-2 rounded bg-gray-700 text-white"
 50:       placeholder={placeholder}
 51:     />
 52:   </div>
 53: );
 54: const FormContent = () => {
 55:   const formId = React.useId();
 56:   const fields = [
 57:     { label: "Name", type: "text", placeholder: "Enter your name" },
 58:     { label: "Email", type: "email", placeholder: "Enter your email" },
 59:   ];
 60:   return (
 61:     <div className="py-4">
 62:       <h2 className="text-xl text-white mb-4">Form Content</h2>
 63:       <form className="space-y-4">
 64:         {fields.map((field) => (
 65:           <FormField
 66:             key={field.label}
 67:             id={`${formId}-${field.label.toLowerCase()}`}
 68:             {...field}
 69:           />
 70:         ))}
 71:       </form>
 72:     </div>
 73:   );
 74: };
 75: export const VerticalTabs = Template.bind({});
 76: VerticalTabs.args = {
 77:   orientation: "vertical",
 78:   tabs: [
 79:     { id: "tab1", label: "Text", content: <TextContent /> },
 80:     { id: "tab2", label: "List", content: <ListContent /> },
 81:     { id: "tab3", label: "Form", content: <FormContent /> },
 82:   ],
 83: };
 84: export const HorizontalTabs = Template.bind({});
 85: HorizontalTabs.args = {
 86:   orientation: "horizontal",
 87:   tabs: [
 88:     { id: "tab1", label: "Text", content: <TextContent /> },
 89:     { id: "tab2", label: "List", content: <ListContent /> },
 90:     { id: "tab3", label: "Form", content: <FormContent /> },
 91:   ],
 92: };
 93: export const ManyTabs = Template.bind({});
 94: ManyTabs.args = {
 95:   tabs: [
 96:     { id: "tab1", label: "Tab 1", content: <TextContent /> },
 97:     { id: "tab2", label: "Tab 2", content: <ListContent /> },
 98:     { id: "tab3", label: "Tab 3", content: <FormContent /> },
 99:     { id: "tab4", label: "Tab 4", content: <TextContent /> },
100:     { id: "tab5", label: "Tab 5", content: <ListContent /> },
101:   ],
102: };
103: export const TwoTabs = Template.bind({});
104: TwoTabs.args = {
105:   tabs: [
106:     { id: "tab1", label: "First Tab", content: <TextContent /> },
107:     { id: "tab2", label: "Second Tab", content: <ListContent /> },
108:   ],
109: };
```

## File: src/types/sanity.types.ts
```typescript
  1: /**
  2:  * ---------------------------------------------------------------------------------
  3:  * This file has been generated by Sanity TypeGen.
  4:  * Command: `sanity typegen generate`
  5:  *
  6:  * Any modifications made directly to this file will be overwritten the next time
  7:  * the TypeScript definitions are generated. Please make changes to the Sanity
  8:  * schema definitions and/or GROQ queries if you need to update these types.
  9:  *
 10:  * For more information on how to use Sanity TypeGen, visit the official documentation:
 11:  * https://www.sanity.io/docs/sanity-typegen
 12:  * ---------------------------------------------------------------------------------
 13:  */
 14: // Source: schema.json
 15: export type SanityImagePaletteSwatch = {
 16:   _type: "sanity.imagePaletteSwatch";
 17:   background?: string;
 18:   foreground?: string;
 19:   population?: number;
 20:   title?: string;
 21: };
 22: export type SanityImagePalette = {
 23:   _type: "sanity.imagePalette";
 24:   darkMuted?: SanityImagePaletteSwatch;
 25:   lightVibrant?: SanityImagePaletteSwatch;
 26:   darkVibrant?: SanityImagePaletteSwatch;
 27:   vibrant?: SanityImagePaletteSwatch;
 28:   dominant?: SanityImagePaletteSwatch;
 29:   lightMuted?: SanityImagePaletteSwatch;
 30:   muted?: SanityImagePaletteSwatch;
 31: };
 32: export type SanityImageDimensions = {
 33:   _type: "sanity.imageDimensions";
 34:   height?: number;
 35:   width?: number;
 36:   aspectRatio?: number;
 37: };
 38: export type SanityFileAsset = {
 39:   _id: string;
 40:   _type: "sanity.fileAsset";
 41:   _createdAt: string;
 42:   _updatedAt: string;
 43:   _rev: string;
 44:   originalFilename?: string;
 45:   label?: string;
 46:   title?: string;
 47:   description?: string;
 48:   altText?: string;
 49:   sha1hash?: string;
 50:   extension?: string;
 51:   mimeType?: string;
 52:   size?: number;
 53:   assetId?: string;
 54:   uploadId?: string;
 55:   path?: string;
 56:   url?: string;
 57:   source?: SanityAssetSourceData;
 58: };
 59: export type Geopoint = {
 60:   _type: "geopoint";
 61:   lat?: number;
 62:   lng?: number;
 63:   alt?: number;
 64: };
 65: export type Herocontent = {
 66:   _type: "herocontent";
 67:   text?: string;
 68: };
 69: export type Pagecontent = {
 70:   _type: "pagecontent";
 71:   id?: number;
 72:   title?: string;
 73:   text?: Array<{
 74:     children?: Array<{
 75:       marks?: Array<string>;
 76:       text?: string;
 77:       _type: "span";
 78:       _key: string;
 79:     }>;
 80:     style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
 81:     listItem?: "bullet" | "number";
 82:     markDefs?: Array<{
 83:       href?: string;
 84:       _type: "link";
 85:       _key: string;
 86:     }>;
 87:     level?: number;
 88:     _type: "block";
 89:     _key: string;
 90:   }>;
 91: };
 92: export type Link = {
 93:   _type: "link";
 94:   title?: string;
 95:   url?: string;
 96:   external?: boolean;
 97: };
 98: export type Navigation = {
 99:   _id: string;
100:   _type: "Navigation";
101:   _createdAt: string;
102:   _updatedAt: string;
103:   _rev: string;
104:   title?: string;
105:   slug?: Slug;
106:   navigation?: Array<
107:     {
108:       _key: string;
109:     } & Link
110:   >;
111: };
112: export type Slug = {
113:   _type: "slug";
114:   current?: string;
115:   source?: string;
116: };
117: export type Page = {
118:   _id: string;
119:   _type: "page";
120:   _createdAt: string;
121:   _updatedAt: string;
122:   _rev: string;
123:   title?: string;
124:   header?: string;
125:   hero?: Array<
126:     {
127:       _key: string;
128:     } & Herocontent
129:   >;
130:   content?: Array<
131:     {
132:       _key: string;
133:     } & Pagecontent
134:   >;
135: };
136: export type Project = {
137:   _id: string;
138:   _type: "project";
139:   _createdAt: string;
140:   _updatedAt: string;
141:   _rev: string;
142:   id?: number;
143:   name: string;
144:   description?: string;
145:   subdescription?: string;
146:   projectcategory?: {
147:     _ref: string;
148:     _type: "reference";
149:     _weak?: boolean;
150:     [internalGroqTypeReferenceTo]?: "category";
151:   };
152:   urlwww?: Array<
153:     {
154:       _key: string;
155:     } & Link
156:   >;
157:   urlgithub?: Array<
158:     {
159:       _key: string;
160:     } & Link
161:   >;
162:   projectimage: string;
163:   featured?: boolean;
164:   featureOrder?: number;
165: };
166: export type SanityImageCrop = {
167:   _type: "sanity.imageCrop";
168:   top?: number;
169:   bottom?: number;
170:   left?: number;
171:   right?: number;
172: };
173: export type SanityImageHotspot = {
174:   _type: "sanity.imageHotspot";
175:   x?: number;
176:   y?: number;
177:   height?: number;
178:   width?: number;
179: };
180: export type SanityImageAsset = {
181:   _id: string;
182:   _type: "sanity.imageAsset";
183:   _createdAt: string;
184:   _updatedAt: string;
185:   _rev: string;
186:   originalFilename?: string;
187:   label?: string;
188:   title?: string;
189:   description?: string;
190:   altText?: string;
191:   sha1hash?: string;
192:   extension?: string;
193:   mimeType?: string;
194:   size?: number;
195:   assetId?: string;
196:   uploadId?: string;
197:   path?: string;
198:   url?: string;
199:   metadata?: SanityImageMetadata;
200:   source?: SanityAssetSourceData;
201: };
202: export type SanityAssetSourceData = {
203:   _type: "sanity.assetSourceData";
204:   name?: string;
205:   id?: string;
206:   url?: string;
207: };
208: export type SanityImageMetadata = {
209:   _type: "sanity.imageMetadata";
210:   location?: Geopoint;
211:   dimensions?: SanityImageDimensions;
212:   palette?: SanityImagePalette;
213:   lqip?: string;
214:   blurHash?: string;
215:   hasAlpha?: boolean;
216:   isOpaque?: boolean;
217: };
218: export type Category = {
219:   _id: string;
220:   _type: "category";
221:   _createdAt: string;
222:   _updatedAt: string;
223:   _rev: string;
224:   id?: number;
225:   name?: string;
226: };
227: export type AllSanitySchemaTypes =
228:   | SanityImagePaletteSwatch
229:   | SanityImagePalette
230:   | SanityImageDimensions
231:   | SanityFileAsset
232:   | Geopoint
233:   | Herocontent
234:   | Pagecontent
235:   | Link
236:   | Navigation
237:   | Slug
238:   | Page
239:   | Project
240:   | SanityImageCrop
241:   | SanityImageHotspot
242:   | SanityImageAsset
243:   | SanityAssetSourceData
244:   | SanityImageMetadata
245:   | Category;
246: export declare const internalGroqTypeReferenceTo: unique symbol;
```

## File: src/utils/eslint/index.js
```javascript
 1: module.exports = {
 2:   configs: {
 3:     recommended: {
 4:       plugins: ['test-rules'],
 5:       rules: {
 6:         'test-rules/arrange-act-assert': 'error'
 7:       }
 8:     }
 9:   },
10:   rules: {
11:     'arrange-act-assert': {
12:       meta: {
13:         type: 'suggestion',
14:         docs: {
15:           description: 'enforce AAA pattern in tests',
16:           category: 'Best Practices',
17:           recommended: true
18:         },
19:         schema: [] // no options
20:       },
21:       create(context) {
22:         return {
23:           CallExpression(node) {
24:             if (node.callee.name === 'it' || node.callee.name === 'test') {
25:               const testFn = node.arguments[1];
26:               if (testFn && testFn.type === 'ArrowFunctionExpression') {
27:                 const comments = context.getSourceCode().getCommentsBefore(testFn.body);
28:                 const hasAAA = comments.some(comment => 
29:                   comment.value.includes('Arrange') ||
30:                   comment.value.includes('Act') ||
31:                   comment.value.includes('Assert')
32:                 );
33:                 if (!hasAAA) {
34:                   context.report({
35:                     node,
36:                     message: 'Test should follow AAA pattern with comments'
37:                   });
38:                 }
39:               }
40:             }
41:           }
42:         };
43:       }
44:     }
45:   }
46: };
```

## File: src/utils/eslint/package.json
```json
 1: {
 2:   "name": "eslint-plugin-test-rules",
 3:   "version": "1.0.0",
 4:   "description": "Custom ESLint rules for testing",
 5:   "main": "index.js",
 6:   "scripts": {
 7:     "test": "echo \"Error: no test specified\" && exit 1"
 8:   },
 9:   "keywords": [
10:     "eslint",
11:     "eslintplugin",
12:     "eslint-plugin"
13:   ],
14:   "author": "",
15:   "license": "ISC",
16:   "peerDependencies": {
17:     "eslint": ">=9.18.0"
18:   }
19: }
```

## File: src/utils/portableTextComponents.tsx
```typescript
 1: import Link from "next/link";
 2: import type { PortableTextMarkComponentProps } from "@portabletext/react";
 3: export const myPortableTextComponents = {
 4:   marks: {
 5:     bold: ({ children }: PortableTextMarkComponentProps) => <b>{children}</b>,
 6:     italic: ({ children }: PortableTextMarkComponentProps) => <i>{children}</i>,
 7:     code: ({ children }: PortableTextMarkComponentProps) => (
 8:       <span className="mt-4 text-lg block">{children}</span>
 9:     ),
10:     link: ({ text, value }: PortableTextMarkComponentProps) => (
11:       <Link
12:         className="glitch underline text-lg font-bold text-green-400"
13:         href={value?.href || "#"}
14:         data-text={text}
15:       >
16:         {text}
17:       </Link>
18:     ),
19:   },
20: };
```

## File: src/utils/test-utils.ts
```typescript
 1: /**
 2:  * Helper function to check if a test follows the AAA pattern
 3:  * @param testContent The content of the test to check
 4:  * @returns Object containing check results
 5:  */
 6: export const checkAAAPattern = (testContent: string) => {
 7:   const hasArrange = testContent.includes("// Arrange");
 8:   const hasAct = testContent.includes("// Act");
 9:   const hasAssert = testContent.includes("// Assert");
10:   return {
11:     hasArrange,
12:     hasAct,
13:     hasAssert,
14:     isValid: hasArrange && hasAct && hasAssert,
15:     missingComments: [
16:       !hasArrange && "Arrange",
17:       !hasAct && "Act",
18:       !hasAssert && "Assert",
19:     ].filter(Boolean),
20:   };
21: };
22: /**
23:  * Example usage in tests:
24:  *
25:  * describe('Component Test', () => {
26:  *   it('should do something', () => {
27:  *     // Arrange
28:  *     const props = {...};
29:  *
30:  *     // Act
31:  *     render(<Component {...props} />);
32:  *
33:  *     // Assert
34:  *     expect(...).toBe(...);
35:  *   });
36:  * });
37:  */
```

## File: studio/schemaTypes/documents/category.ts
```typescript
 1: import {defineField, defineType, StringRule, NumberRule} from 'sanity'
 2: const category = defineType({
 3:   // This is the display name for the type
 4:   title: 'Category',
 5:   // The identifier for this document type used in the api's
 6:   name: 'category',
 7:   // Documents have the type 'document'. Your schema may describe types beyond documents
 8:   // but let's get back to that later.
 9:   type: 'document',
10:   // Now we proceed to list the fields of our document
11:   fields: [
12:     defineField({
13:       title: 'Id',
14:       name: 'id',
15:       type: 'number',
16:       validation: (Rule: NumberRule) => Rule.required(),
17:     }),
18:     defineField({
19:       title: 'Name',
20:       name: 'name',
21:       type: 'string',
22:       validation: (Rule: StringRule) => Rule.required(),
23:     }),
24:   ],
25: })
26: export default category
```

## File: studio/schemaTypes/documents/cv.ts
```typescript
  1: interface PreviewSelection {
  2:   keyQualifications?: string[]
  3: }
  4: export default {
  5:   name: 'cv',
  6:   title: 'CV',
  7:   type: 'document',
  8:   preview: {
  9:     select: {
 10:       keyQualifications: 'keyQualifications',
 11:     },
 12:     prepare(selection: PreviewSelection) {
 13:       const {keyQualifications} = selection
 14:       const mainQualification = keyQualifications?.[0] || 'No qualifications added'
 15:       return {
 16:         title: 'CV',
 17:         subtitle: mainQualification,
 18:       }
 19:     },
 20:   },
 21:   fields: [
 22:     {
 23:       name: 'keyQualifications',
 24:       title: 'Key Qualifications',
 25:       type: 'array',
 26:       of: [{type: 'text'}],
 27:     },
 28:     {
 29:       name: 'experience',
 30:       title: 'Experience',
 31:       type: 'array',
 32:       of: [
 33:         {
 34:           type: 'object',
 35:           fields: [
 36:             {name: 'period', title: 'Period', type: 'string'},
 37:             {
 38:               name: 'company',
 39:               title: 'Company/Project',
 40:               type: 'string',
 41:               description: 'Company name or personal project/community name',
 42:             },
 43:             {
 44:               name: 'role',
 45:               title: 'Role',
 46:               type: 'string',
 47:               description: 'Job title or role in the project/community',
 48:             },
 49:             {name: 'description', title: 'Description', type: 'text'},
 50:           ],
 51:         },
 52:       ],
 53:     },
 54:     {
 55:       name: 'education',
 56:       title: 'Education',
 57:       type: 'array',
 58:       of: [
 59:         {
 60:           type: 'object',
 61:           fields: [
 62:             {name: 'period', title: 'Period', type: 'string'},
 63:             {name: 'institution', title: 'Institution', type: 'string'},
 64:             {name: 'degree', title: 'Degree', type: 'string'},
 65:             {name: 'description', title: 'Description', type: 'text'},
 66:           ],
 67:         },
 68:       ],
 69:     },
 70:     {
 71:       name: 'volunteerWork',
 72:       title: 'Volunteer work',
 73:       type: 'array',
 74:       of: [
 75:         {
 76:           type: 'object',
 77:           fields: [
 78:             {name: 'period', title: 'Period', type: 'string'},
 79:             {
 80:               name: 'organization',
 81:               title: 'Organization',
 82:               type: 'string',
 83:               description: 'Name of the community or organization',
 84:             },
 85:             {
 86:               name: 'role',
 87:               title: 'Role',
 88:               type: 'string',
 89:               description: 'Your role in the community',
 90:             },
 91:             {
 92:               name: 'description',
 93:               title: 'Description',
 94:               type: 'text',
 95:               description: 'Describe your contributions and impact',
 96:             },
 97:           ],
 98:         },
 99:       ],
100:     },
101:   ],
102: }
```

## File: studio/schemaTypes/documents/navigation.ts
```typescript
 1: import {
 2:   RiNavigationLine,
 3:   RiHome4Line,
 4:   RiProjectorLine,
 5:   RiFileList3Line,
 6:   RiGithubLine,
 7:   RiMailLine,
 8: } from 'react-icons/ri'
 9: import {defineField, defineType} from 'sanity'
10: const iconMap = {
11:   RiHome4Line,
12:   RiProjectorLine,
13:   RiFileList3Line,
14:   RiGithubLine,
15:   RiMailLine,
16: }
17: export default defineType({
18:   name: 'navigation',
19:   title: 'Navigation',
20:   type: 'document',
21:   icon: RiNavigationLine,
22:   fields: [
23:     defineField({
24:       title: 'Title',
25:       name: 'title',
26:       type: 'string',
27:       validation: (Rule) => Rule.required(),
28:     }),
29:     defineField({
30:       name: 'links',
31:       title: 'Navigation Links',
32:       type: 'array',
33:       of: [
34:         {
35:           type: 'object',
36:           fields: [
37:             defineField({name: 'title', type: 'string', title: 'Title'}),
38:             defineField({name: 'name', type: 'string', title: 'Name'}),
39:             defineField({name: 'hash', type: 'string', title: 'Hash'}),
40:             defineField({name: 'href', type: 'string', title: 'Href'}),
41:             defineField({name: 'externalLink', type: 'boolean', title: 'External Link'}),
42:             defineField({
43:               name: 'icon',
44:               title: 'Icon',
45:               type: 'string',
46:               options: {
47:                 list: [
48:                   {title: 'Home', value: 'RiHome4Line'},
49:                   {title: 'Projects', value: 'RiProjectorLine'},
50:                   {title: 'CV', value: 'RiFileList3Line'},
51:                   {title: 'GitHub', value: 'RiGithubLine'},
52:                   {title: 'Contact', value: 'RiMailLine'},
53:                 ],
54:               },
55:             }),
56:           ],
57:           preview: {
58:             select: {
59:               title: 'title',
60:               icon: 'icon',
61:             },
62:             prepare(selection) {
63:               const {title, icon} = selection
64:               return {
65:                 title,
66:                 media:
67:                   icon && icon in iconMap
68:                     ? iconMap[icon as keyof typeof iconMap]
69:                     : RiNavigationLine,
70:               }
71:             },
72:           },
73:         },
74:       ],
75:     }),
76:   ],
77:   preview: {
78:     select: {
79:       title: 'title',
80:     },
81:     prepare(selection) {
82:       const {title} = selection
83:       return {
84:         title,
85:         media: RiNavigationLine,
86:       }
87:     },
88:   },
89: })
```

## File: studio/schemaTypes/documents/page.ts
```typescript
 1: import {RiPagesLine} from 'react-icons/ri'
 2: import {defineField, defineType, SchemaTypeDefinition} from 'sanity'
 3: const page: SchemaTypeDefinition = defineType({
 4:   title: 'Page',
 5:   name: 'page',
 6:   icon: RiPagesLine,
 7:   type: 'document',
 8:   fields: [
 9:     defineField({
10:       title: 'Name',
11:       name: 'title',
12:       type: 'string',
13:     }),
14:     defineField({
15:       title: 'Header',
16:       name: 'header',
17:       type: 'string',
18:     }),
19:     defineField({
20:       title: 'Hero content',
21:       description: 'Only supported in Hjem/Index page',
22:       name: 'hero',
23:       type: 'array',
24:       of: [{type: 'herocontent'}],
25:       hidden: ({document}) => document?.title !== 'Hjem',
26:       validation: (Rule) => Rule.max(3),
27:     }),
28:     defineField({
29:       title: 'Main content',
30:       description: 'Only supported in Hjem/Index page',
31:       name: 'content',
32:       type: 'array',
33:       of: [{type: 'pagecontent'}],
34:       hidden: ({document}) => document?.title !== 'Hjem',
35:     }),
36:   ],
37: })
38: export default page
```

## File: studio/schemaTypes/documents/project.ts
```typescript
 1: import {RiEraserLine} from 'react-icons/ri'
 2: import {defineField, defineType} from 'sanity'
 3: const project = defineType({
 4:   title: 'Project',
 5:   name: 'project',
 6:   icon: RiEraserLine,
 7:   type: 'document',
 8:   fields: [
 9:     defineField({
10:       title: 'Id',
11:       name: 'id',
12:       type: 'number',
13:     }),
14:     defineField({
15:       title: 'Name',
16:       name: 'name',
17:       type: 'string',
18:     }),
19:     defineField({
20:       title: 'Description',
21:       name: 'description',
22:       type: 'string',
23:     }),
24:     defineField({
25:       title: 'Technologies',
26:       name: 'subdescription',
27:       type: 'string',
28:     }),
29:     defineField({
30:       title: 'Project category',
31:       name: 'projectcategory',
32:       type: 'reference',
33:       to: [{type: 'category'}],
34:     }),
35:     defineField({
36:       title: 'Project URL',
37:       name: 'urlwww',
38:       type: 'array',
39:       of: [{type: 'link'}],
40:     }),
41:     defineField({
42:       title: 'Github URL',
43:       name: 'urlgithub',
44:       type: 'array',
45:       of: [{type: 'link'}],
46:     }),
47:     defineField({
48:       title: 'Project image',
49:       name: 'projectimage',
50:       type: 'image',
51:     }),
52:     defineField({
53:       title: 'Featured',
54:       name: 'featured',
55:       type: 'boolean',
56:       description: 'Set to true to feature this project at the top of the page',
57:     }),
58:     defineField({
59:       title: 'Feature Order',
60:       name: 'featureOrder',
61:       type: 'number',
62:       description: 'Order of the featured project (lower numbers appear first)',
63:       hidden: ({document}) => !document?.featured,
64:     }),
65:   ],
66: })
67: export default project
```

## File: studio/schemaTypes/objects/herocontent.ts
```typescript
 1: import {RiArticleLine} from 'react-icons/ri'
 2: import {defineField, defineType} from 'sanity'
 3: const herocontent = defineType({
 4:   // This is the display name for the type
 5:   title: 'Hero content',
 6:   // The identifier for this document type used in the api's
 7:   name: 'herocontent',
 8:   icon: RiArticleLine,
 9:   // Documents have the type 'document'. Your schema may describe types beyond documents
10:   // but let's get back to that later.
11:   type: 'object',
12:   // Now we proceed to list the fields of our document
13:   fields: [
14:     defineField({
15:       title: 'Text',
16:       name: 'text',
17:       type: 'string',
18:     }),
19:   ],
20: })
21: export default herocontent
```

## File: studio/schemaTypes/objects/link.ts
```typescript
 1: import {RiExternalLinkLine} from 'react-icons/ri'
 2: import {defineField, defineType, StringRule, BooleanRule} from 'sanity'
 3: const link = defineType({
 4:   name: 'link',
 5:   title: 'Link',
 6:   type: 'object',
 7:   icon: RiExternalLinkLine,
 8:   fields: [
 9:     defineField({
10:       name: 'title',
11:       title: 'Title',
12:       description: 'Title',
13:       type: 'string',
14:     }),
15:     defineField({
16:       name: 'url',
17:       title: 'Url',
18:       description: 'URL',
19:       type: 'string',
20:       validation: (Rule: StringRule) => Rule.required(),
21:     }),
22:     defineField({
23:       name: 'external',
24:       title: 'External',
25:       description: 'Is link external?',
26:       type: 'boolean',
27:       validation: (Rule: BooleanRule) => Rule.required(),
28:     }),
29:   ],
30:   initialValue: {
31:     external: false,
32:   },
33:   preview: {
34:     select: {
35:       title: 'title',
36:       url: 'url',
37:     },
38:     prepare({title, url}: {title?: string; url?: string}) {
39:       return {
40:         title: title ?? url,
41:       }
42:     },
43:   },
44: })
45: export default link
```

## File: studio/schemaTypes/objects/pagecontent.ts
```typescript
 1: import {RiArticleLine} from 'react-icons/ri'
 2: const pagecontent = {
 3:   // This is the display name for the type
 4:   title: 'Page content',
 5:   // The identifier for this document type used in the api's
 6:   name: 'pagecontent',
 7:   icon: RiArticleLine,
 8:   // Documents have the type 'document'. Your schema may describe types beyond documents
 9:   // but let's get back to that later.
10:   type: 'object',
11:   // Now we proceed to list the fields of our document
12:   fields: [
13:     {
14:       title: 'Id',
15:       name: 'id',
16:       type: 'number',
17:     },
18:     {
19:       title: 'Title',
20:       name: 'title',
21:       type: 'string',
22:     },
23:     {
24:       title: 'Text',
25:       name: 'text',
26:       type: 'array',
27:       of: [{type: 'block'}],
28:     },
29:   ],
30: }
31: export default pagecontent
```

## File: studio/schemaTypes/index.ts
```typescript
 1: //export const schemaTypes = []
 2: // Documents
 3: import project from './documents/project'
 4: import category from './documents/category'
 5: import page from './documents/page'
 6: import navigation from './documents/navigation'
 7: import cv from './documents/cv'
 8: // Objects
 9: import link from './objects/link'
10: import pagecontent from './objects/pagecontent'
11: import herocontent from './objects/herocontent'
12: export const schemaTypes = [project, category, page, cv, navigation, link, pagecontent, herocontent]
```

## File: studio/schemaTypes/schema.ts
```typescript
 1: // Documents
 2: import project from './documents/project'
 3: import category from './documents/category'
 4: import page from './documents/page'
 5: import navigation from './documents/navigation'
 6: import cv from './documents/cv'
 7: // Objects
 8: import link from './objects/link'
 9: import pagecontent from './objects/pagecontent'
10: import herocontent from './objects/herocontent'
11: export const types = [project, category, page, navigation, cv, link, pagecontent, herocontent]
```

## File: studio/static/.gitkeep
```
1: Files placed here will be served by the Sanity server under the `/static`-prefix
```

## File: studio/.eslintrc
```
1: {
2:   "extends": "@sanity/eslint-config-studio"
3: }
```

## File: studio/.gitignore
```
 1: # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 2: 
 3: # Dependencies
 4: /node_modules
 5: /.pnp
 6: .pnp.js
 7: 
 8: # Compiled Sanity Studio
 9: /dist
10: 
11: # Temporary Sanity runtime, generated by the CLI on every dev server start
12: /.sanity
13: 
14: # Logs
15: /logs
16: *.log
17: 
18: # Coverage directory used by testing tools
19: /coverage
20: 
21: # Misc
22: .DS_Store
23: *.pem
24: 
25: # Typescript
26: *.tsbuildinfo
27: 
28: # Dotenv and similar local-only files
29: *.local
```

## File: studio/package.json
```json
 1: {
 2:   "name": "dfweb-v4",
 3:   "private": true,
 4:   "version": "1.0.3",
 5:   "main": "package.json",
 6:   "scripts": {
 7:     "dev": "sanity dev",
 8:     "start": "sanity start",
 9:     "build": "sanity build",
10:     "deploy": "sanity deploy",
11:     "deploy-graphql": "sanity graphql deploy"
12:   },
13:   "keywords": [
14:     "sanity"
15:   ],
16:   "dependencies": {
17:     "react": "^19.0.0",
18:     "react-dom": "^19.0.0",
19:     "react-icons": "^5.4.0",
20:     "sanity": "^3.70.0",
21:     "styled-components": "^6.1.14"
22:   },
23:   "devDependencies": {
24:     "@sanity/eslint-config-studio": "^5.0.1",
25:     "@types/react": "^19.0.7",
26:     "eslint": "^9.18.0",
27:     "prettier": "^3.4.2",
28:     "typescript": "^5.7.3"
29:   },
30:   "prettier": {
31:     "semi": false,
32:     "printWidth": 100,
33:     "bracketSpacing": false,
34:     "singleQuote": true
35:   }
36: }
```

## File: studio/README.md
```markdown
1: # Sanity Clean Content Studio
2: 
3: Congratulations, you have now installed the Sanity Content Studio, an open source real-time content editing environment connected to the Sanity backend.
4: 
5: Now you can do the following things:
6: 
7: - [Read “getting started” in the docs](https://www.sanity.io/docs/introduction/getting-started?utm_source=readme)
8: - [Join the community Slack](https://slack.sanity.io/?utm_source=readme)
9: - [Extend and build plugins](https://www.sanity.io/docs/content-studio/extending?utm_source=readme)
```

## File: studio/sanity.cli.ts
```typescript
1: import {defineCliConfig} from 'sanity/cli'
2: export default defineCliConfig({
3:   api: {
4:     projectId: '41s7iutf',
5:     dataset: 'production',
6:   },
7: })
```

## File: studio/sanity.config.ts
```typescript
 1: import {defineConfig} from 'sanity'
 2: import {structureTool} from 'sanity/structure'
 3: import {schemaTypes} from './schemaTypes'
 4: export default defineConfig({
 5:   name: 'default',
 6:   title: 'dfweb-v4',
 7:   projectId: '41s7iutf',
 8:   dataset: 'production',
 9:   plugins: [structureTool()],
10:   schema: {
11:     types: schemaTypes,
12:   },
13: })
```

## File: studio/schema.json
```json
   1: [
   2:   {
   3:     "name": "sanity.imagePaletteSwatch",
   4:     "type": "type",
   5:     "value": {
   6:       "type": "object",
   7:       "attributes": {
   8:         "_type": {
   9:           "type": "objectAttribute",
  10:           "value": {
  11:             "type": "string",
  12:             "value": "sanity.imagePaletteSwatch"
  13:           }
  14:         },
  15:         "background": {
  16:           "type": "objectAttribute",
  17:           "value": {
  18:             "type": "string"
  19:           },
  20:           "optional": true
  21:         },
  22:         "foreground": {
  23:           "type": "objectAttribute",
  24:           "value": {
  25:             "type": "string"
  26:           },
  27:           "optional": true
  28:         },
  29:         "population": {
  30:           "type": "objectAttribute",
  31:           "value": {
  32:             "type": "number"
  33:           },
  34:           "optional": true
  35:         },
  36:         "title": {
  37:           "type": "objectAttribute",
  38:           "value": {
  39:             "type": "string"
  40:           },
  41:           "optional": true
  42:         }
  43:       }
  44:     }
  45:   },
  46:   {
  47:     "name": "sanity.imagePalette",
  48:     "type": "type",
  49:     "value": {
  50:       "type": "object",
  51:       "attributes": {
  52:         "_type": {
  53:           "type": "objectAttribute",
  54:           "value": {
  55:             "type": "string",
  56:             "value": "sanity.imagePalette"
  57:           }
  58:         },
  59:         "darkMuted": {
  60:           "type": "objectAttribute",
  61:           "value": {
  62:             "type": "inline",
  63:             "name": "sanity.imagePaletteSwatch"
  64:           },
  65:           "optional": true
  66:         },
  67:         "lightVibrant": {
  68:           "type": "objectAttribute",
  69:           "value": {
  70:             "type": "inline",
  71:             "name": "sanity.imagePaletteSwatch"
  72:           },
  73:           "optional": true
  74:         },
  75:         "darkVibrant": {
  76:           "type": "objectAttribute",
  77:           "value": {
  78:             "type": "inline",
  79:             "name": "sanity.imagePaletteSwatch"
  80:           },
  81:           "optional": true
  82:         },
  83:         "vibrant": {
  84:           "type": "objectAttribute",
  85:           "value": {
  86:             "type": "inline",
  87:             "name": "sanity.imagePaletteSwatch"
  88:           },
  89:           "optional": true
  90:         },
  91:         "dominant": {
  92:           "type": "objectAttribute",
  93:           "value": {
  94:             "type": "inline",
  95:             "name": "sanity.imagePaletteSwatch"
  96:           },
  97:           "optional": true
  98:         },
  99:         "lightMuted": {
 100:           "type": "objectAttribute",
 101:           "value": {
 102:             "type": "inline",
 103:             "name": "sanity.imagePaletteSwatch"
 104:           },
 105:           "optional": true
 106:         },
 107:         "muted": {
 108:           "type": "objectAttribute",
 109:           "value": {
 110:             "type": "inline",
 111:             "name": "sanity.imagePaletteSwatch"
 112:           },
 113:           "optional": true
 114:         }
 115:       }
 116:     }
 117:   },
 118:   {
 119:     "name": "sanity.imageDimensions",
 120:     "type": "type",
 121:     "value": {
 122:       "type": "object",
 123:       "attributes": {
 124:         "_type": {
 125:           "type": "objectAttribute",
 126:           "value": {
 127:             "type": "string",
 128:             "value": "sanity.imageDimensions"
 129:           }
 130:         },
 131:         "height": {
 132:           "type": "objectAttribute",
 133:           "value": {
 134:             "type": "number"
 135:           },
 136:           "optional": true
 137:         },
 138:         "width": {
 139:           "type": "objectAttribute",
 140:           "value": {
 141:             "type": "number"
 142:           },
 143:           "optional": true
 144:         },
 145:         "aspectRatio": {
 146:           "type": "objectAttribute",
 147:           "value": {
 148:             "type": "number"
 149:           },
 150:           "optional": true
 151:         }
 152:       }
 153:     }
 154:   },
 155:   {
 156:     "name": "sanity.fileAsset",
 157:     "type": "document",
 158:     "attributes": {
 159:       "_id": {
 160:         "type": "objectAttribute",
 161:         "value": {
 162:           "type": "string"
 163:         }
 164:       },
 165:       "_type": {
 166:         "type": "objectAttribute",
 167:         "value": {
 168:           "type": "string",
 169:           "value": "sanity.fileAsset"
 170:         }
 171:       },
 172:       "_createdAt": {
 173:         "type": "objectAttribute",
 174:         "value": {
 175:           "type": "string"
 176:         }
 177:       },
 178:       "_updatedAt": {
 179:         "type": "objectAttribute",
 180:         "value": {
 181:           "type": "string"
 182:         }
 183:       },
 184:       "_rev": {
 185:         "type": "objectAttribute",
 186:         "value": {
 187:           "type": "string"
 188:         }
 189:       },
 190:       "originalFilename": {
 191:         "type": "objectAttribute",
 192:         "value": {
 193:           "type": "string"
 194:         },
 195:         "optional": true
 196:       },
 197:       "label": {
 198:         "type": "objectAttribute",
 199:         "value": {
 200:           "type": "string"
 201:         },
 202:         "optional": true
 203:       },
 204:       "title": {
 205:         "type": "objectAttribute",
 206:         "value": {
 207:           "type": "string"
 208:         },
 209:         "optional": true
 210:       },
 211:       "description": {
 212:         "type": "objectAttribute",
 213:         "value": {
 214:           "type": "string"
 215:         },
 216:         "optional": true
 217:       },
 218:       "altText": {
 219:         "type": "objectAttribute",
 220:         "value": {
 221:           "type": "string"
 222:         },
 223:         "optional": true
 224:       },
 225:       "sha1hash": {
 226:         "type": "objectAttribute",
 227:         "value": {
 228:           "type": "string"
 229:         },
 230:         "optional": true
 231:       },
 232:       "extension": {
 233:         "type": "objectAttribute",
 234:         "value": {
 235:           "type": "string"
 236:         },
 237:         "optional": true
 238:       },
 239:       "mimeType": {
 240:         "type": "objectAttribute",
 241:         "value": {
 242:           "type": "string"
 243:         },
 244:         "optional": true
 245:       },
 246:       "size": {
 247:         "type": "objectAttribute",
 248:         "value": {
 249:           "type": "number"
 250:         },
 251:         "optional": true
 252:       },
 253:       "assetId": {
 254:         "type": "objectAttribute",
 255:         "value": {
 256:           "type": "string"
 257:         },
 258:         "optional": true
 259:       },
 260:       "uploadId": {
 261:         "type": "objectAttribute",
 262:         "value": {
 263:           "type": "string"
 264:         },
 265:         "optional": true
 266:       },
 267:       "path": {
 268:         "type": "objectAttribute",
 269:         "value": {
 270:           "type": "string"
 271:         },
 272:         "optional": true
 273:       },
 274:       "url": {
 275:         "type": "objectAttribute",
 276:         "value": {
 277:           "type": "string"
 278:         },
 279:         "optional": true
 280:       },
 281:       "source": {
 282:         "type": "objectAttribute",
 283:         "value": {
 284:           "type": "inline",
 285:           "name": "sanity.assetSourceData"
 286:         },
 287:         "optional": true
 288:       }
 289:     }
 290:   },
 291:   {
 292:     "name": "geopoint",
 293:     "type": "type",
 294:     "value": {
 295:       "type": "object",
 296:       "attributes": {
 297:         "_type": {
 298:           "type": "objectAttribute",
 299:           "value": {
 300:             "type": "string",
 301:             "value": "geopoint"
 302:           }
 303:         },
 304:         "lat": {
 305:           "type": "objectAttribute",
 306:           "value": {
 307:             "type": "number"
 308:           },
 309:           "optional": true
 310:         },
 311:         "lng": {
 312:           "type": "objectAttribute",
 313:           "value": {
 314:             "type": "number"
 315:           },
 316:           "optional": true
 317:         },
 318:         "alt": {
 319:           "type": "objectAttribute",
 320:           "value": {
 321:             "type": "number"
 322:           },
 323:           "optional": true
 324:         }
 325:       }
 326:     }
 327:   },
 328:   {
 329:     "name": "herocontent",
 330:     "type": "type",
 331:     "value": {
 332:       "type": "object",
 333:       "attributes": {
 334:         "_type": {
 335:           "type": "objectAttribute",
 336:           "value": {
 337:             "type": "string",
 338:             "value": "herocontent"
 339:           }
 340:         },
 341:         "text": {
 342:           "type": "objectAttribute",
 343:           "value": {
 344:             "type": "string"
 345:           },
 346:           "optional": true
 347:         }
 348:       }
 349:     }
 350:   },
 351:   {
 352:     "name": "pagecontent",
 353:     "type": "type",
 354:     "value": {
 355:       "type": "object",
 356:       "attributes": {
 357:         "_type": {
 358:           "type": "objectAttribute",
 359:           "value": {
 360:             "type": "string",
 361:             "value": "pagecontent"
 362:           }
 363:         },
 364:         "id": {
 365:           "type": "objectAttribute",
 366:           "value": {
 367:             "type": "number"
 368:           },
 369:           "optional": true
 370:         },
 371:         "title": {
 372:           "type": "objectAttribute",
 373:           "value": {
 374:             "type": "string"
 375:           },
 376:           "optional": true
 377:         },
 378:         "text": {
 379:           "type": "objectAttribute",
 380:           "value": {
 381:             "type": "array",
 382:             "of": {
 383:               "type": "object",
 384:               "attributes": {
 385:                 "children": {
 386:                   "type": "objectAttribute",
 387:                   "value": {
 388:                     "type": "array",
 389:                     "of": {
 390:                       "type": "object",
 391:                       "attributes": {
 392:                         "marks": {
 393:                           "type": "objectAttribute",
 394:                           "value": {
 395:                             "type": "array",
 396:                             "of": {
 397:                               "type": "string"
 398:                             }
 399:                           },
 400:                           "optional": true
 401:                         },
 402:                         "text": {
 403:                           "type": "objectAttribute",
 404:                           "value": {
 405:                             "type": "string"
 406:                           },
 407:                           "optional": true
 408:                         },
 409:                         "_type": {
 410:                           "type": "objectAttribute",
 411:                           "value": {
 412:                             "type": "string",
 413:                             "value": "span"
 414:                           }
 415:                         }
 416:                       },
 417:                       "rest": {
 418:                         "type": "object",
 419:                         "attributes": {
 420:                           "_key": {
 421:                             "type": "objectAttribute",
 422:                             "value": {
 423:                               "type": "string"
 424:                             }
 425:                           }
 426:                         }
 427:                       }
 428:                     }
 429:                   },
 430:                   "optional": true
 431:                 },
 432:                 "style": {
 433:                   "type": "objectAttribute",
 434:                   "value": {
 435:                     "type": "union",
 436:                     "of": [
 437:                       {
 438:                         "type": "string",
 439:                         "value": "normal"
 440:                       },
 441:                       {
 442:                         "type": "string",
 443:                         "value": "h1"
 444:                       },
 445:                       {
 446:                         "type": "string",
 447:                         "value": "h2"
 448:                       },
 449:                       {
 450:                         "type": "string",
 451:                         "value": "h3"
 452:                       },
 453:                       {
 454:                         "type": "string",
 455:                         "value": "h4"
 456:                       },
 457:                       {
 458:                         "type": "string",
 459:                         "value": "h5"
 460:                       },
 461:                       {
 462:                         "type": "string",
 463:                         "value": "h6"
 464:                       },
 465:                       {
 466:                         "type": "string",
 467:                         "value": "blockquote"
 468:                       }
 469:                     ]
 470:                   },
 471:                   "optional": true
 472:                 },
 473:                 "listItem": {
 474:                   "type": "objectAttribute",
 475:                   "value": {
 476:                     "type": "union",
 477:                     "of": [
 478:                       {
 479:                         "type": "string",
 480:                         "value": "bullet"
 481:                       },
 482:                       {
 483:                         "type": "string",
 484:                         "value": "number"
 485:                       }
 486:                     ]
 487:                   },
 488:                   "optional": true
 489:                 },
 490:                 "markDefs": {
 491:                   "type": "objectAttribute",
 492:                   "value": {
 493:                     "type": "array",
 494:                     "of": {
 495:                       "type": "object",
 496:                       "attributes": {
 497:                         "href": {
 498:                           "type": "objectAttribute",
 499:                           "value": {
 500:                             "type": "string"
 501:                           },
 502:                           "optional": true
 503:                         },
 504:                         "_type": {
 505:                           "type": "objectAttribute",
 506:                           "value": {
 507:                             "type": "string",
 508:                             "value": "link"
 509:                           }
 510:                         }
 511:                       },
 512:                       "rest": {
 513:                         "type": "object",
 514:                         "attributes": {
 515:                           "_key": {
 516:                             "type": "objectAttribute",
 517:                             "value": {
 518:                               "type": "string"
 519:                             }
 520:                           }
 521:                         }
 522:                       }
 523:                     }
 524:                   },
 525:                   "optional": true
 526:                 },
 527:                 "level": {
 528:                   "type": "objectAttribute",
 529:                   "value": {
 530:                     "type": "number"
 531:                   },
 532:                   "optional": true
 533:                 },
 534:                 "_type": {
 535:                   "type": "objectAttribute",
 536:                   "value": {
 537:                     "type": "string",
 538:                     "value": "block"
 539:                   }
 540:                 }
 541:               },
 542:               "rest": {
 543:                 "type": "object",
 544:                 "attributes": {
 545:                   "_key": {
 546:                     "type": "objectAttribute",
 547:                     "value": {
 548:                       "type": "string"
 549:                     }
 550:                   }
 551:                 }
 552:               }
 553:             }
 554:           },
 555:           "optional": true
 556:         }
 557:       }
 558:     }
 559:   },
 560:   {
 561:     "name": "link",
 562:     "type": "type",
 563:     "value": {
 564:       "type": "object",
 565:       "attributes": {
 566:         "_type": {
 567:           "type": "objectAttribute",
 568:           "value": {
 569:             "type": "string",
 570:             "value": "link"
 571:           }
 572:         },
 573:         "title": {
 574:           "type": "objectAttribute",
 575:           "value": {
 576:             "type": "string"
 577:           },
 578:           "optional": true
 579:         },
 580:         "url": {
 581:           "type": "objectAttribute",
 582:           "value": {
 583:             "type": "string"
 584:           },
 585:           "optional": true
 586:         },
 587:         "external": {
 588:           "type": "objectAttribute",
 589:           "value": {
 590:             "type": "boolean"
 591:           },
 592:           "optional": true
 593:         }
 594:       }
 595:     }
 596:   },
 597:   {
 598:     "name": "Navigation",
 599:     "type": "document",
 600:     "attributes": {
 601:       "_id": {
 602:         "type": "objectAttribute",
 603:         "value": {
 604:           "type": "string"
 605:         }
 606:       },
 607:       "_type": {
 608:         "type": "objectAttribute",
 609:         "value": {
 610:           "type": "string",
 611:           "value": "Navigation"
 612:         }
 613:       },
 614:       "_createdAt": {
 615:         "type": "objectAttribute",
 616:         "value": {
 617:           "type": "string"
 618:         }
 619:       },
 620:       "_updatedAt": {
 621:         "type": "objectAttribute",
 622:         "value": {
 623:           "type": "string"
 624:         }
 625:       },
 626:       "_rev": {
 627:         "type": "objectAttribute",
 628:         "value": {
 629:           "type": "string"
 630:         }
 631:       },
 632:       "title": {
 633:         "type": "objectAttribute",
 634:         "value": {
 635:           "type": "string"
 636:         },
 637:         "optional": true
 638:       },
 639:       "slug": {
 640:         "type": "objectAttribute",
 641:         "value": {
 642:           "type": "inline",
 643:           "name": "slug"
 644:         },
 645:         "optional": true
 646:       },
 647:       "navigation": {
 648:         "type": "objectAttribute",
 649:         "value": {
 650:           "type": "array",
 651:           "of": {
 652:             "type": "object",
 653:             "attributes": {
 654:               "_key": {
 655:                 "type": "objectAttribute",
 656:                 "value": {
 657:                   "type": "string"
 658:                 }
 659:               }
 660:             },
 661:             "rest": {
 662:               "type": "inline",
 663:               "name": "link"
 664:             }
 665:           }
 666:         },
 667:         "optional": true
 668:       }
 669:     }
 670:   },
 671:   {
 672:     "name": "slug",
 673:     "type": "type",
 674:     "value": {
 675:       "type": "object",
 676:       "attributes": {
 677:         "_type": {
 678:           "type": "objectAttribute",
 679:           "value": {
 680:             "type": "string",
 681:             "value": "slug"
 682:           }
 683:         },
 684:         "current": {
 685:           "type": "objectAttribute",
 686:           "value": {
 687:             "type": "string"
 688:           },
 689:           "optional": true
 690:         },
 691:         "source": {
 692:           "type": "objectAttribute",
 693:           "value": {
 694:             "type": "string"
 695:           },
 696:           "optional": true
 697:         }
 698:       }
 699:     }
 700:   },
 701:   {
 702:     "name": "page",
 703:     "type": "document",
 704:     "attributes": {
 705:       "_id": {
 706:         "type": "objectAttribute",
 707:         "value": {
 708:           "type": "string"
 709:         }
 710:       },
 711:       "_type": {
 712:         "type": "objectAttribute",
 713:         "value": {
 714:           "type": "string",
 715:           "value": "page"
 716:         }
 717:       },
 718:       "_createdAt": {
 719:         "type": "objectAttribute",
 720:         "value": {
 721:           "type": "string"
 722:         }
 723:       },
 724:       "_updatedAt": {
 725:         "type": "objectAttribute",
 726:         "value": {
 727:           "type": "string"
 728:         }
 729:       },
 730:       "_rev": {
 731:         "type": "objectAttribute",
 732:         "value": {
 733:           "type": "string"
 734:         }
 735:       },
 736:       "title": {
 737:         "type": "objectAttribute",
 738:         "value": {
 739:           "type": "string"
 740:         },
 741:         "optional": true
 742:       },
 743:       "header": {
 744:         "type": "objectAttribute",
 745:         "value": {
 746:           "type": "string"
 747:         },
 748:         "optional": true
 749:       },
 750:       "hero": {
 751:         "type": "objectAttribute",
 752:         "value": {
 753:           "type": "array",
 754:           "of": {
 755:             "type": "object",
 756:             "attributes": {
 757:               "_key": {
 758:                 "type": "objectAttribute",
 759:                 "value": {
 760:                   "type": "string"
 761:                 }
 762:               }
 763:             },
 764:             "rest": {
 765:               "type": "inline",
 766:               "name": "herocontent"
 767:             }
 768:           }
 769:         },
 770:         "optional": true
 771:       },
 772:       "content": {
 773:         "type": "objectAttribute",
 774:         "value": {
 775:           "type": "array",
 776:           "of": {
 777:             "type": "object",
 778:             "attributes": {
 779:               "_key": {
 780:                 "type": "objectAttribute",
 781:                 "value": {
 782:                   "type": "string"
 783:                 }
 784:               }
 785:             },
 786:             "rest": {
 787:               "type": "inline",
 788:               "name": "pagecontent"
 789:             }
 790:           }
 791:         },
 792:         "optional": true
 793:       }
 794:     }
 795:   },
 796:   {
 797:     "name": "project",
 798:     "type": "document",
 799:     "attributes": {
 800:       "_id": {
 801:         "type": "objectAttribute",
 802:         "value": {
 803:           "type": "string"
 804:         }
 805:       },
 806:       "_type": {
 807:         "type": "objectAttribute",
 808:         "value": {
 809:           "type": "string",
 810:           "value": "project"
 811:         }
 812:       },
 813:       "_createdAt": {
 814:         "type": "objectAttribute",
 815:         "value": {
 816:           "type": "string"
 817:         }
 818:       },
 819:       "_updatedAt": {
 820:         "type": "objectAttribute",
 821:         "value": {
 822:           "type": "string"
 823:         }
 824:       },
 825:       "_rev": {
 826:         "type": "objectAttribute",
 827:         "value": {
 828:           "type": "string"
 829:         }
 830:       },
 831:       "id": {
 832:         "type": "objectAttribute",
 833:         "value": {
 834:           "type": "number"
 835:         },
 836:         "optional": true
 837:       },
 838:       "name": {
 839:         "type": "objectAttribute",
 840:         "value": {
 841:           "type": "string"
 842:         },
 843:         "optional": true
 844:       },
 845:       "description": {
 846:         "type": "objectAttribute",
 847:         "value": {
 848:           "type": "string"
 849:         },
 850:         "optional": true
 851:       },
 852:       "subdescription": {
 853:         "type": "objectAttribute",
 854:         "value": {
 855:           "type": "string"
 856:         },
 857:         "optional": true
 858:       },
 859:       "projectcategory": {
 860:         "type": "objectAttribute",
 861:         "value": {
 862:           "type": "object",
 863:           "attributes": {
 864:             "_ref": {
 865:               "type": "objectAttribute",
 866:               "value": {
 867:                 "type": "string"
 868:               }
 869:             },
 870:             "_type": {
 871:               "type": "objectAttribute",
 872:               "value": {
 873:                 "type": "string",
 874:                 "value": "reference"
 875:               }
 876:             },
 877:             "_weak": {
 878:               "type": "objectAttribute",
 879:               "value": {
 880:                 "type": "boolean"
 881:               },
 882:               "optional": true
 883:             }
 884:           },
 885:           "dereferencesTo": "category"
 886:         },
 887:         "optional": true
 888:       },
 889:       "urlwww": {
 890:         "type": "objectAttribute",
 891:         "value": {
 892:           "type": "array",
 893:           "of": {
 894:             "type": "object",
 895:             "attributes": {
 896:               "_key": {
 897:                 "type": "objectAttribute",
 898:                 "value": {
 899:                   "type": "string"
 900:                 }
 901:               }
 902:             },
 903:             "rest": {
 904:               "type": "inline",
 905:               "name": "link"
 906:             }
 907:           }
 908:         },
 909:         "optional": true
 910:       },
 911:       "urlgithub": {
 912:         "type": "objectAttribute",
 913:         "value": {
 914:           "type": "array",
 915:           "of": {
 916:             "type": "object",
 917:             "attributes": {
 918:               "_key": {
 919:                 "type": "objectAttribute",
 920:                 "value": {
 921:                   "type": "string"
 922:                 }
 923:               }
 924:             },
 925:             "rest": {
 926:               "type": "inline",
 927:               "name": "link"
 928:             }
 929:           }
 930:         },
 931:         "optional": true
 932:       },
 933:       "projectimage": {
 934:         "type": "objectAttribute",
 935:         "value": {
 936:           "type": "object",
 937:           "attributes": {
 938:             "asset": {
 939:               "type": "objectAttribute",
 940:               "value": {
 941:                 "type": "object",
 942:                 "attributes": {
 943:                   "_ref": {
 944:                     "type": "objectAttribute",
 945:                     "value": {
 946:                       "type": "string"
 947:                     }
 948:                   },
 949:                   "_type": {
 950:                     "type": "objectAttribute",
 951:                     "value": {
 952:                       "type": "string",
 953:                       "value": "reference"
 954:                     }
 955:                   },
 956:                   "_weak": {
 957:                     "type": "objectAttribute",
 958:                     "value": {
 959:                       "type": "boolean"
 960:                     },
 961:                     "optional": true
 962:                   }
 963:                 },
 964:                 "dereferencesTo": "sanity.imageAsset"
 965:               },
 966:               "optional": true
 967:             },
 968:             "hotspot": {
 969:               "type": "objectAttribute",
 970:               "value": {
 971:                 "type": "inline",
 972:                 "name": "sanity.imageHotspot"
 973:               },
 974:               "optional": true
 975:             },
 976:             "crop": {
 977:               "type": "objectAttribute",
 978:               "value": {
 979:                 "type": "inline",
 980:                 "name": "sanity.imageCrop"
 981:               },
 982:               "optional": true
 983:             },
 984:             "_type": {
 985:               "type": "objectAttribute",
 986:               "value": {
 987:                 "type": "string",
 988:                 "value": "image"
 989:               }
 990:             }
 991:           }
 992:         },
 993:         "optional": true
 994:       },
 995:       "featured": {
 996:         "type": "objectAttribute",
 997:         "value": {
 998:           "type": "boolean"
 999:         },
1000:         "optional": true
1001:       },
1002:       "featureOrder": {
1003:         "type": "objectAttribute",
1004:         "value": {
1005:           "type": "number"
1006:         },
1007:         "optional": true
1008:       }
1009:     }
1010:   },
1011:   {
1012:     "name": "sanity.imageCrop",
1013:     "type": "type",
1014:     "value": {
1015:       "type": "object",
1016:       "attributes": {
1017:         "_type": {
1018:           "type": "objectAttribute",
1019:           "value": {
1020:             "type": "string",
1021:             "value": "sanity.imageCrop"
1022:           }
1023:         },
1024:         "top": {
1025:           "type": "objectAttribute",
1026:           "value": {
1027:             "type": "number"
1028:           },
1029:           "optional": true
1030:         },
1031:         "bottom": {
1032:           "type": "objectAttribute",
1033:           "value": {
1034:             "type": "number"
1035:           },
1036:           "optional": true
1037:         },
1038:         "left": {
1039:           "type": "objectAttribute",
1040:           "value": {
1041:             "type": "number"
1042:           },
1043:           "optional": true
1044:         },
1045:         "right": {
1046:           "type": "objectAttribute",
1047:           "value": {
1048:             "type": "number"
1049:           },
1050:           "optional": true
1051:         }
1052:       }
1053:     }
1054:   },
1055:   {
1056:     "name": "sanity.imageHotspot",
1057:     "type": "type",
1058:     "value": {
1059:       "type": "object",
1060:       "attributes": {
1061:         "_type": {
1062:           "type": "objectAttribute",
1063:           "value": {
1064:             "type": "string",
1065:             "value": "sanity.imageHotspot"
1066:           }
1067:         },
1068:         "x": {
1069:           "type": "objectAttribute",
1070:           "value": {
1071:             "type": "number"
1072:           },
1073:           "optional": true
1074:         },
1075:         "y": {
1076:           "type": "objectAttribute",
1077:           "value": {
1078:             "type": "number"
1079:           },
1080:           "optional": true
1081:         },
1082:         "height": {
1083:           "type": "objectAttribute",
1084:           "value": {
1085:             "type": "number"
1086:           },
1087:           "optional": true
1088:         },
1089:         "width": {
1090:           "type": "objectAttribute",
1091:           "value": {
1092:             "type": "number"
1093:           },
1094:           "optional": true
1095:         }
1096:       }
1097:     }
1098:   },
1099:   {
1100:     "name": "sanity.imageAsset",
1101:     "type": "document",
1102:     "attributes": {
1103:       "_id": {
1104:         "type": "objectAttribute",
1105:         "value": {
1106:           "type": "string"
1107:         }
1108:       },
1109:       "_type": {
1110:         "type": "objectAttribute",
1111:         "value": {
1112:           "type": "string",
1113:           "value": "sanity.imageAsset"
1114:         }
1115:       },
1116:       "_createdAt": {
1117:         "type": "objectAttribute",
1118:         "value": {
1119:           "type": "string"
1120:         }
1121:       },
1122:       "_updatedAt": {
1123:         "type": "objectAttribute",
1124:         "value": {
1125:           "type": "string"
1126:         }
1127:       },
1128:       "_rev": {
1129:         "type": "objectAttribute",
1130:         "value": {
1131:           "type": "string"
1132:         }
1133:       },
1134:       "originalFilename": {
1135:         "type": "objectAttribute",
1136:         "value": {
1137:           "type": "string"
1138:         },
1139:         "optional": true
1140:       },
1141:       "label": {
1142:         "type": "objectAttribute",
1143:         "value": {
1144:           "type": "string"
1145:         },
1146:         "optional": true
1147:       },
1148:       "title": {
1149:         "type": "objectAttribute",
1150:         "value": {
1151:           "type": "string"
1152:         },
1153:         "optional": true
1154:       },
1155:       "description": {
1156:         "type": "objectAttribute",
1157:         "value": {
1158:           "type": "string"
1159:         },
1160:         "optional": true
1161:       },
1162:       "altText": {
1163:         "type": "objectAttribute",
1164:         "value": {
1165:           "type": "string"
1166:         },
1167:         "optional": true
1168:       },
1169:       "sha1hash": {
1170:         "type": "objectAttribute",
1171:         "value": {
1172:           "type": "string"
1173:         },
1174:         "optional": true
1175:       },
1176:       "extension": {
1177:         "type": "objectAttribute",
1178:         "value": {
1179:           "type": "string"
1180:         },
1181:         "optional": true
1182:       },
1183:       "mimeType": {
1184:         "type": "objectAttribute",
1185:         "value": {
1186:           "type": "string"
1187:         },
1188:         "optional": true
1189:       },
1190:       "size": {
1191:         "type": "objectAttribute",
1192:         "value": {
1193:           "type": "number"
1194:         },
1195:         "optional": true
1196:       },
1197:       "assetId": {
1198:         "type": "objectAttribute",
1199:         "value": {
1200:           "type": "string"
1201:         },
1202:         "optional": true
1203:       },
1204:       "uploadId": {
1205:         "type": "objectAttribute",
1206:         "value": {
1207:           "type": "string"
1208:         },
1209:         "optional": true
1210:       },
1211:       "path": {
1212:         "type": "objectAttribute",
1213:         "value": {
1214:           "type": "string"
1215:         },
1216:         "optional": true
1217:       },
1218:       "url": {
1219:         "type": "objectAttribute",
1220:         "value": {
1221:           "type": "string"
1222:         },
1223:         "optional": true
1224:       },
1225:       "metadata": {
1226:         "type": "objectAttribute",
1227:         "value": {
1228:           "type": "inline",
1229:           "name": "sanity.imageMetadata"
1230:         },
1231:         "optional": true
1232:       },
1233:       "source": {
1234:         "type": "objectAttribute",
1235:         "value": {
1236:           "type": "inline",
1237:           "name": "sanity.assetSourceData"
1238:         },
1239:         "optional": true
1240:       }
1241:     }
1242:   },
1243:   {
1244:     "name": "sanity.assetSourceData",
1245:     "type": "type",
1246:     "value": {
1247:       "type": "object",
1248:       "attributes": {
1249:         "_type": {
1250:           "type": "objectAttribute",
1251:           "value": {
1252:             "type": "string",
1253:             "value": "sanity.assetSourceData"
1254:           }
1255:         },
1256:         "name": {
1257:           "type": "objectAttribute",
1258:           "value": {
1259:             "type": "string"
1260:           },
1261:           "optional": true
1262:         },
1263:         "id": {
1264:           "type": "objectAttribute",
1265:           "value": {
1266:             "type": "string"
1267:           },
1268:           "optional": true
1269:         },
1270:         "url": {
1271:           "type": "objectAttribute",
1272:           "value": {
1273:             "type": "string"
1274:           },
1275:           "optional": true
1276:         }
1277:       }
1278:     }
1279:   },
1280:   {
1281:     "name": "sanity.imageMetadata",
1282:     "type": "type",
1283:     "value": {
1284:       "type": "object",
1285:       "attributes": {
1286:         "_type": {
1287:           "type": "objectAttribute",
1288:           "value": {
1289:             "type": "string",
1290:             "value": "sanity.imageMetadata"
1291:           }
1292:         },
1293:         "location": {
1294:           "type": "objectAttribute",
1295:           "value": {
1296:             "type": "inline",
1297:             "name": "geopoint"
1298:           },
1299:           "optional": true
1300:         },
1301:         "dimensions": {
1302:           "type": "objectAttribute",
1303:           "value": {
1304:             "type": "inline",
1305:             "name": "sanity.imageDimensions"
1306:           },
1307:           "optional": true
1308:         },
1309:         "palette": {
1310:           "type": "objectAttribute",
1311:           "value": {
1312:             "type": "inline",
1313:             "name": "sanity.imagePalette"
1314:           },
1315:           "optional": true
1316:         },
1317:         "lqip": {
1318:           "type": "objectAttribute",
1319:           "value": {
1320:             "type": "string"
1321:           },
1322:           "optional": true
1323:         },
1324:         "blurHash": {
1325:           "type": "objectAttribute",
1326:           "value": {
1327:             "type": "string"
1328:           },
1329:           "optional": true
1330:         },
1331:         "hasAlpha": {
1332:           "type": "objectAttribute",
1333:           "value": {
1334:             "type": "boolean"
1335:           },
1336:           "optional": true
1337:         },
1338:         "isOpaque": {
1339:           "type": "objectAttribute",
1340:           "value": {
1341:             "type": "boolean"
1342:           },
1343:           "optional": true
1344:         }
1345:       }
1346:     }
1347:   },
1348:   {
1349:     "name": "category",
1350:     "type": "document",
1351:     "attributes": {
1352:       "_id": {
1353:         "type": "objectAttribute",
1354:         "value": {
1355:           "type": "string"
1356:         }
1357:       },
1358:       "_type": {
1359:         "type": "objectAttribute",
1360:         "value": {
1361:           "type": "string",
1362:           "value": "category"
1363:         }
1364:       },
1365:       "_createdAt": {
1366:         "type": "objectAttribute",
1367:         "value": {
1368:           "type": "string"
1369:         }
1370:       },
1371:       "_updatedAt": {
1372:         "type": "objectAttribute",
1373:         "value": {
1374:           "type": "string"
1375:         }
1376:       },
1377:       "_rev": {
1378:         "type": "objectAttribute",
1379:         "value": {
1380:           "type": "string"
1381:         }
1382:       },
1383:       "id": {
1384:         "type": "objectAttribute",
1385:         "value": {
1386:           "type": "number"
1387:         },
1388:         "optional": true
1389:       },
1390:       "name": {
1391:         "type": "objectAttribute",
1392:         "value": {
1393:           "type": "string"
1394:         },
1395:         "optional": true
1396:       }
1397:     }
1398:   }
1399: ]
```

## File: studio/schema.ts
```typescript
 1: // Documents
 2: import project from './schemaTypes/documents/project'
 3: import category from './schemaTypes/documents/category'
 4: import page from './schemaTypes/documents/page'
 5: import navigation from './schemaTypes/documents/navigation'
 6: // Objects
 7: import link from './schemaTypes/objects/link'
 8: import pagecontent from './schemaTypes/objects/pagecontent'
 9: import herocontent from './schemaTypes/objects/herocontent'
10: export const types = [project, category, page, navigation, link, pagecontent, herocontent]
```

## File: studio/tsconfig.json
```json
 1: {
 2:   "compilerOptions": {
 3:     "target": "es2017",
 4:     "lib": ["dom", "dom.iterable", "esnext"],
 5:     "allowJs": true,
 6:     "skipLibCheck": true,
 7:     "strict": true,
 8:     "forceConsistentCasingInFileNames": true,
 9:     "noEmit": true,
10:     "esModuleInterop": true,
11:     "module": "esnext",
12:     "moduleResolution": "node",
13:     "resolveJsonModule": true,
14:     "isolatedModules": true,
15:     "jsx": "preserve",
16:     "incremental": true
17:   },
18:   "include": ["**/*.ts", "**/*.tsx"],
19:   "exclude": ["node_modules"]
20: }
```

## File: .eslintrc-custom-rules.ts
```typescript
 1: export interface RuleMeta {
 2:   type: string;
 3:   docs: {
 4:     description: string;
 5:     category: string;
 6:     recommended: boolean;
 7:   };
 8: }
 9: export interface Rule {
10:   meta: RuleMeta;
11:   create: (context: any) => any;
12: }
13: export interface ESLintCustomRules {
14:   meta: {
15:     name: string;
16:     version: string;
17:   };
18:   rules: {
19:     [key: string]: Rule;
20:   };
21: }
22: const eslintCustomRules: ESLintCustomRules = {
23:   meta: {
24:     name: "custom-test-rules",
25:     version: "1.0.0",
26:   },
27:   rules: {
28:     "arrange-act-assert": {
29:       meta: {
30:         type: "suggestion",
31:         docs: {
32:           description: "enforce AAA pattern in tests",
33:           category: "Best Practices",
34:           recommended: true,
35:         },
36:       },
37:       create(context) {
38:         return {
39:           CallExpression(node) {
40:             if (node.callee.name === "it" || node.callee.name === "test") {
41:               const testFn = node.arguments[1];
42:               if (testFn && testFn.type === "ArrowFunctionExpression") {
43:                 const comments = context
44:                   .getSourceCode()
45:                   .getCommentsBefore(testFn.body);
46:                 const hasAAA = comments.some(
47:                   (comment) =>
48:                     comment.value.includes("Arrange") ||
49:                     comment.value.includes("Act") ||
50:                     comment.value.includes("Assert"),
51:                 );
52:                 if (!hasAAA) {
53:                   context.report({
54:                     node,
55:                     message: "Test should follow AAA pattern with comments",
56:                   });
57:                 }
58:               }
59:             }
60:           },
61:         };
62:       },
63:     },
64:   },
65: };
66: export default eslintCustomRules;
```

## File: .eslintrc.json
```json
 1: {
 2:   "extends": [
 3:     "next/core-web-vitals",
 4:     "eslint:recommended",
 5:     "plugin:@typescript-eslint/recommended",
 6:     "plugin:react/recommended",
 7:     "plugin:react-hooks/recommended",
 8:     "plugin:jsx-a11y/recommended",
 9:     "plugin:jest/recommended",
10:     "plugin:testing-library/react",
11:     "plugin:test-rules/recommended"
12:   ],
13:   "plugins": [
14:     "@typescript-eslint",
15:     "react",
16:     "jsx-a11y",
17:     "jest",
18:     "testing-library",
19:     "test-rules"
20:   ],
21:   "overrides": [
22:     {
23:       "files": ["**/*.test.ts", "**/*.test.tsx"],
24:       "rules": {
25:         "@typescript-eslint/no-explicit-any": "error"
26:       }
27:     }
28:   ],
29:   "parser": "@typescript-eslint/parser",
30:   "rules": {
31:     "jest/expect-expect": "error",
32:     "jest/no-disabled-tests": "warn",
33:     "jest/no-focused-tests": "error",
34:     "jest/no-identical-title": "error",
35:     "jest/valid-expect": "error",
36:     "testing-library/await-async-queries": "error",
37:     "testing-library/no-await-sync-queries": "error",
38:     "testing-library/no-container": "error",
39:     "testing-library/no-debugging-utils": "warn",
40:     "testing-library/prefer-screen-queries": "error",
41:     "react/react-in-jsx-scope": "off",
42:     "react/prop-types": "off",
43:     "@typescript-eslint/explicit-module-boundary-types": "off",
44:     "@typescript-eslint/no-unused-vars": [
45:       "error",
46:       { "argsIgnorePattern": "^_" }
47:     ],
48:     "@typescript-eslint/no-explicit-any": "error",
49:     "no-console": ["warn", { "allow": ["warn", "error"] }],
50:     "prefer-const": "error",
51:     "jsx-a11y/anchor-is-valid": [
52:       "error",
53:       {
54:         "components": ["Link"],
55:         "specialLink": ["hrefLeft", "hrefRight"],
56:         "aspects": ["invalidHref", "preferButton"]
57:       }
58:     ],
59:     "react-hooks/rules-of-hooks": "error",
60:     "react-hooks/exhaustive-deps": "warn",
61:     "jsx-a11y/label-has-associated-control": [
62:       "error",
63:       {
64:         "labelComponents": [],
65:         "labelAttributes": [],
66:         "controlComponents": [],
67:         "assert": "either",
68:         "depth": 25
69:       }
70:     ]
71:   },
72:   "settings": {
73:     "react": {
74:       "version": "detect"
75:     }
76:   },
77:   "ignorePatterns": ["node_modules/", "build/", ".next/", "coverage/"]
78: }
```

## File: .gitattributes
```
1: # Auto detect text files and perform LF normalization
2: * text=auto
3: 
4: # Treat PDFs as binary files
5: *.pdf binary
```

## File: .gitignore
```
 1: # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 2: 
 3: # dependencies
 4: /node_modules
 5: /.pnp
 6: .pnp.js
 7: 
 8: # testing
 9: /coverage
10: 
11: # next.js
12: /.next/
13: /out/
14: 
15: # production
16: /build
17: 
18: # misc
19: .DS_Store
20: *.pem
21: 
22: # debug
23: npm-debug.log*
24: yarn-debug.log*
25: yarn-error.log*
26: 
27: # local env files
28: .env.local
29: .env.development.local
30: .env.test.local
31: .env.production.local
32: 
33: # general .env file
34: .env
35: 
36: # vercel
37: .vercel
38: 
39: # typescript
40: *.tsbuildinfo
41: 
42: #storybook build
43: storybook-static
44: build-storybook.log
45: 
46: #sanity
47: sanity.json
48: 
49: #cypress
50: *.mp4
51: /cypress/videos
52: /cypress/screenshots
53: 
54: #next.js
55: next-env.d.ts
56: /test-results/
57: /playwright-report/
58: /playwright/.cache/
59: screenshot.png
60: node_modules/
61: /blob-report/
62: 
63: # lighthouse
64: /.lighthouseci
65: /.stryker-tmp
66: /stryker-tmp
67: DOCS/git_history.txt
```

## File: codecov.yml
```yaml
1: coverage:
2:   status:
3:     project:
4:       default:
5:         target: 90.0
6:         threshold: 20.0
```

## File: cypress.config.ts
```typescript
 1: import { defineConfig } from "cypress";
 2: export default defineConfig({
 3:   viewportWidth: 1920,
 4:   viewportHeight: 1080,
 5:   e2e: {
 6:     supportFile: "src/e2e/cypress/support/e2e.ts",
 7:     specPattern: "src/e2e/cypress/e2e/**/*.cy.{js,jsx,ts,tsx}",
 8:     setupNodeEvents(on, config) {
 9:       // Register the 'log' and 'table' tasks
10:       on("task", {
11:         log(message) {
12:           console.log(message);
13:           return null;
14:         },
15:         table(data) {
16:           console.table(data);
17:           return null;
18:         },
19:       });
20:       return config;
21:     },
22:     baseUrl: "http://localhost:3000",
23:   },
24:   component: {
25:     devServer: {
26:       framework: "next",
27:       bundler: "webpack",
28:     },
29:     supportFile: "src/e2e/cypress/support/component.ts",
30:     specPattern: "src/e2e/cypress/component/**/*.cy.{js,jsx,ts,tsx}",
31:     indexHtmlFile: "src/e2e/cypress/support/component-index.html",
32:   },
33: });
```

## File: cypress.d.ts
```typescript
1: import { mount } from "cypress/react";
2: declare global {
3:   namespace Cypress {
4:     interface Chainable {
5:       mount: typeof mount;
6:     }
7:   }
8: }
```

## File: gitmojis.json
```json
  1: {
  2:   "$schema": "https://gitmoji.dev/api/gitmojis/schema",
  3:   "gitmojis": [
  4:     {
  5:       "emoji": "🎨",
  6:       "entity": "&#x1f3a8;",
  7:       "code": ":art:",
  8:       "description": "Improve structure / format of the code.",
  9:       "name": "art",
 10:       "semver": null
 11:     },
 12:     {
 13:       "emoji": "⚡️",
 14:       "entity": "&#x26a1;",
 15:       "code": ":zap:",
 16:       "description": "Improve performance.",
 17:       "name": "zap",
 18:       "semver": "patch"
 19:     },
 20:     {
 21:       "emoji": "🔥",
 22:       "entity": "&#x1f525;",
 23:       "code": ":fire:",
 24:       "description": "Remove code or files.",
 25:       "name": "fire",
 26:       "semver": null
 27:     },
 28:     {
 29:       "emoji": "🐛",
 30:       "entity": "&#x1f41b;",
 31:       "code": ":bug:",
 32:       "description": "Fix a bug.",
 33:       "name": "bug",
 34:       "semver": "patch"
 35:     },
 36:     {
 37:       "emoji": "🚑️",
 38:       "entity": "&#128657;",
 39:       "code": ":ambulance:",
 40:       "description": "Critical hotfix.",
 41:       "name": "ambulance",
 42:       "semver": "patch"
 43:     },
 44:     {
 45:       "emoji": "✨",
 46:       "entity": "&#x2728;",
 47:       "code": ":sparkles:",
 48:       "description": "Introduce new features.",
 49:       "name": "sparkles",
 50:       "semver": "minor"
 51:     },
 52:     {
 53:       "emoji": "📝",
 54:       "entity": "&#x1f4dd;",
 55:       "code": ":memo:",
 56:       "description": "Add or update documentation.",
 57:       "name": "memo",
 58:       "semver": null
 59:     },
 60:     {
 61:       "emoji": "🚀",
 62:       "entity": "&#x1f680;",
 63:       "code": ":rocket:",
 64:       "description": "Deploy stuff.",
 65:       "name": "rocket",
 66:       "semver": null
 67:     },
 68:     {
 69:       "emoji": "💄",
 70:       "entity": "&#ff99cc;",
 71:       "code": ":lipstick:",
 72:       "description": "Add or update the UI and style files.",
 73:       "name": "lipstick",
 74:       "semver": "patch"
 75:     },
 76:     {
 77:       "emoji": "🎉",
 78:       "entity": "&#127881;",
 79:       "code": ":tada:",
 80:       "description": "Begin a project.",
 81:       "name": "tada",
 82:       "semver": null
 83:     },
 84:     {
 85:       "emoji": "✅",
 86:       "entity": "&#x2705;",
 87:       "code": ":white_check_mark:",
 88:       "description": "Add, update, or pass tests.",
 89:       "name": "white-check-mark",
 90:       "semver": null
 91:     },
 92:     {
 93:       "emoji": "🔒️",
 94:       "entity": "&#x1f512;",
 95:       "code": ":lock:",
 96:       "description": "Fix security or privacy issues.",
 97:       "name": "lock",
 98:       "semver": "patch"
 99:     },
100:     {
101:       "emoji": "🔐",
102:       "entity": "&#x1f510;",
103:       "code": ":closed_lock_with_key:",
104:       "description": "Add or update secrets.",
105:       "name": "closed-lock-with-key",
106:       "semver": null
107:     },
108:     {
109:       "emoji": "🔖",
110:       "entity": "&#x1f516;",
111:       "code": ":bookmark:",
112:       "description": "Release / Version tags.",
113:       "name": "bookmark",
114:       "semver": null
115:     },
116:     {
117:       "emoji": "🚨",
118:       "entity": "&#x1f6a8;",
119:       "code": ":rotating_light:",
120:       "description": "Fix compiler / linter warnings.",
121:       "name": "rotating-light",
122:       "semver": null
123:     },
124:     {
125:       "emoji": "🚧",
126:       "entity": "&#x1f6a7;",
127:       "code": ":construction:",
128:       "description": "Work in progress.",
129:       "name": "construction",
130:       "semver": null
131:     },
132:     {
133:       "emoji": "💚",
134:       "entity": "&#x1f49a;",
135:       "code": ":green_heart:",
136:       "description": "Fix CI Build.",
137:       "name": "green-heart",
138:       "semver": null
139:     },
140:     {
141:       "emoji": "⬇️",
142:       "entity": "⬇️",
143:       "code": ":arrow_down:",
144:       "description": "Downgrade dependencies.",
145:       "name": "arrow-down",
146:       "semver": "patch"
147:     },
148:     {
149:       "emoji": "⬆️",
150:       "entity": "⬆️",
151:       "code": ":arrow_up:",
152:       "description": "Upgrade dependencies.",
153:       "name": "arrow-up",
154:       "semver": "patch"
155:     },
156:     {
157:       "emoji": "📌",
158:       "entity": "&#x1F4CC;",
159:       "code": ":pushpin:",
160:       "description": "Pin dependencies to specific versions.",
161:       "name": "pushpin",
162:       "semver": "patch"
163:     },
164:     {
165:       "emoji": "👷",
166:       "entity": "&#x1f477;",
167:       "code": ":construction_worker:",
168:       "description": "Add or update CI build system.",
169:       "name": "construction-worker",
170:       "semver": null
171:     },
172:     {
173:       "emoji": "📈",
174:       "entity": "&#x1F4C8;",
175:       "code": ":chart_with_upwards_trend:",
176:       "description": "Add or update analytics or track code.",
177:       "name": "chart-with-upwards-trend",
178:       "semver": "patch"
179:     },
180:     {
181:       "emoji": "♻️",
182:       "entity": "&#x267b;",
183:       "code": ":recycle:",
184:       "description": "Refactor code.",
185:       "name": "recycle",
186:       "semver": null
187:     },
188:     {
189:       "emoji": "➕",
190:       "entity": "&#10133;",
191:       "code": ":heavy_plus_sign:",
192:       "description": "Add a dependency.",
193:       "name": "heavy-plus-sign",
194:       "semver": "patch"
195:     },
196:     {
197:       "emoji": "➖",
198:       "entity": "&#10134;",
199:       "code": ":heavy_minus_sign:",
200:       "description": "Remove a dependency.",
201:       "name": "heavy-minus-sign",
202:       "semver": "patch"
203:     },
204:     {
205:       "emoji": "🔧",
206:       "entity": "&#x1f527;",
207:       "code": ":wrench:",
208:       "description": "Add or update configuration files.",
209:       "name": "wrench",
210:       "semver": "patch"
211:     },
212:     {
213:       "emoji": "🔨",
214:       "entity": "&#128296;",
215:       "code": ":hammer:",
216:       "description": "Add or update development scripts.",
217:       "name": "hammer",
218:       "semver": null
219:     },
220:     {
221:       "emoji": "🌐",
222:       "entity": "&#127760;",
223:       "code": ":globe_with_meridians:",
224:       "description": "Internationalization and localization.",
225:       "name": "globe-with-meridians",
226:       "semver": "patch"
227:     },
228:     {
229:       "emoji": "✏️",
230:       "entity": "&#59161;",
231:       "code": ":pencil2:",
232:       "description": "Fix typos.",
233:       "name": "pencil2",
234:       "semver": "patch"
235:     },
236:     {
237:       "emoji": "💩",
238:       "entity": "&#58613;",
239:       "code": ":poop:",
240:       "description": "Write bad code that needs to be improved.",
241:       "name": "poop",
242:       "semver": null
243:     },
244:     {
245:       "emoji": "⏪️",
246:       "entity": "&#9194;",
247:       "code": ":rewind:",
248:       "description": "Revert changes.",
249:       "name": "rewind",
250:       "semver": "patch"
251:     },
252:     {
253:       "emoji": "🔀",
254:       "entity": "&#128256;",
255:       "code": ":twisted_rightwards_arrows:",
256:       "description": "Merge branches.",
257:       "name": "twisted-rightwards-arrows",
258:       "semver": null
259:     },
260:     {
261:       "emoji": "📦️",
262:       "entity": "&#1F4E6;",
263:       "code": ":package:",
264:       "description": "Add or update compiled files or packages.",
265:       "name": "package",
266:       "semver": "patch"
267:     },
268:     {
269:       "emoji": "👽️",
270:       "entity": "&#1F47D;",
271:       "code": ":alien:",
272:       "description": "Update code due to external API changes.",
273:       "name": "alien",
274:       "semver": "patch"
275:     },
276:     {
277:       "emoji": "🚚",
278:       "entity": "&#1F69A;",
279:       "code": ":truck:",
280:       "description": "Move or rename resources (e.g.: files, paths, routes).",
281:       "name": "truck",
282:       "semver": null
283:     },
284:     {
285:       "emoji": "📄",
286:       "entity": "&#1F4C4;",
287:       "code": ":page_facing_up:",
288:       "description": "Add or update license.",
289:       "name": "page-facing-up",
290:       "semver": null
291:     },
292:     {
293:       "emoji": "💥",
294:       "entity": "&#x1f4a5;",
295:       "code": ":boom:",
296:       "description": "Introduce breaking changes.",
297:       "name": "boom",
298:       "semver": "major"
299:     },
300:     {
301:       "emoji": "🍱",
302:       "entity": "&#1F371",
303:       "code": ":bento:",
304:       "description": "Add or update assets.",
305:       "name": "bento",
306:       "semver": "patch"
307:     },
308:     {
309:       "emoji": "♿️",
310:       "entity": "&#9855;",
311:       "code": ":wheelchair:",
312:       "description": "Improve accessibility.",
313:       "name": "wheelchair",
314:       "semver": "patch"
315:     },
316:     {
317:       "emoji": "💡",
318:       "entity": "&#128161;",
319:       "code": ":bulb:",
320:       "description": "Add or update comments in source code.",
321:       "name": "bulb",
322:       "semver": null
323:     },
324:     {
325:       "emoji": "🍻",
326:       "entity": "&#x1f37b;",
327:       "code": ":beers:",
328:       "description": "Write code drunkenly.",
329:       "name": "beers",
330:       "semver": null
331:     },
332:     {
333:       "emoji": "💬",
334:       "entity": "&#128172;",
335:       "code": ":speech_balloon:",
336:       "description": "Add or update text and literals.",
337:       "name": "speech-balloon",
338:       "semver": "patch"
339:     },
340:     {
341:       "emoji": "🗃️",
342:       "entity": "&#128451;",
343:       "code": ":card_file_box:",
344:       "description": "Perform database related changes.",
345:       "name": "card-file-box",
346:       "semver": "patch"
347:     },
348:     {
349:       "emoji": "🔊",
350:       "entity": "&#128266;",
351:       "code": ":loud_sound:",
352:       "description": "Add or update logs.",
353:       "name": "loud-sound",
354:       "semver": null
355:     },
356:     {
357:       "emoji": "🔇",
358:       "entity": "&#128263;",
359:       "code": ":mute:",
360:       "description": "Remove logs.",
361:       "name": "mute",
362:       "semver": null
363:     },
364:     {
365:       "emoji": "👥",
366:       "entity": "&#128101;",
367:       "code": ":busts_in_silhouette:",
368:       "description": "Add or update contributor(s).",
369:       "name": "busts-in-silhouette",
370:       "semver": null
371:     },
372:     {
373:       "emoji": "🚸",
374:       "entity": "&#128696;",
375:       "code": ":children_crossing:",
376:       "description": "Improve user experience / usability.",
377:       "name": "children-crossing",
378:       "semver": "patch"
379:     },
380:     {
381:       "emoji": "🏗️",
382:       "entity": "&#1f3d7;",
383:       "code": ":building_construction:",
384:       "description": "Make architectural changes.",
385:       "name": "building-construction",
386:       "semver": null
387:     },
388:     {
389:       "emoji": "📱",
390:       "entity": "&#128241;",
391:       "code": ":iphone:",
392:       "description": "Work on responsive design.",
393:       "name": "iphone",
394:       "semver": "patch"
395:     },
396:     {
397:       "emoji": "🤡",
398:       "entity": "&#129313;",
399:       "code": ":clown_face:",
400:       "description": "Mock things.",
401:       "name": "clown-face",
402:       "semver": null
403:     },
404:     {
405:       "emoji": "🥚",
406:       "entity": "&#129370;",
407:       "code": ":egg:",
408:       "description": "Add or update an easter egg.",
409:       "name": "egg",
410:       "semver": "patch"
411:     },
412:     {
413:       "emoji": "🙈",
414:       "entity": "&#8bdfe7;",
415:       "code": ":see_no_evil:",
416:       "description": "Add or update a .gitignore file.",
417:       "name": "see-no-evil",
418:       "semver": null
419:     },
420:     {
421:       "emoji": "📸",
422:       "entity": "&#128248;",
423:       "code": ":camera_flash:",
424:       "description": "Add or update snapshots.",
425:       "name": "camera-flash",
426:       "semver": null
427:     },
428:     {
429:       "emoji": "⚗️",
430:       "entity": "&#x2697;",
431:       "code": ":alembic:",
432:       "description": "Perform experiments.",
433:       "name": "alembic",
434:       "semver": "patch"
435:     },
436:     {
437:       "emoji": "🔍️",
438:       "entity": "&#128269;",
439:       "code": ":mag:",
440:       "description": "Improve SEO.",
441:       "name": "mag",
442:       "semver": "patch"
443:     },
444:     {
445:       "emoji": "🏷️",
446:       "entity": "&#127991;",
447:       "code": ":label:",
448:       "description": "Add or update types.",
449:       "name": "label",
450:       "semver": "patch"
451:     },
452:     {
453:       "emoji": "🌱",
454:       "entity": "&#127793;",
455:       "code": ":seedling:",
456:       "description": "Add or update seed files.",
457:       "name": "seedling",
458:       "semver": null
459:     },
460:     {
461:       "emoji": "🚩",
462:       "entity": "&#x1F6A9;",
463:       "code": ":triangular_flag_on_post:",
464:       "description": "Add, update, or remove feature flags.",
465:       "name": "triangular-flag-on-post",
466:       "semver": "patch"
467:     },
468:     {
469:       "emoji": "🥅",
470:       "entity": "&#x1F945;",
471:       "code": ":goal_net:",
472:       "description": "Catch errors.",
473:       "name": "goal-net",
474:       "semver": "patch"
475:     },
476:     {
477:       "emoji": "💫",
478:       "entity": "&#x1f4ab;",
479:       "code": ":dizzy:",
480:       "description": "Add or update animations and transitions.",
481:       "name": "dizzy",
482:       "semver": "patch"
483:     },
484:     {
485:       "emoji": "🗑️",
486:       "entity": "&#x1F5D1;",
487:       "code": ":wastebasket:",
488:       "description": "Deprecate code that needs to be cleaned up.",
489:       "name": "wastebasket",
490:       "semver": "patch"
491:     },
492:     {
493:       "emoji": "🛂",
494:       "entity": "&#x1F6C2;",
495:       "code": ":passport_control:",
496:       "description": "Work on code related to authorization, roles and permissions.",
497:       "name": "passport-control",
498:       "semver": "patch"
499:     },
500:     {
501:       "emoji": "🩹",
502:       "entity": "&#x1FA79;",
503:       "code": ":adhesive_bandage:",
504:       "description": "Simple fix for a non-critical issue.",
505:       "name": "adhesive-bandage",
506:       "semver": "patch"
507:     },
508:     {
509:       "emoji": "🧐",
510:       "entity": "&#x1F9D0;",
511:       "code": ":monocle_face:",
512:       "description": "Data exploration/inspection.",
513:       "name": "monocle-face",
514:       "semver": null
515:     },
516:     {
517:       "emoji": "⚰️",
518:       "entity": "&#x26B0;",
519:       "code": ":coffin:",
520:       "description": "Remove dead code.",
521:       "name": "coffin",
522:       "semver": null
523:     },
524:     {
525:       "emoji": "🧪",
526:       "entity": "&#x1F9EA;",
527:       "code": ":test_tube:",
528:       "description": "Add a failing test.",
529:       "name": "test-tube",
530:       "semver": null
531:     },
532:     {
533:       "emoji": "👔",
534:       "entity": "&#128084;",
535:       "code": ":necktie:",
536:       "description": "Add or update business logic.",
537:       "name": "necktie",
538:       "semver": "patch"
539:     },
540:     {
541:       "emoji": "🩺",
542:       "entity": "&#x1FA7A;",
543:       "code": ":stethoscope:",
544:       "description": "Add or update healthcheck.",
545:       "name": "stethoscope",
546:       "semver": null
547:     },
548:     {
549:       "emoji": "🧱",
550:       "entity": "&#x1f9f1;",
551:       "code": ":bricks:",
552:       "description": "Infrastructure related changes.",
553:       "name": "bricks",
554:       "semver": null
555:     },
556:     {
557:       "emoji": "🧑‍💻",
558:       "entity": "&#129489;&#8205;&#128187;",
559:       "code": ":technologist:",
560:       "description": "Improve developer experience.",
561:       "name": "technologist",
562:       "semver": null
563:     },
564:     {
565:       "emoji": "💸",
566:       "entity": "&#x1F4B8;",
567:       "code": ":money_with_wings:",
568:       "description": "Add sponsorships or money related infrastructure.",
569:       "name": "money-with-wings",
570:       "semver": null
571:     },
572:     {
573:       "emoji": "🧵",
574:       "entity": "&#x1F9F5;",
575:       "code": ":thread:",
576:       "description": "Add or update code related to multithreading or concurrency.",
577:       "name": "thread",
578:       "semver": null
579:     },
580:     {
581:       "emoji": "🦺",
582:       "entity": "&#x1F9BA;",
583:       "code": ":safety_vest:",
584:       "description": "Add or update code related to validation.",
585:       "name": "safety-vest",
586:       "semver": null
587:     }
588:   ]
589: }
```

## File: jest.config.ts
```typescript
 1: import type { Config } from "jest";
 2: import nextJest from "next/jest";
 3: const createJestConfig = nextJest({
 4:   // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
 5:   dir: "./",
 6: });
 7: // Add any custom config to be passed to Jest
 8: const customJestConfig: Config = {
 9:   preset: "ts-jest/presets/js-with-babel-esm",
10:   setupFilesAfterEnv: ["<rootDir>/jest.setup.ts"],
11:   testPathIgnorePatterns: ["<rootDir>/src/e2e/"],
12:   testEnvironment: "jest-environment-jsdom",
13:   moduleNameMapper: {
14:     "@/(.*)": "<rootDir>/src/$1",
15:   },
16:   collectCoverageFrom: [
17:     "src/components/*.{js,jsx,ts,tsx}",
18:     "!src/lib/**/*.*",
19:     "!src/pages/**/*.*",
20:     "!src/utils/**/*.*",
21:   ],
22: };
23: // createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
24: export default createJestConfig(customJestConfig);
```

## File: jest.setup.ts
```typescript
 1: /// <reference types="jest" />
 2: import "@testing-library/jest-dom";
 3: import "jest-extended";
 4: import { checkAAAPattern } from "./src/utils/test-utils";
 5: import fs from "fs/promises";
 6: declare global {
 7:   namespace jest {
 8:     interface Matchers<R> {
 9:       toBeInTheDocument(): R;
10:       toHaveTextContent(text: string): R;
11:       toBeVisible(): R;
12:       toBeDisabled(): R;
13:       toBeEnabled(): R;
14:       toHaveAttribute(attr: string, value?: string): R;
15:       toHaveBeenCalledExactly(times: number): R;
16:     }
17:   }
18: }
19: function getTestPath(): string | undefined {
20:   return (expect as any).getState().testPath;
21: }
22: beforeEach(async () => {
23:   const testPath = getTestPath();
24:   // Skip this check for test-rule.test.tsx since it contains intentionally invalid tests
25:   // Also skip if we can't determine the test path
26:   if (
27:     testPath &&
28:     !testPath.includes("test-rule.test.tsx") &&
29:     !testPath.includes("node_modules")
30:   ) {
31:     try {
32:       const content = await fs.readFile(testPath, "utf8");
33:       const result = checkAAAPattern(content);
34:       if (!result.isValid) {
35:         throw new Error(
36:           `Test file is missing required AAA comments: ${result.missingComments.join(", ")}\n` +
37:             "Each test should include:\n" +
38:             "// Arrange - Set up test data and conditions\n" +
39:             "// Act - Perform the action being tested\n" +
40:             "// Assert - Verify the results",
41:         );
42:       }
43:     } catch (error) {
44:       if (error instanceof Error) {
45:         throw new Error(`Failed to validate AAA pattern: ${error.message}`);
46:       }
47:       throw error;
48:     }
49:   }
50: });
```

## File: LICENSE
```
 1: MIT License
 2: 
 3: Copyright (c) 2025 Daniel Fjeldstad
 4: 
 5: Permission is hereby granted, free of charge, to any person obtaining a copy
 6: of this software and associated documentation files (the "Software"), to deal
 7: in the Software without restriction, including without limitation the rights
 8: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 9: copies of the Software, and to permit persons to whom the Software is
10: furnished to do so, subject to the following conditions:
11: 
12: The above copyright notice and this permission notice shall be included in all
13: copies or substantial portions of the Software.
14: 
15: THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
16: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
17: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
18: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
19: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
20: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
21: SOFTWARE.
```

## File: lighthouserc.json
```json
 1: {
 2:   "ci": {
 3:     "collect": {
 4:       "numberOfRuns": 1,
 5:       "url": [
 6:         "http://localhost:3000/",
 7:         "http://localhost:3000/cv",
 8:         "http://localhost:3000/prosjekter",
 9:         "http://localhost:3000/kontakt"
10:       ],
11:       "port": 3000,
12:       "settings": {
13:         "onlyCategories": [
14:           "performance",
15:           "accessibility",
16:           "best-practices",
17:           "seo"
18:         ],
19:         "skipAudits": ["uses-http2"]
20:       }
21:     },
22:     "upload": {
23:       "target": "temporary-public-storage"
24:     },
25:     "assert": {
26:       "assertions": {
27:         "categories:performance": ["warn", { "minScore": 0.6 }],
28:         "categories:accessibility": ["warn", { "minScore": 0.9 }],
29:         "categories:best-practices": ["warn", { "minScore": 0.9 }],
30:         "categories:seo": ["warn", { "minScore": 0.9 }],
31:         "uses-http2": "off"
32:       }
33:     }
34:   }
35: }
```

## File: next.config.ts
```typescript
 1: import type { NextConfig } from "next";
 2: const cspDirectives = {
 3:   "default-src": ["'self'"],
 4:   "script-src": [
 5:     "'self'",
 6:     "'unsafe-eval'",
 7:     "'unsafe-inline'",
 8:     "https://va.vercel-scripts.com",
 9:   ],
10:   "style-src": ["'self'", "'unsafe-inline'"],
11:   "img-src": ["'self'", "blob:", "data:", "https://cdn.sanity.io"],
12:   "font-src": ["'self'"],
13:   "object-src": ["'none'"],
14:   "base-uri": ["'self'"],
15:   "form-action": ["'self'"],
16:   "frame-ancestors": ["'self'", "https://presentasjon.dfweb.no"],
17:   "connect-src": [
18:     "'self'",
19:     "https://api.emailjs.com",
20:     "https://va.vercel-scripts.com",
21:   ],
22: };
23: const buildCspHeader = (directives: Record<string, string[]>) =>
24:   Object.entries(directives)
25:     .map(([key, values]) => `${key} ${values.join(" ")};`)
26:     .join(" ") + " upgrade-insecure-requests;";
27: const nextConfig: NextConfig = {
28:   images: {
29:     remotePatterns: [
30:       {
31:         protocol: "https",
32:         hostname: "cdn.sanity.io",
33:       },
34:     ],
35:   },
36:   async headers() {
37:     return [
38:       {
39:         source: "/:path*",
40:         headers: [
41:           {
42:             key: "X-Frame-Options",
43:             value: "ALLOW-FROM https://presentasjon.dfweb.no",
44:           },
45:           { key: "X-Content-Type-Options", value: "nosniff" },
46:           {
47:             key: "Content-Security-Policy",
48:             value: buildCspHeader(cspDirectives),
49:           },
50:         ],
51:       },
52:     ];
53:   },
54: };
55: export default nextConfig;
```

## File: package.json
```json
 1: {
 2:   "name": "dfweb-v4",
 3:   "version": "1.0.8",
 4:   "private": true,
 5:   "engines": {
 6:     "node": ">=20.16.0"
 7:   },
 8:   "scripts": {
 9:     "dev": "next dev --turbopack",
10:     "lhci": "lhci autorun",
11:     "lhci:perf": "lhci autorun --collect.settings.preset=perf",
12:     "lhci:desktop": "lhci autorun --collect.settings.preset=desktop",
13:     "build": "next build",
14:     "start": "next start",
15:     "lint": "next lint",
16:     "format": "prettier --write \"**/*.{ts,tsx,json}\"",
17:     "test": "jest --coverage --collectCoverageFrom='src/components/**/*.{js,jsx,ts,tsx}' --collectCoverageFrom='!src/components/Animations/Matrix.component.{js,jsx,ts,tsx}'",
18:     "test:watch": "jest --watch",
19:     "cypress:open": "cypress open",
20:     "cypress:headless": "cypress run",
21:     "e2e": "start-test dev 3000 cypress:headless",
22:     "refresh": "pnpm i && rm -rf node_modules && rm pnpm-lock.yaml && pnpm store prune && pnpm i && pnpm format",
23:     "ladle": "ladle serve"
24:   },
25:   "dependencies": {
26:     "@emailjs/browser": "^4.4.1",
27:     "@hookform/resolvers": "^3.10.0",
28:     "@portabletext/react": "^3.2.0",
29:     "@sanity/client": "^6.25.0",
30:     "@sanity/image-url": "^1.1.0",
31:     "@vercel/speed-insights": "^1.1.0",
32:     "autoprefixer": "^10.4.20",
33:     "clsx": "^2.1.1",
34:     "cookie": ">=1.0.2",
35:     "envalid": "^8.0.0",
36:     "jest": "^29.7.0",
37:     "motion": "^11.18.1",
38:     "next": "15.1.4",
39:     "next-sanity": "^9.8.37",
40:     "path-to-regexp": "^8.2.0",
41:     "react": "^19.0.0",
42:     "react-dom": "^19.0.0",
43:     "react-error-boundary": "^5.0.0",
44:     "react-hook-form": "^7.54.2",
45:     "react-icons": "^5.4.0",
46:     "react-use": "^17.6.0",
47:     "sanity": "^3.70.0",
48:     "sitemap": "^8.0.0",
49:     "ts-node": "^10.9.2",
50:     "zod": "^3.24.1"
51:   },
52:   "devDependencies": {
53:     "@jest/expect": "^29.7.0",
54:     "@ladle/react": "^5.0.1",
55:     "@lhci/cli": "^0.14.0",
56:     "@playwright/test": "^1.49.1",
57:     "@testing-library/jest-dom": "^6.6.3",
58:     "@testing-library/react": "^16.2.0",
59:     "@testing-library/user-event": "^14.6.0",
60:     "@types/jest": "^29.5.14",
61:     "@types/node": "^22.10.7",
62:     "@types/react": "^19.0.7",
63:     "@types/react-dom": "^19.0.3",
64:     "@typescript-eslint/eslint-plugin": "^8.20.0",
65:     "@typescript-eslint/parser": "^8.20.0",
66:     "axe-core": "^4.10.2",
67:     "cypress": "13.17.0",
68:     "cypress-axe": "^1.5.0",
69:     "eslint": "9.18.0",
70:     "eslint-config-next": "15.1.4",
71:     "eslint-plugin-jest": "^28.11.0",
72:     "eslint-plugin-jsx-a11y": "^6.10.2",
73:     "eslint-plugin-react": "^7.37.4",
74:     "eslint-plugin-react-hooks": "^5.1.0",
75:     "eslint-plugin-test-rules": "link:eslint-plugin-test-rules",
76:     "eslint-plugin-testing-library": "^7.1.1",
77:     "jest-environment-jsdom": "^29.7.0",
78:     "jest-extended": "^4.0.2",
79:     "jsdom-testing-mocks": "^1.13.1",
80:     "postcss": "^8.5.1",
81:     "prettier": "3.4.2",
82:     "tailwindcss": "^3.4.17",
83:     "ts-jest": "^29.2.5",
84:     "typescript": "^5.7.3",
85:     "wait-on": "^8.0.2"
86:   }
87: }
```

## File: playwright.config.ts
```typescript
 1: import { defineConfig, devices } from "@playwright/test";
 2: /**
 3:  * See https://playwright.dev/docs/test-configuration.
 4:  */
 5: export default defineConfig({
 6:   testDir: "./src/e2e/playwright",
 7:   /* Run tests in files in parallel */
 8:   fullyParallel: true,
 9:   /* Fail the build on CI if you accidentally left test.only in the source code. */
10:   forbidOnly: !!process.env.CI,
11:   /* Retry on CI only */
12:   retries: process.env.CI ? 2 : 0,
13:   /* Opt out of parallel tests on CI. */
14:   workers: process.env.CI ? 1 : undefined,
15:   /* Reporter to use. See https://playwright.dev/docs/test-reporters */
16:   reporter: "html",
17:   /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
18:   use: {
19:     /* Base URL to use in actions like `await page.goto('/')`. */
20:     baseURL: "http://127.0.0.1:3000",
21:     //baseURL: 'https://www.dfweb.no',
22:     /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
23:     trace: "on-first-retry",
24:   },
25:   /* Configure projects for major browsers */
26:   projects: [
27:     {
28:       name: "chromium",
29:       use: { ...devices["Desktop Chrome"] },
30:     },
31:     {
32:       name: "firefox",
33:       use: { ...devices["Desktop Firefox"] },
34:     },
35:     /* Test against mobile viewports. */
36:     /*
37:     {
38:       name: "Mobile Chrome",
39:       use: { ...devices["Pixel 5"] },
40:     },
41:     */
42:     // {
43:     //   name: 'Mobile Safari',
44:     //   use: { ...devices['iPhone 12'] },
45:     // },
46:     /* Test against branded browsers. */
47:     // {
48:     //   name: 'Microsoft Edge',
49:     //   use: { ...devices['Desktop Edge'], channel: 'msedge' },
50:     // },
51:     // {
52:     //   name: 'Google Chrome',
53:     //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
54:     // },
55:   ],
56:   /* Run your local dev server before starting the tests */
57:   // webServer: {
58:   //   command: 'npm run start',
59:   //   url: 'http://127.0.0.1:3000',
60:   //   reuseExistingServer: !process.env.CI,
61:   // },
62: });
```

## File: postcss.config.mjs
```
1: /** @type {import('postcss-load-config').Config} */
2: const config = {
3:     plugins: {
4:       tailwindcss: {},
5:     },
6:   };
7:   
8:   export default config;
```

## File: README.md
```markdown
  1: [![cypress](https://github.com/w3bdesign/dfweb-v4/actions/workflows/cypress.yml/badge.svg)](https://github.com/w3bdesign/dfweb-v4/actions/workflows/cypress.yml)
  2: [![Lighthouse CI](https://github.com/w3bdesign/dfweb-v4/actions/workflows/lighthouse.yml/badge.svg)](https://github.com/w3bdesign/dfweb-v4/actions/workflows/lighthouse.yml)
  3: [![Codacy Badge](https://app.codacy.com/project/badge/Grade/3e803ad0f17146b78bbed9850eb1461f)](https://app.codacy.com/gh/w3bdesign/dfweb-v4/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade)
  4: [![codecov](https://codecov.io/gh/w3bdesign/dfweb-v4/graph/badge.svg?token=AHQW8WQ6U8)](https://codecov.io/gh/w3bdesign/dfweb-v4)
  5: [![Maintainability](https://api.codeclimate.com/v1/badges/8d5cae5017b1a9698843/maintainability)](https://codeclimate.com/github/w3bdesign/dfweb-v4/maintainability)
  6:  
  7: # Dfweb.no Portfolio Version 4
  8: 
  9: Fourth version of my personal portfolio website with Next.js, Motion, Sanity.io and Typescript.
 10: 
 11: ## Table of Contents
 12: - [Live URL](#live-url)
 13: - [Frontend](#frontend)
 14: - [Backend](#backend)
 15: - [Google Lighthouse](#google-lighthouse)
 16: - [Features](#features)
 17:   - [General](#general)
 18:   - [Design](#design)
 19:   - [Accessibility](#accessibility)
 20:   - [Devops and Code quality](#devops-and-code-quality)
 21:   - [Environment Variables](#environment-variables)
 22:   - [Testing Standards](#testing-standards)
 23: 
 24: ## Live URL
 25: 
 26: <https://www.dfweb.no/>
 27: 
 28: ## Frontend (Next.js)
 29: 
 30: <img src="/public/images/frontend.png" alt="Frontend Image" />
 31: 
 32: * * *
 33: 
 34: ## Backend (Sanity headless CMS)
 35: 
 36: <img src="https://github.com/user-attachments/assets/67099a89-0cda-458a-9fcd-ab09b016ace4" alt="Backend Image" />
 37: 
 38: * * *
 39: 
 40: ## Google Lighthouse
 41: 
 42: ![image](https://github.com/user-attachments/assets/418aa995-1913-4946-b6f8-5ca8eb9d07a5)
 43: 
 44: ## Features
 45: 
 46: ### General
 47: 
 48: - Clean, modern, responsive and Matrix-inspired design
 49: - The application is 100% typescript
 50: - Matrix canvas rain effect on front page
 51: - Custom 404 page with Matrix rain effect
 52: - Next.js 15 with Typescript and App router
 53:   - Server Components implementation for improved performance
 54:   - Streaming with Suspense boundaries
 55:   - Automatic static optimization with revalidation
 56:   - Server-side data fetching with proper error handling
 57: - React 19
 58: - Sanity headless cms for all of the content, projects and navigation links
 59: - Ladle for component documentation
 60: - Animations with Motion
 61: - React testing library for unit testing
 62: - Cypress for E2E testing
 63: - Playwright for cross-browser E2E testing
 64: - Contact form with Email.js
 65: - Polymorphic components
 66: - Automatic sitemap generation (see /api/siteMapGenerator.ts)
 67: - Google rich results for each individual page
 68: - 100% / 100% / 100% / 100% score in Google Lighthouse
 69: - Automated Lighthouse CI testing integrated with GitHub Actions
 70: - React Hook Form with Typescript and Zod for efficient form handling and validation
 71: - Reusable GenericForm component for easy form creation and management
 72: - Error handling with react-error-boundary for improved user experience and easier debugging
 73: - AI-friendly repository documentation with automated updates
 74: 
 75: ### Design
 76: 
 77: - Fully responsive design tested on all devices
 78: - React Icons for project icons
 79: - Tailwind CSS for styling
 80: - Animated reusable input fields
 81: - Matrix-inspired animated cursor with dynamic trailing effect with fading Matrix characters
 82:  
 83: ### Accessibility
 84: 
 85: - WCAG accessibility tested
 86: - Accessibility testing with Cypress Axe
 87: - Builds will fail if any a11y errors are found
 88: 
 89: ### Devops and Code quality
 90: 
 91: - Continuous Integration with CircleCI
 92: - CircleCI will warn before deploy if tests fail (setup for React testing library)
 93: - Github action workflow for Cypress
 94: - Code quality analysis with Codacy, Sonarcloud and Codeclimate
 95: - E2E testing with Cypress and Playwright integrated with Github actions
 96: - Unit testing with Jest and React Testing Library integrated with CircleCI
 97: - Test coverage setup with Codecov
 98: - 100% test coverage with Jest and React testing library
 99: - AI-powered commit message generation following Conventional Commits with gitmojis
100: - Automated performance monitoring with Lighthouse CI
101:   - Performance, accessibility, best practices, and SEO checks on every PR
102:   - Configurable thresholds for quality metrics
103:   - Both desktop and performance-focused testing
104: - Automated repository documentation with Repomix
105:   - AI-friendly documentation generation on every push to main
106:   - Comprehensive repository context maintained in `DOCS/repository_context.txt`
107:   - Automated PR analysis with repository structure insights
108:   - Security-focused documentation with sensitive information filtering
109:   - Markdown formatting for improved readability
110: 
111: ### Environment Variables
112: 
113: - Type-safe environment variable validation with envalid
114:   - Runtime validation of required environment variables
115:   - Clear error messages with examples for missing variables
116:   - Separate handling of client-side and server-side variables
117:   - Default values where appropriate
118:   - Required variables:
119:     ```env
120:     # Email Configuration (client-side)
121:     NEXT_PUBLIC_EMAIL_API_KEY=user_xxx        # EmailJS API key
122:     NEXT_PUBLIC_EMAIL_TEMPLATE_KEY=template_xxx # EmailJS template key
123:     NEXT_PUBLIC_EMAIL_SERVICE_KEY=service_xxx  # EmailJS service key
124: 
125:     # AI Configuration (server-side)
126:     AI_API_KEY=xxx                            # AI service API key
127:     AI_BASE_URL=https://xxx                   # AI service base URL
128:     MODEL_NAME=claude-3.5-sonnet@anthropic    # Optional, has default value
129:     ```
130:   - Validation prevents application startup if required variables are missing
131:   - TypeScript integration for type-safe access to environment variables
132: 
133: ### Testing Standards
134: 
135: - Enforced AAA (Arrange-Act-Assert) pattern in all test files
136:   - Each test must include the following comments:
137:     ```typescript
138:     // Arrange - Set up test data and conditions
139:     // Act - Perform the action being tested
140:     // Assert - Verify the results
141:     ```
142:   - This pattern ensures:
143:     - Clear test structure and readability
144:     - Consistent test organization across the codebase
145:     - Easy identification of test setup, execution, and verification
146:     - Simplified test maintenance and debugging
147:   - Automated validation through custom ESLint rules
148:   - Tests will fail if AAA pattern is not followed
```

## File: renovate.json
```json
 1: {
 2:   "extends": ["config:recommended"],
 3:   "ignorePresets": [":prHourlyLimit2", ":prConcurrentLimit20"],
 4:   "packageRules": [
 5:     {
 6:       "rangeStrategy": "bump",
 7:       "matchDepTypes": [
 8:         "dependencies",
 9:         "devDependencies",
10:         "optionalDependencies",
11:         "peerDependencies"
12:       ]
13:     },
14:     {
15:       "matchUpdateTypes": ["minor", "pin", "digest"],
16:       "automerge": true,
17:       "matchDepTypes": [
18:         "dependencies",
19:         "devDependencies",
20:         "optionalDependencies",
21:         "peerDependencies"
22:       ]
23:     },
24:     {
25:       "matchUpdateTypes": ["patch", "lockFileMaintenance"],
26:       "automerge": true,
27:       "automergeType": "branch",
28:       "matchDepTypes": [
29:         "dependencies",
30:         "devDependencies",
31:         "optionalDependencies",
32:         "peerDependencies"
33:       ]
34:     }
35:   ]
36: }
```

## File: repomix.config.json
```json
 1: {
 2:   "output": {
 3:     "filePath": "DOCS/repository_context.txt",
 4:     "style": "markdown",
 5:     "removeEmptyLines": true,
 6:     "fileSummary": true,
 7:     "directoryStructure": true,
 8:     "showLineNumbers": true,
 9:     "topFilesLength": 10,
10:     "includeEmptyDirectories": false,
11:     "headerText": "This file is automatically generated by Repomix to provide AI tools with up-to-date repository context. Last updated by GitHub Actions."
12:   },
13:   "ignore": {
14:     "useGitignore": true,
15:     "useDefaultPatterns": true,
16:     "customPatterns": [
17:       "DOCS/repository_context.txt",
18:       ".env*",
19:       "*.log",
20:       "dist",
21:       "build",
22:       "coverage"
23:     ]
24:   },
25:   "security": {
26:     "enableSecurityCheck": true
27:   },
28:   "tokenCount": {
29:     "encoding": "cl100k_base"
30:   }
31: }
```

## File: sanity.cli.ts
```typescript
1: import { defineCliConfig } from "sanity/cli";
2: export default defineCliConfig({
3:   api: {
4:     projectId: "jgcz3b93",
5:     dataset: "production",
6:   },
7: });
```

## File: tailwind.config.ts
```typescript
  1: import type { Config } from "tailwindcss";
  2: const config: Config = {
  3:   content: [
  4:     "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
  5:     "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  6:     "./src/**/*.{js,ts,jsx,tsx,mdx}",
  7:   ],
  8:   theme: {
  9:     extend: {
 10:       backgroundImage: {
 11:         "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
 12:         "gradient-conic":
 13:           "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
 14:       },
 15:       colors: {
 16:         // New Modern Color Scheme
 17:         primary: "var(--primary)",
 18:         secondary: "var(--secondary)",
 19:         accent: "var(--accent)",
 20:         text: "var(--text)",
 21:         background: "var(--background)",
 22:         // Semantic Colors
 23:         success: "#00cc4e",
 24:         error: "#ff4e4e",
 25:         warning: "#ffb74e",
 26:         info: "#4e9fff",
 27:         // Surface Colors
 28:         surface: {
 29:           light: "rgba(255, 255, 255, 0.05)",
 30:           DEFAULT: "rgba(26, 26, 26, 0.8)",
 31:           dark: "rgba(0, 0, 0, 0.8)",
 32:         },
 33:         // Matrix Theme Colors
 34:         matrix: {
 35:           light: "#00ff62",
 36:           DEFAULT: "#00cc4e",
 37:           dark: "#008529",
 38:           glow: "rgba(0, 255, 98, 0.6)",
 39:         },
 40:       },
 41:       fontFamily: {
 42:         sans: [
 43:           "Inter",
 44:           "-apple-system",
 45:           "BlinkMacSystemFont",
 46:           "Segoe UI",
 47:           "Roboto",
 48:           "Oxygen",
 49:           "Ubuntu",
 50:           "Cantarell",
 51:           "sans-serif",
 52:         ],
 53:         mono: ["JetBrains Mono", "monospace"],
 54:       },
 55:       boxShadow: {
 56:         glow: "0 0 15px rgba(0, 255, 98, 0.6)",
 57:         "glow-sm": "0 0 10px rgba(0, 255, 98, 0.4)",
 58:         "glow-lg": "0 0 20px rgba(0, 255, 98, 0.8)",
 59:       },
 60:       backdropBlur: {
 61:         xs: "2px",
 62:       },
 63:       animation: {
 64:         "matrix-fade": "matrixFade 2s ease-out",
 65:         "glow-pulse": "glowPulse 2s ease-in-out infinite",
 66:         "matrix-glow": "matrixGlow 2s ease-in-out infinite",
 67:       },
 68:       keyframes: {
 69:         matrixFade: {
 70:           "0%": { opacity: "0", transform: "translateY(-10px)" },
 71:           "100%": { opacity: "1", transform: "translateY(0)" },
 72:         },
 73:         glowPulse: {
 74:           "0%, 100%": { boxShadow: "0 0 15px rgba(0, 255, 98, 0.6)" },
 75:           "50%": { boxShadow: "0 0 25px rgba(0, 255, 98, 0.8)" },
 76:         },
 77:         matrixGlow: {
 78:           "0%, 100%": { filter: "drop-shadow(0 0 5px rgba(0, 255, 98, 0.6))" },
 79:           "50%": { filter: "drop-shadow(0 0 15px rgba(0, 255, 98, 0.8))" },
 80:         },
 81:       },
 82:       typography: {
 83:         DEFAULT: {
 84:           css: {
 85:             color: "var(--text)",
 86:             a: {
 87:               color: "var(--secondary)",
 88:               "&:hover": {
 89:                 color: "var(--accent)",
 90:               },
 91:             },
 92:             h1: {
 93:               color: "var(--accent)",
 94:             },
 95:             h2: {
 96:               color: "var(--secondary)",
 97:             },
 98:           },
 99:         },
100:       },
101:     },
102:   },
103:   plugins: [],
104: };
105: export default config;
```

## File: TODO.md
```markdown
  1: # Next.js 15 Implementation TODO
  2: 
  3: This document outlines the planned improvements for implementing Next.js 15 features in our project.
  4: 
  5: ## 1. Project Structure Reorganization
  6: 
  7: ### Current Structure
  8: 
  9: Currently, our project has a flat structure in src/components with separate folders for different component types. While organized, we can improve the structure using Next.js 15's recommended patterns.
 10: 
 11: ### Implementation Plan
 12: 
 13: 1. **Create Three Main Zones**
 14: 
 15:    ```
 16:    src/
 17:    ├── shared/           # Green Zone - Shared code
 18:    │   ├── components/   # Reusable UI components
 19:    │   ├── constants/    # Global constants
 20:    │   ├── types/       # TypeScript types/interfaces
 21:    │   └── utils/       # Utility functions
 22:    │
 23:    ├── navigation/      # Red Zone - Navigation & Data
 24:    │   ├── routes/      # Route configurations
 25:    │   └── data/        # Data fetching functions
 26:    │
 27:    └── features/        # Blue Zone - Feature modules
 28:        ├── cv/
 29:        ├── projects/
 30:        ├── contact/
 31:        └── home/
 32:    ```
 33: 
 34: 2. **Migration Steps**
 35: 
 36:    - Create the new directory structure
 37:    - Move common components (Button, InputField, etc.) to shared/components
 38:    - Organize feature-specific components into respective feature folders
 39:    - Update import paths throughout the project
 40:    - Ensure no circular dependencies between zones
 41: 
 42: 3. **Rules to Follow**
 43:    - Shared (Green) zone: No imports from other zones
 44:    - Navigation (Red) zone: Can import from shared
 45:    - Features (Blue) zone: Can import from shared and navigation
 46:    - No imports between feature modules
 47: 
 48: ## 3. Enhanced Caching Strategy
 49: 
 50: ### Current Caching
 51: 
 52: We currently rely on Next.js's default caching behavior. We can improve performance with explicit cache controls.
 53: 
 54: ### Implementation Plan
 55: 
 56: 1. **Define Cache Profiles**
 57: 
 58:    ```typescript
 59:    // src/shared/cache/profiles.ts
 60:    export const cacheProfiles = {
 61:      static: {
 62:        revalidate: false,
 63:        tags: ["static"],
 64:      },
 65:      dynamic: {
 66:        revalidate: 3600, // 1 hour
 67:        tags: ["dynamic"],
 68:      },
 69:    };
 70:    ```
 71: 
 72: 2. **Implement Cache Controls**
 73: 
 74:    ```typescript
 75:    // src/features/projects/data.ts
 76:    import { cache } from "react";
 77: 
 78:    export const getProjects = cache(async () => {
 79:      // Fetch projects with caching
 80:      const response = await fetch("/api/projects", {
 81:        next: cacheProfiles.dynamic,
 82:      });
 83:      return response.json();
 84:    });
 85:    ```
 86: 
 87: 3. **Cache Invalidation Strategy**
 88:    - Implement revalidation endpoints
 89:    - Set up cache tags for granular invalidation
 90:    - Configure cache headers properly
 91: 
 92: ## 4. Feature-based Organization
 93: 
 94: ### Current Component Structure
 95: 
 96: Components are currently organized by type (UI, Animations, etc.). We'll reorganize by feature for better modularity.
 97: 
 98: ### Implementation Steps
 99: 
100: 1. **Feature Module Structure**
101: 
102:    ```
103:    src/features/
104:    ├── cv/
105:    │   ├── components/
106:    │   ├── hooks/
107:    │   ├── utils/
108:    │   └── types.ts
109:    ├── projects/
110:    │   ├── components/
111:    │   ├── hooks/
112:    │   ├── utils/
113:    │   └── types.ts
114:    ```
115: 
116: 2. **Migration Process**
117: 
118:    - Create feature directories
119:    - Move related components, hooks, and utilities
120:    - Update imports and dependencies
121:    - Ensure feature isolation
122:    - Update test file locations
123: 
124: 3. **Feature Module Rules**
125:    - Each feature should be self-contained
126:    - Shared functionality goes in shared/
127:    - Feature-specific types in feature/types.ts
128:    - Feature-specific hooks in feature/hooks/
129: 
130: ## 5. Turbopack Integration
131: 
132: ### Current Build Setup
133: 
134: We use the default webpack configuration. Turbopack can significantly improve build times.
135: 
136: ### Implementation Steps
137: 
138: 1. **Enable Turbopack**
139: 
140:    ```typescript
141:    // next.config.ts
142:    const config: NextConfig = {
143:      experimental: {
144:        turbo: {
145:          loaders: {
146:            // Configure loaders
147:            ".svg": ["@svgr/webpack"],
148:          },
149:        },
150:      },
151:    };
152:    ```
153: 
154: 2. **Performance Monitoring**
155: 
156:    - Measure build times before and after
157:    - Monitor hot reload performance
158:    - Check for compatibility issues
159:    - Document any workarounds needed
160: 
161: 3. **Fallback Strategy**
162:    - Maintain webpack configuration as fallback
163:    - Document any Turbopack-specific issues
164:    - Create scripts for both build systems
165: 
166: ## Additional Considerations
167: 
168: ### Testing Strategy
169: 
170: - Update test file locations to match new structure
171: - Ensure all server actions are properly tested
172: - Add integration tests for new caching behavior
173: - Maintain current test coverage
174: 
175: ### Documentation
176: 
177: - Update component documentation
178: - Document new folder structure
179: - Create migration guide for team
180: - Update README.md with new architecture
181: 
182: ### Performance Monitoring
183: 
184: - Set up metrics for before/after comparison
185: - Monitor cache hit rates
186: - Track build times
187: - Measure Time to First Byte (TTFB)
188: 
189: ## Migration Timeline
190: 
191: 1. **Phase 1: Project Structure (Week 1-2)**
192: 
193:    - Set up new directory structure
194:    - Move files to new locations
195:    - Update import paths
196:    - Verify all tests pass
197: 
198: 2. **Phase 2: Server Actions (Week 3)**
199: 
200:    - Implement server actions
201:    - Update form handling
202:    - Add validation
203:    - Test new functionality
204: 
205: 3. **Phase 3: Caching (Week 4)**
206: 
207:    - Implement cache profiles
208:    - Update data fetching
209:    - Set up revalidation
210:    - Monitor performance
211: 
212: 4. **Phase 4: Feature Organization (Week 5)**
213: 
214:    - Organize by feature
215:    - Update documentation
216:    - Verify functionality
217:    - Run performance tests
218: 
219: 5. **Phase 5: Turbopack (Week 6)**
220:    - Enable Turbopack
221:    - Monitor performance
222:    - Fix any issues
223:    - Document findings
224: 
225: ## Success Metrics
226: 
227: - Build time reduction of 40%+
228: - Improved lighthouse scores
229: - Reduced TTFB
230: - Maintained or improved test coverage
231: - Successful integration of all Next.js 15 features
232: - Positive developer feedback on new structure
233: 
234: This TODO list serves as a comprehensive guide for implementing Next.js 15 features in our project. Each section should be reviewed and adjusted as needed during implementation.
```

## File: tsconfig.json
```json
 1: {
 2:   "compilerOptions": {
 3:     "lib": ["dom", "dom.iterable", "esnext"],
 4:     "allowJs": true,
 5:     "skipLibCheck": true,
 6:     "strict": true,
 7:     "noEmit": true,
 8:     "esModuleInterop": true,
 9:     "module": "esnext",
10:     "moduleResolution": "bundler",
11:     "resolveJsonModule": true,
12:     "isolatedModules": true,
13:     "jsx": "preserve",
14:     "incremental": true,
15:     "plugins": [
16:       {
17:         "name": "next"
18:       }
19:     ],
20:     "paths": {
21:       "@/*": ["./src/*"]
22:     },
23:     "types": ["jest", "@testing-library/jest-dom"],
24:     "target": "ES2017"
25:   },
26:   "include": [
27:     "next-env.d.ts",
28:     "**/*.ts",
29:     "**/*.tsx",
30:     ".next/types/**/*.ts",
31:     "src",
32:     "cypress"
33:   ],
34:   "exclude": ["node_modules"]
35: }
```
